var inptratio = 10, drawwidth = 36 * inptratio, drawheight = 18 * inptratio // 1920*1080 monitor with 16:9(1.778) aspect ratio, monitor unit=120;
var scale = 4, sdh = 108, zscale = 1, drawzoom, zscalex = 0, zscaley = 0, minwh = 2, splashmode = 1, splashminh = 4, splheight = 0; cornerwh = 51;
var defaults = { edgetype: 'E', edgetypeid: 16, edgeclass: 'shapeside' };
var shape = {}, pshapeslabparts = [];
var asvg, shapesg, shapeouterg, shapeg, shapepathg, sidesg, cornersg, cutoutsg, splashsg, sideshapesg, splsideshapesg, seamsg, shapesrect;
var drawhandlesg, anglehandlesg, shapecontrolsg, shapecontrolg;
var shapedraw, shapedrag, sideshapedrag, cutoutdrag, splashdrag, seamdrag, splashseamdrag, splashsideshapedrag, slabsplashdrag, slabsplashseamdrag, anglehandledrag, shapelabeldrag, dragdx = 0, dragdy = 0;
var bdraw = false, bdrag = false, blayout = false, bedit = false;
var drawmode = 0, editmode = 0, layoutmode = 0, chgflag = 0, panmode = 0, innersizemode = 0;
var shapetype = 0, cornertype = 0, cornertypeid = 0, sideshapetype = 0, sideshapetypeid = 0, edgetype = 0, edgetypeid = 0, cutouttype = 0, cutoutinfo = 0, seamtype = 0, countersidemode = 0;
//print
var prsvg, prshapesg, przoom, apdefssvg, prwidth = 350, prheight = 150;
//layout
var mslabsg, mpartimgsg, lwidth = 950, lheight = 780, lzscale = 0.8, layoutzoom, lzscalex = 0, lzscaley = 0;
//slabs
var simg, mslabx = 10, materialid = 0, mslaby = 0, spdx = 50, spdy = 72;
//splabparts
var msvg, slabpartcontrolsg, slabpartx = 500, slabparty = 30, slabpartsgrect, matpartlist = [];
//slabsplashs
var slabsplashouterg, slabsplashg, pshapeslabsplashs = [], shapeslabsplash = {};
//digital layout
var mdgsvg, mdgslabsg, mdgslabpartsg, mdglzscale = 1, mdglwidth = 680, mdglheight = 120;
//defs
var defssvg, markerdefs, maskdefs;
//area and shape labels
var arealabelsg, arealabels = [], labelindex = -1, labeltype = 1, arealabeldrag;
//line color flag
var colorflag = 0;//0-green,1-blue
//line text
var linetxt = 'F';//F-finished,U-unfinished

function initdrawingcontrols() {   
    //setdrawsettings();   
    drawzoom = d3.zoom().extent([[0, 0], [drawwidth, drawheight]]).scaleExtent([1, 1]).on("zoom", svgzoomed);
    shapedraw = d3.drag().on("start", shapedrawstarted).on("drag", shapedrawed).on("end", shapedrawended);
    shapedrag = d3.drag().on("start", shapedragstarted).on("drag", shapedragged).on("end", shapedragended);
    sideshapedrag = d3.drag().on("start", sideshapedragstarted).on("drag", sideshapedragged).on("end", sideshapedragended);
    cutoutdrag = d3.drag().on("start", cutoutdragstarted).on("drag", cutoutdragged).on("end", cutoutdragended);
    splashdrag = d3.drag().on("start", splashdragstarted).on("drag", splashdragged).on("end", splashdragended);
    seamdrag = d3.drag().on("start", seamdragstarted).on("drag", seamdragged).on("end", seamdragended);    
    splashsideshapedrag = d3.drag().on("start", splashsideshapedragstarted).on("drag", splashsideshapedragged).on("end", splashsideshapedragended);
    slabsplashdrag = d3.drag().on("start", slabsplashdragstarted).on("drag", slabsplashdragged).on("end", slabsplashdragended);
    slabsplashseamdrag = d3.drag().on("start", slabsplashseamdragstarted).on("drag", slabsplashseamdragged).on("end", slabsplashseamdragended);
    anglehandledrag = d3.drag().on("start", anglehandledragstarted).on("drag", anglehandledragged).on("end", anglehandledragended);
    shapelabeldrag = d3.drag().on("start", shapelabeldragstarted).on("drag", shapelabeldragged).on("end", shapelabeldragended);
    //arealabeldrag = d3.drag().on("start", arealabeldragstarted).on("drag", arealabeldragged).on("end", arealabeldragended);
    setmarkerdefs();   
}
function setdrawsettings() {
    let dsetting = getcompanydrawsettings();
    if (dsetting != '') {
        scale = dsetting.Scale; splashminh = dsetting.SplashHeight;
        sdh = dsetting.SDHeight == undefined ? sdh : dsetting.SDHeight;
    }
}
function initdrawarea(index) {    
    setdrawlayout();       
    let areaid = getareaid(index); //area id or index??   
    drawpartshapes(index, 'shape', 'drawAreashapes1');    
    resetsvgbounds('shape');
    zoomdrawshapes('shape');
    $("#divmodelshape").hide();
    panmode=0;
}
function setdrawlayout() {
    //set window width
    drawwidth = window.innerWidth - 31;
    asvg = d3.select("#drawsvg"); if (asvg.empty()) { asvg = d3.select('#dsvg').append("svg").attr("id", "drawsvg").call(drawzoom).on("wheel", zoommousewheel); }
    asvg.selectAll('*').remove();
    asvg.attr("viewBox", '0 0 ' + drawwidth + ' ' + drawheight).attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight)
    .attr("preserveAspectRatio", "xMidYMid meet").attr("style", "background-color:white;");
    shapesg = asvg.select("#shapesg"); if (shapesg.empty()) { shapesg = asvg.append("g").attr("id", "shapesg"); } else { shapesg.selectAll('*').remove();}
    shapesg.attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight);
    shapesrect = shapesg.select("#shapesrect"); if (shapesrect.empty()) { shapesrect = shapesg.append("rect").attr("id", "shapesrect"); }
    shapesrect.attr("x", zscalex).attr("y", zscaley).attr("width", drawwidth).attr("height", drawheight).style("fill", "lightblue").style("fill-opacity", "0.1").style("stroke", "skyblue").on("mousedown", svgclick).on("contextmenu", svgcontextmenu);
    arealabelsg = shapesg.select("#arealabelsg"); if (arealabelsg.empty()) { arealabelsg = shapesg.append("g").attr("id", "arealabelsg"); }    
}
function initprintdrawingcontrols() {
    przoom = d3.zoom().on("zoom", printzoomed);
    apdefssvg = d3.select("#apdefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.apdefssvg').append("svg").attr("id", "apdefssvg"); }
    setprintmarkerdefs(apdefssvg);
}
function initshapedgdrawingcontrols() {   
    apdefssvg = d3.select("#apdefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.apdefssvg').append("svg").attr("id", "apdefssvg"); }   
    setprintmarkerdefs(apdefssvg);
    //setmarkerdefs();
}
function initquotearea(index) {
    d3.select('.areasvg').selectAll('*').remove();
    prsvg = d3.select("#areadsvg" + index);
    if (prsvg.empty()) { prsvg = d3.select('.areasvg').append("svg").attr("id", "areadsvg" + index); }
    prsvg.attr("width", prwidth).attr("height", prheight);
    prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
    arealabelsg = prshapesg.select("#arealabelsg"); if (arealabelsg.empty()) { arealabelsg = prshapesg.append("g").attr("id", "arealabelsg"); }
    drawpartshapes(index, 'print', 'initquotearea');
    apdefssvg = d3.select("#areadefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.areadefssvg').append("svg").attr("id", "areadefssvg"); }
    setprintmarkerdefs(apdefssvg);
    resetsvgbounds('print');
}

function initquoteeditarea() {
    let areas = getversionareas();
    for (let i = 0; i < areas.length; i++) {
        setquoteeditarea(i, areas[i].ID);
    }  
}
function setquoteeditarea(index, areaid) {
    d3.select('.editareasvg' + areaid).selectAll('*').remove();
    prsvg = d3.select("#editareadsvg" + areaid + index);
    if (prsvg.empty()) { prsvg = d3.select('.editareasvg' + areaid).append("svg").attr("id", "editareadsvg" + areaid + "" + index); }
    prsvg.attr("width", prwidth - 100).attr("height", prheight);
    prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + areaid + "" + index); }
    arealabelsg = prshapesg.select("#arealabelsg"); if (arealabelsg.empty()) { arealabelsg = prshapesg.append("g").attr("id", "arealabelsg"); }
    drawpartshapes(index, 'print', 'initquotearea');
    apdefssvg = d3.select("#editareadefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.editareadefssvg').append("svg").attr("id", "editareadefssvg"); }
    setprintmarkerdefs(apdefssvg);
    resetsvgbounds('print');
}
function redrawareashapes() {
    let areaindex = getareaindex();
    drawpartshapes(areaindex, 'shape', 'redrawareashapes');
}
function drawpartshapes(index, mode, source) {
    source += ":drawpartshapes";
    editmode = 0;
    //drawarealabels(source);
    let partlist = getpartlist(index);   
    if (partlist != null && partlist.length > 0) {       
        for (let i = 0; i < partlist.length; i++) {           
            if (partlist[i].IsActive == 1 && partlist[i].Shape != null && partlist[i].Shape != 'null' && partlist[i].Shape != '') {               
                drawshape31(i, partlist[i].SrNo, partlist[i].AreaID, mode, source);
            }
        }
    }
}
function initprintarea() {
    przoom = d3.zoom().on("zoom", printzoomed);
    apdefssvg = d3.select("#apdefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.apdefssvg').append("svg").attr("id", "apdefssvg"); }
    //area = areas[index];
    let areaindex = getareaindex();
    let areas = getversionareas();
    for (let index = 0; index < areas.length; index++) {
        let area = areas[index]; setareaindex(index);
        prsvg = d3.select("#apdsvg" + index + area.VersionID + area.ExNo);
        if (prsvg.empty()) { prsvg = d3.select('.pdsvg' + index + area.VersionID + area.ExNo).append("svg").attr("id", "apdsvg" + index + area.VersionID + area.ExNo); }
        prsvg.attr("width", prwidth).attr("height", prheight);
        prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
        arealabelsg = prshapesg.select("#arealabelsg"); if (arealabelsg.empty()) { arealabelsg = prshapesg.append("g").attr("id", "arealabelsg"); }
        drawpartshapes(index, 'print', 'initprintarea');
        resetsvgbounds('print');
    }
    setareaindex(areaindex);
}

function setmarkerdefs() {
    defssvg = d3.select("#defssvg"); if (defssvg.empty()) { defssvg = d3.select('.defssvg').append("svg").attr("id", "defssvg"); }
    markerdefs = defssvg.select("#markerdefs");
    if (markerdefs.empty()) {
        markerdefs = defssvg.append("defs").attr("id", "markerdefs");//check this
        markerdefs.append("marker").attr("id", "triangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "triangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "circle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function setareamarkerdefs(defsvg) {
    markerdefs = defsvg.select("#areamarkerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "areamarkerdefs");//check this
        markerdefs.append("marker").attr("id", "triangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "triangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "circle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function setprintmarkerdefs(defsvg) {
    markerdefs = defsvg.select("#printmarkerdefs");//markerdefs = defsvg.select("#printmarkerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "printmarkerdefs");//check this
        markerdefs.append("marker").attr("id", "printtriangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "printtriangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "printcircle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function resetdragvars(source) {
    bdrag = false, dragdx = 0, dragdy = 0;
}
//SVG Zoom
function zoommousewheel() {    
    //prevent browser zooming
    //console.log(drawmode, bdrag, bdraw,  d3.event.type);
    d3.event.preventDefault();
    if (drawmode == 0 && bdrag == false && bdraw == false && d3.event.type=='wheel') {       
        let direction = d3.event.deltaY < 0 ? 'down' : 'up';
        if (direction == 'up') {
            zoomClick(1);
        } else {
            zoomClick(0);
        }
    }
}
function switchsvgzoom32() { 
    if (panmode == 1) { panmode = 0; resetdrawsvg32(); } else { panmode = 1; drawzoom.on("zoom", svgzoomed);}
    togglepanmode();   
}
function svgzoomed() {    
    if (panmode == 1 && drawmode == 0 && bdrag != true && bdraw != true) {      
        let svgtx = Math.round(d3.event.transform.x), svgty = Math.round(d3.event.transform.y), svgtk = Math.round(d3.event.transform.k);      
        let npt = [svgtx, svgty];
        let drawsvgnode = asvg.node(), drawsvgw = drawsvgnode.clientWidth, drawsvgh = drawsvgnode.clientHeight;
        shapesrect.attr('width', drawsvgw).attr('height', drawsvgh).attr('x', -svgtx).attr('y', -svgty);
        shapesg.attr('transform', 'translate(' + npt + ') scale(' + svgtk + ')');
    } else { panmode = 0; resetdrawsvg32(); }
}
function togglepanmode() {
    let panclass = panmode == 0 ? "btn btn-xs" : "btn btn-xs btn-draw";
    $('#panmode').attr('class', panclass);
}
function resetdrawsvg32() {
    let svgtx = Math.round(d3.zoomIdentity.x), svgty = Math.round(d3.zoomIdentity.y), svgtk = Math.round(d3.zoomIdentity.k);
    let npt = [svgtx, svgty];   
    shapesg.attr('transform', 'translate(' + npt + ') scale(' + svgtk + ')');   
    shapesrect.attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight);  
    asvg.call(d3.zoom().transform, d3.zoomIdentity);
}
function zoomClick(ztype) {
    //svgrestore();
    zscale = roundToOne(zscale);   
    var scaleto = ztype == 0 ? roundToOne(zscale - 0.1) : roundToOne(zscale + 0.1);
    if (scaleto <= 0.1) { scaleto = 0.1; }
    zscale = roundToOne(scaleto);
    zoomdrawsvg32();}
function zoomdrawsvg32() {
    zoomdrawshapes('shape');
    zoomarealabels('shape');
    removeshapetools();
    $('#txtzoom').html((Math.round(roundToOne(zscale) * 100)) + "%");
}
function zoomdrawshapes(mode) {
    editmode = 0;
    let areaindex = getareaindex();
    let partlist = getpartlist(areaindex);   
    if (partlist != null && partlist.length > 0) {
        for (let i = 0; i < partlist.length; i++) {
            if (partlist[i].IsActive == 1 && partlist[i].Shape != null && partlist[i].Shape != 'null') {
                zoomdrawshape(i, partlist[i].SrNo, partlist[i].AreaID, mode);
            }
        }
    }
}
function zoomdrawshape(index, partsrno, areaid, mode) {
    setdrawshape31(index, partsrno, areaid, mode, 'zoomdrawshape');
    if (shape == undefined) { return;}
    shape.tscale = zscale;  
    transformshape(); 
    ActionUpdateShapesZoom('zoomdrawshape');
}
function zoomarealabels(mode) {
    for (let j = 0; j < arealabels.length; j++) {
        zoomarealabel32(j);
    }
    ActionUpdateAreaLabels('zoomarealabels');
}
function zoomarealabel32(index) {
    let arealabel = arealabels[index];
    if (arealabel.isactive == 1) {
        arealabel.tscale = zscale;
        transformarealabel32(index, arealabel.areaindex,arealabel.type);        
    }   
}
function resetsvgbounds(mode) {   
    if (mode == 'shape' && !shapesg.empty() && shapeg != undefined) {
        let sgscale = getshapesgscale();
        if (sgscale < zscale) { zscale = sgscale; }        
        $('#txtzoom').html((Math.round(roundToOne(zscale) * 100)) + "%");       
    }
    if (mode == 'print' && !prshapesg.empty()) {
        let gnode = prshapesg.node().getBBox(), w = gnode.width, h = gnode.height, sx = gnode.x + w / 2, sy = gnode.y + h / 2;
        if (h > prheight) { prsvg.style("height", (h / 2) + prheight); }
        if (w != 0 && h != 0) {
            let prsvgnode = prsvg.node(), prsvgw = prsvgnode.clientWidth, prsvgh = prsvgnode.clientHeight;
            let scale = (0.9) / Math.max(w / prsvgw, h / prsvgh);
            let translate = [prsvgw / 2 - scale * sx, prsvgh / 2 - scale * sy];
            prshapesg.attr('transform', 'translate(' + translate + ') scale(' + scale + ')');
            //prshapesg.transition().duration(600).attr('transform', 'translate(' + translate + ') scale(' + scale + ')');
        }
    }
}

function getshapesgscale() {
    let sgscale = 0;
    let shapesgnode = shapesg.node().getBBox(), sgw = Math.round(shapesgnode.width), sgh = Math.round(shapesgnode.height);
    if (sgw != 0 && sgh != 0) {
        let drawsvgnode = asvg.node(), drawsvgw = Math.round(drawsvgnode.clientWidth), drawsvgh = Math.round(drawsvgnode.clientHeight);
        sgscale = roundToPlaces(Math.min(drawsvgw / sgw, drawsvgh / sgh) * zscale, 2);
     //   console.log(sgscale, drawsvgw, drawsvgh, sgw, sgh);
    }
    return sgscale;
}
function resetsvgheight() {
    let shapesgnode = shapesg.node().getBBox(), sgw = Math.round(shapesgnode.width), sgh = Math.round(shapesgnode.height);
    let drawsvgnode = asvg.node(), drawsvgw = Math.round(drawsvgnode.clientWidth), drawsvgh = Math.round(drawsvgnode.clientHeight);
    let shapegnode = shapeouterg.node().getBBox(), shapegh = shapegnode.height;
    // if (shapegh > drawsvgh) { asvg.style("height", shapegh); }
   // console.log(shapegh, sgh, drawsvgh, drawheight);
}
function isshapeinbounds(sgscale) {
    let isinbox = true;
  //  resetsvgheight();
    let nsgscale = getshapesgscale();
    nsgscale += (zscale - sgscale);
    if (nsgscale < zscale) { isinbox = false; }
   // console.log(nsgscale, sgscale, zscale, isinbox);
    return isinbox;
}
function setshapecentercords32(source) {    
    let gnode = shapeg.node();
    let sx = gnode.getBBox().x + gnode.getBBox().width / 2; sy = gnode.getBBox().y + gnode.getBBox().height / 2;
    shape.rtx = Math.round(sx), shape.rty = Math.round(sy);
}
function printzoomed() {
    prshapesg.attr("transform", d3.event.transform);
}
function initauditarea(areas, auditindex, revno) {
    let areaindex = getareaindex();
    let currareas = getversionareas();
    setversionareas(areas);
    for (let index = 0; index < areas.length; index++) {
        apdefssvg = d3.select("#areadefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.areadefssvg').append("svg").attr("id", "areadefssvg"); }
        setareamarkerdefs(apdefssvg);
        let area = areas[index]; setareaindex(index);
        prsvg = d3.select("#areaauditdsvg" + index + auditindex + revno);
        if (prsvg.empty()) { prsvg = d3.select('.areaauditdsvg' + index + auditindex + revno).append("svg").attr("id", "areadsvg" + index + auditindex + revno); }
        prsvg.attr("width", prwidth).attr("height", prheight);
        prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
        arealabelsg = prshapesg.select("#arealabelsg"); if (arealabelsg.empty()) { arealabelsg = prshapesg.append("g").attr("id", "arealabelsg"); }
        drawpartshapes(index, 'print', 'initauditarea'); resetsvgbounds('print');     
    }
    setareaindex(areaindex);
    setversionareas(currareas);
}