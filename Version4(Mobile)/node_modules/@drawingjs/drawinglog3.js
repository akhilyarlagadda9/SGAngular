var DrawinglogService = function () {
    this._logareas = [];
    this._logarea = {};
    this._logareaindex = -1;
    this.initdrawinglog = function () {
        this._logareas = [];
        this._logarea = {};
        this._logareaindex = -1;
    }
    this.initlogarea= function(areaId){
        this._logarea.areaId = areaId;
        this._logarea.drawlog = [];
        this._logarea.position = 0;
        this._logareaindex = this._logareas.length;
    }
    this._setarealog = function (areaId) {       
        if (this._logareas.length > 0) {
            if (this._logareaindex > -1) {//previous area 
                this._logareas[this._logareaindex] = angular.copy(this._logarea);
                this._logarea = {};
                this._logareaindex = -1;
            }
            for (let i = 0; i < this._logareas.length; i++) {              
                if (this._logareas[i].areaId == areaId) {                   
                    this._logarea = angular.copy(this._logareas[i]);                    
                    this._logareaindex = i;
                    break;
                }
            }
        }        
        if (this._logareaindex == -1) {
            this.initlogarea(areaId);
            this._logareas.push(this._logarea);
        }    
    }
    this._addtoarealog = function (logitem) {
        if (this._logarea.position < this._logarea.drawlog.length) {
            this._logarea.drawlog.pop();
        }
        this._logarea.drawlog.push(logitem);
        this._logarea.position += 1;       
    };   
    this._setlogitem = function (index, previtem, curritem, type, evttype) {
        let logitem = {
            index: index,
            previous: angular.copy(previtem),
            current: angular.copy(curritem),
            type: type,
            evttype: evttype
        };
        this._addtoarealog(logitem);
    }
    this.add = function (item, text, evttype) {
        this._setlogitem(item.index, null, item, 'add', evttype);
    };
    this.remove = function (item, text, evttype) {
        this._setlogitem(item.index, item, null, 'remove', evttype);
    };
    this.beforeupdate = function (item, text, evttype) {
        //1.evttype-drawshape -1, corners-2, editside- 3, sidesplashs - 4, sideshapes-5, cutouts-6,sideseams-7, angles-8;
        if (item != undefined) {
            this._setlogitem(item.index, item, null, 'update', evttype);
        }
    };
    this.update = function (item, text, evttype) {       
        let logitemindex = -1;
        for (let i = this._logarea.drawlog.length - 1; i >= 0; i--) {
            if (this._logarea.drawlog[i].index == item.index && this._logarea.drawlog[i].type=='update') {               
                this._logarea.drawlog[i].current = angular.copy(item);
                logitemindex = i;
                break;
            }
        }      
        if (logitemindex == -1) { this._setlogitem(item.index, null, item, 'update', evttype); }
        //let logitemindex = this._logarea.drawlog.length - 1;        
        //if (this._logarea.drawlog[logitemindex].index == item.index) {
        //    this._logarea.drawlog[logitemindex].current = angular.copy(item);
        //} else { this._setlogitem(item.index, null, item, text, 'update'); }
        //console.log(logitemindex, this._logarea.drawlog.length);
        //console.log(JSON.stringify(this._logarea.drawlog[logitemindex].current));
    };   
    this.undodraw = function () {       
        if (this._logarea.position > 0) {
            this._logarea.position -= 1;            
            let logitem = this._logarea.drawlog[this._logarea.position];
            //this._undolog.pop();            
            switch (logitem.type) {
                case "add": // added, delete by index
                    onundodeleteshape(logitem.index);                  
                    break;
                case "remove": // removed, add by index
                    onundodrawshape(logitem.index);                   
                    break;
                case "update": // updated  
                    if (logitem.previous != null) {
                      //  console.log(JSON.stringify(logitem.previous.sides[0].corners));
                        onundoudpateshape(logitem.previous, logitem.evttype);
                    }
                    break;
            }
        }
    };
    this.redodraw = function () {
        if (this._logarea.position < this._logarea.drawlog.length) {
            let logitem = this._logarea.drawlog[this._logarea.position];
            this._logarea.position += 1;
            switch (logitem.type) {
                case "add": // added, need to re-add
                    onredodrawshape(logitem.index);                  
                    break;
                case "remove":// removed, need to remove again
                    onredodrawshape(logitem.index);                    
                    break;
                case "update":// updated, use the new version
                   // console.log(JSON.stringify(logitem.current.sides[0].corners));
                    if (logitem.current != null) { onredoudpateshape(logitem.current, logitem.evttype);}
                    break;
            }
        }
    };   
    Object.defineProperties(this, {
        undologlength: {
            get: function () {
                return this._logarea.drawlog.length;
            }
        }       
    });
};
