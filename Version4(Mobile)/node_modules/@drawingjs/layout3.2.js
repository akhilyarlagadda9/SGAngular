function initmatslabgroups(matid) {
    // zoom = d3.zoom().on("zoom", zoomed);   
    msvg = d3.select("#msvg"); if (msvg.empty()) { msvg = d3.select('.msvg').append("svg").attr("id", "msvg").attr("matid", matid).on("mousedown", msvgclick); }
    msvg.selectAll('*').remove();
    msvg.attr("width", lwidth).attr("height", lheight).style("display", "block").on("contextmenu", svgcontextmenu).attr("preserveAspectRatio", "xMinYMin meet");
    mslabpartsg = msvg.select("#mslabpartsg"); if (mslabpartsg.empty()) { mslabpartsg = msvg.append("g").attr("id", "mslabpartsg"); }
    slabpartsgrect = mslabpartsg.select("#slabpartsgrect"); if (slabpartsgrect.empty()) { slabpartsgrect = mslabpartsg.append("rect").attr("id", "slabpartsgrect"); }   
    mslabsg = mslabpartsg.select("#mslabsg"); if (mslabsg.empty()) { mslabsg = mslabpartsg.append("g").attr("id", "mslabsg"); }
    slabpartsg = mslabpartsg.select("#slabpartsg"); if (slabpartsg.empty()) { slabpartsg = mslabpartsg.append("g").attr("id", "slabpartsg"); }
    slabsplashsg = mslabpartsg.select("#slabsplashsg"); if (slabsplashsg.empty()) { slabsplashsg = mslabpartsg.append("g").attr("id", "slabsplashsg"); }   
    maskdefs = defssvg.select("#maskdefs");if (maskdefs.empty()) { maskdefs = defssvg.append("defs").attr("id", "maskdefs"); }
}
function msvgclick() {
    if (d3.event.srcElement.tagName == 'svg') { removeshapetools(); }
}
//SVG Zoom
function LayoutZoomClick(ztype) {
    lzscale = roundToOne(lzscale);
    let scaleto = ztype == 0 ? roundToOne(lzscale - 0.1) : roundToOne(lzscale + 0.1);
    if (scaleto <= 0.1) { scaleto = 0.1; }
    lzscale = roundToOne(scaleto);
    lzoomsvg();
    //removeshapetools();
}
function lzoomsvg() {   
    let slabpartsgnode = mslabpartsg.node().getBBox(), sgw = slabpartsgnode.width, sgh = slabpartsgnode.height, sgx = slabpartsgnode.x, sgy = slabpartsgnode.y ;
    if (sgw != 0 && sgh != 0) {
        let msvgnode = msvg.node(), msvgw = msvgnode.clientWidth, msvgh = msvgnode.clientHeight;      
        //lzscalex = Math.round((msvgw - lzscale * sgx) / 2), lzscaley = Math.round((msvgh - lzscale * sgy) / 2);
        //lzscalex = sgx, lzscaley = sgy;
        lzscalex = 0, lzscaley = 0;
        mslabpartsg.attr('transform', 'translate(' + [lzscalex, lzscaley] + ') scale(' + lzscale + ')');
        $('#txtlayoutzoom').html((Math.round(roundToOne(lzscale) * 100)) + "%");
    }
}
function checklayoutsvgbounds1(index, ndx, ndy) {
    if (shape.angle != 0) { return;}
    let retransform = false
    let stx = shape.tx, sty = shape.ty;

    let msvgnode = msvg.node().getBBox();
    let msvgw = msvg.node().clientWidth, msvgh = msvg.node().clientHeight
    let msvgx = msvgnode.x, msvgy = msvgnode.y, msvgw1 = msvgnode.width, msvgh1 = msvgnode.height;

    let slabpartsgnode = mslabpartsg.node().getBBox();
    let sgx = slabpartsgnode.x, sgy = slabpartsgnode.y, sgw = slabpartsgnode.width, sgh = slabpartsgnode.height;

    let shapegnode = shapeouterg.node().getBBox();
    let spx = shapegnode.x, spy = shapegnode.y, spw = shapegnode.width, sph = shapegnode.height;
    if ((msvgx) < 0) {
        shape.tx = stx - msvgx;        
        retransform =true;
    }
    //else if (sgw > (msvgw + spw)) {
    //    shape.tx = stx -5;
    //    retransform = true;
    //} 
    if ((msvgy) < 0) {
        shape.ty = ndy - sgy;
        retransform = true;
    }
    //if (sgw > (msvgw + spw)) {
    // //   shape.tx = stx;
    //    retransform = true;
    //}     
    if (retransform) { transformshape(); }

    slabpartsgnode = mslabpartsg.node().getBBox();
    sgx = slabpartsgnode.x, sgy = slabpartsgnode.y, sgw = slabpartsgnode.width, sgh = slabpartsgnode.height;
    msvgnode = msvg.node(), msvgw = msvgnode.clientWidth, msvgh = msvgnode.clientHeight;
    lzscale = roundToOne(1 / Math.max(sgw / msvgw, sgh / msvgh));
    mslabpartsg.attr('transform', 'translate(' + [sgx, sgy] + ') scale(' + lzscale + ')');
    $('#txtlayoutzoom').html((Math.round(roundToOne(lzscale) * 100)) + "%");
}
function checklayoutsvgbounds(ndx, ndy) {  
    let isinbox = false;
    let slabpartsgnode = mslabpartsg.node().getBBox(), sgw = slabpartsgnode.width, sgh = slabpartsgnode.height, sgx = slabpartsgnode.x, sgy = slabpartsgnode.y;
    let shapegnode = shapeouterg.node();
    //let sx = shapegnode.getBBox().x + shapegnode.getBBox().width / 2; sy = shapegnode.getBBox().y + shapegnode.getBBox().height / 2;
    console.log(shapegnode.getBBox().x, shapegnode.getBBox().width / 2, shapegnode.getBBox().y, shapegnode.getBBox().height / 2);
    if (sgw != 0 && sgh != 0) {
        let msvgnode = msvg.node(), msvgw = msvgnode.clientWidth, msvgh = msvgnode.clientHeight;
        let nlzscale = roundToOne(1 / Math.max(sgw / msvgw, sgh / msvgh));
         console.log(nlzscale, sgx, sgy, sgw, sgh);
        if (nlzscale > 0.2) {
            if (sgx >= 0 && sgy >= 0) { 
                lzscalex = sgx, lzscaley = sgy, lzscale = nlzscale;
                mslabpartsg.attr('transform', 'translate(' +[lzscalex, lzscaley]+ ') scale(' +lzscale + ')');
                $('#txtlayoutzoom').html((Math.round(roundToOne(lzscale) * 100)) + "%");
                isinbox = true;
            } else {
                isinbox = true;
            } 
        } else if (nlzscale > 0.2) {
                isinbox = true;
        }
      //  console.log(nlzscale, lzscale, lzscalex, lzscaley, sgw, sgh, sgx, sgy, ndx, ndy);
        //if (nlzscale != lzscale) {
        //    isinbox = false;
        //}
    }
    return isinbox;
}
function onsetlayoutmode(mode) {
    layoutmode = mode;
    togglelayoutmode();
    setslabshapepathimages();
}
function setslabshapepathimages() {   
    if (layoutmode == 1) {
        //1.remove slab images to slabs; 
        drawslabshapes(materialid);
        //2.remove shape images and set opacity
        removeshapesclipimages();
        //3.set shapes opacity
        setshapesopacity(0.2);
        //4.set slabpart shapes opacity
        setslabpartsopacity(0.2);
    } else if (layoutmode == 2) {
        //1.set slab images
        drawslabshapes(materialid);       
        //2.set slabpart clip images to shapes
        setslabpartsclipimages(materialid);
    }
}
function togglelayoutmode() {    
    let layoutclass = layoutmode == 2 ? "fa fa-toggle-on active1" : "fa fa-toggle-on fa-rotate-180 inactive1";   
    $('#layoutmode').attr('class', layoutclass);
}