function QBRinitdrawing(type) {
    shapes = [], areas = [], slabparts = [], slabsplashs = [];
    areas = _qscope.quote.Version.AreaList;
    if (type == 'draw') {
        //let tmpslabparts = _qscope.quote.header.Version.SlabParts;
        //let tmpslabsplashs = _qscope.quote.header.Version.SlabSplashes;
        //let tmpmaterials = _qscope.quote.header.Version.MaterialList;
        //initscopeslabparts(tmpslabparts);
        //initscopeslabsplashs(tmpslabsplashs);
        //initMaterials(tmpmaterials);        
        //resetslabparts();
        //resetslabsplashs();
        initdrawingcontrols(type);
    }
    //initdrawingareas();    
}
function QBRinitdrawarea(index, type) {
    if (type == 'quote') { initquotearea(index); }
    else if (type == 'draw') { initdrawarea(index); }
    else if (type == 'print') { initprintarea(index); }
}
function QBRinitprintdrawing(type, printareas) {
    shapes = [], areas = [], slabparts = [], slabsplashs = [];
    areas = printareas;
    initdrawingareas();
}
function QBRinitprintdrawareas(source) {
    if (areas.length > 0) {
        initprintdrawingcontrols();
        for (let i = 0; i < areas.length; i++) {
            area = areas[i];
            initprintarea(area.index);
        }
    }
}
function QBRinitAreadrawing(type) {
    shapes = [], areas = [], slabparts = [], slabsplashs = [];
    areas = _qscope.quote.Version.AreaList;
    if (type == 'draw') {
        //let tmpslabparts = _qscope.quote.header.Version.SlabParts;
        //let tmpslabsplashs = _qscope.quote.header.Version.SlabSplashes;
        //let tmpmaterials = _qscope.quote.header.Version.MaterialList;
        //initscopeslabparts(tmpslabparts);
        //initscopeslabsplashs(tmpslabsplashs);
        //initMaterials(tmpmaterials);        
        //resetslabparts();
        //resetslabsplashs();
        initdrawingcontrols(type);
    }
    //initdrawingareas();    
}
function QBRinitdrawingareapartshape(partid, tmparea) {
    let partshapecount = 0;
    let areaPart = getareapartbypartid(partid, tmparea.PartList);
    if (areaPart != undefined && areaPart.Shape != null && areaPart.Shape.length > 0 && areaPart.IsActive == 1) {
        let partmaterialid = 0;
        if (areaPart.PartMaterialList != null && areaPart.PartMaterialList.length > 0) {
            partmaterialid = areaPart.PartMaterialList[0].MaterialID;
        }
        let areapartshapes = areaPartShapes(areaPart);
        for (let i = 0; i < areapartshapes.length; i++) {
            let partshape = areapartshapes[i];
            if (partshape.sides != null && partshape.sides.length > 0 && partshape.isactive == 1) {
                let oldindex = partshape.index;
                initAreaPartShape(partshape, areaPart.ID, areaPart.Name, areaPart.SrNo, partmaterialid, tmparea.ID)
                resetshapesides(partshape);
                shapes.push(partshape);
                //resetslabpart(oldindex, partshape.index, partmaterialid, areaPart.SrNo, areaPart.ID);
                //resetslabsplash(oldindex, partshape.index, partmaterialid, areaPart.SrNo, areaPart.ID);
                partshapecount += 1;
            }
        }
    }
    return partshapecount;
}
function getareapartbypartid(partid, parts) {
    for (let i = 0; i < parts.length; i++) {
        if (parts[i].ID == partid) {
            return parts[i];
        }
    }
}

function initscopeslabparts(tmpslabparts) {
    if (tmpslabparts != null && tmpslabparts != 'null') {
        if (typeof (tmpslabparts) == 'string') {
            if (tmpslabparts.length > 0) {
                tmpslabparts = JSON.parse(tmpslabparts);
                for (let i = 0; i < tmpslabparts.length; i++) {
                    if (tmpslabparts[i].isactive == 1) {
                        let tmpslabpart = tmpslabparts[i];
                        // console.log(JSON.stringify(tmpslabpart));
                        tmpslabpart.index = slabparts.length;
                        slabparts.push(tmpslabpart);
                    }
                }
            }
        }
    }
    if (slabparts == null || slabparts == undefined) { slabparts = []; }
}
function initscopeslabsplashs(tmpslabsplashs) {
    if (tmpslabsplashs != null && tmpslabsplashs != 'null') {
        if (typeof (tmpslabsplashs) == 'string') {
            tmpslabsplashs = JSON.parse(tmpslabsplashs);
            if (tmpslabsplashs.length > 0) {
                for (var i = 0; i < tmpslabsplashs.length; i++) {
                    if (tmpslabsplashs[i].isactive == 1) {
                        var tmpslabsplashpart = tmpslabsplashs[i];
                        resetslabsplashseams(tmpslabsplashpart);
                        slabsplashs.push(tmpslabsplashpart);
                        //slabsplashshape(i);
                    }
                }
            }
        }
    }
    if (slabsplashs == null || slabsplashs == undefined) { slabsplashs = []; }
}
function initdrawingareas() {
    if (areas.length > 0) {
        for (let i = 0; i < areas.length; i++) {
            let tmparea = areas[i];
            if (tmparea != null) {
                initdrawingarea(i, tmparea);
            }
        }
    }
}
function initdrawingarea(index, tmparea) {
    tmparea.index = index;
    tmparea.ischg = 1;
    tmparea.shapecount = 0;
    if (tmparea.PartList != null && tmparea.PartList.length > 0) {
        var areashapecount = 0;
        for (let i = 0; i < tmparea.PartList.length; i++) {
            areashapecount += initdrawingareashapes(i, tmparea);
            if (i == 0) { _qscope.selectedPartSrNo = tmparea.PartList[i].SrNo; }
        }
        tmparea.shapecount = areashapecount;
    }
}
function initdrawingarea(index, tmparea) {
    tmparea.index = index;
    tmparea.ischg = 1;
    tmparea.shapecount = 0;
    if (tmparea.PartList != null && tmparea.PartList.length > 0) {
        var areashapecount = 0;
        for (let i = 0; i < tmparea.PartList.length; i++) {
            areashapecount += initdrawingareashapes(i, tmparea);
            if (i == 0) { _qscope.selectedPartSrNo = tmparea.PartList[i].SrNo; }
        }
        tmparea.shapecount = areashapecount;
    }
}
function initdrawingareashapes(index, tmparea) {
    let partshapecount = 0;
    let areaPart = tmparea.PartList[index];
    if (areaPart.Shape != null && areaPart.Shape.length > 0 && areaPart.IsActive == 1) {
        let partmaterialid = 0;
        if (areaPart.PartMaterialList != null && areaPart.PartMaterialList.length > 0) {
            partmaterialid = areaPart.PartMaterialList[0].MaterialID;
        }
        let areapartshapes = areaPartShapes(areaPart);
        for (let i = 0; i < areapartshapes.length; i++) {
            let partshape = areapartshapes[i];
            if (partshape.sides != null && partshape.sides.length > 0 && partshape.isactive == 1) {
                let oldindex = partshape.index;
                initAreaPartShape(partshape, areaPart.ID, areaPart.Name, areaPart.SrNo, partmaterialid, tmparea.ID)
                resetshapesides(partshape);
                shapes.push(partshape);
                //  console.log(JSON.stringify(partshape));
                resetslabpart(oldindex, partshape.index, partmaterialid, areaPart.SrNo, areaPart.ID);
                resetslabsplash(oldindex, partshape.index, partmaterialid, areaPart.SrNo, areaPart.ID);
                partshapecount += 1;
            }
        }
    }
    return partshapecount;
}

function areaPartShapes(areaPart) {
    let tmppartshapes = [];
    if (typeof (areaPart.Shape) == 'string') {
        tmppartshapes = JSON.parse(areaPart.Shape);
    } else if (typeof (areaPart.Shape) == 'object') {
        tmppartshapes = areaPart.Shape;
    }
    return tmppartshapes;
}
function initAreaPartShape(partshape, partid, partname, partsrno, partmaterialid, areaid) {
    // console.log(partid, partname, partsrno, partmaterialid, areaid, partshape.areaid);
    partshape.areaid = areaid;
    partshape.partid = partid;
    partshape.partname = partname != null ? partname : "";
    partshape.partsrno = partsrno;
    partshape.materialid = partmaterialid;
    partshape.index = shapes.length;
    partshape.spindex = partshape.index;
}
function resetshapesides(partshape) {
    for (let i = 0; i < partshape.sides.length; i++) {
        let partshapeside = partshape.sides[i];
        partshapeside.spsideindex = i;
        resetshapesidecutouts(partshapeside);
        resetshapesideseams(partshapeside);
    }
}
function resetshapesidecutouts(partshapeside) {
    //console.log(JSON.stringify(partshapeside));
    if (partshapeside.cutouts != undefined) {
        let tmpsidecutouts = [];
        for (let i = 0; i < partshapeside.cutouts.length; i++) {
            let tmpsidecutout = partshapeside.cutouts[i];
            //if (tmpsidecutout.Isactive == 1) {
            tmpsidecutout.index = tmpsidecutouts.length;
            tmpsidecutout.shapeindex = partshapeside.sindex;
            tmpsidecutout.spsideindex = partshapeside.index;
            tmpsidecutout.spcutoutindex = tmpsidecutout.index;
            tmpsidecutouts.push(tmpsidecutout);
            //console.log(JSON.stringify(tmpsidecutout));
            //}
        }
        partshapeside.cutouts = tmpsidecutouts;
    }
}
function resetshapesideseams(partshapeside) {
    if (partshapeside.seams != undefined) {
        let tmpsideseams = [];
        // console.log(partshapeside.seams.length);
        for (let i = 0; i < partshapeside.seams.length; i++) {
            let tmpsideseam = partshapeside.seams[i];
            if (tmpsideseam.isactive == 1) {
                tmpsideseam.index = tmpsideseams.length;
                tmpsideseam.spsideindex = partshapeside.index;
                tmpsideseam.spseamindex = tmpsideseam.index;
                tmpsideseams.push(tmpsideseam);
            }
        }
        partshapeside.seams = tmpsideseams;
    }
}

//////................materials, slabs, slabparts, slabsplashs.................................//////
function initMaterials(tmpmaterials) {
    slabs = [];
    if (tmpmaterials != undefined) {
        for (let i = 0; i < tmpmaterials.length; i++) {
            let material = tmpmaterials[i]; slaby = 10;
            if (material.SlabList != null) {
                initmatslabs(material);
            }
        }
        //initMaterial(_qscope.selectedMatId, _qscope.selmatIndex);
    }
}
function resetslabparts() {
    if (slabparts.length > 0) {
        let tmpslabparts = JSON.parse(JSON.stringify(slabparts));
        slabparts = [];
        for (let i = 0; i < tmpslabparts.length; i++) {
            if (tmpslabparts[i].isactive == 1) {
                //console.log(tmpslabparts[i].spindex, tmpslabparts[i].slabid, tmpslabparts[i].materialid)
                slabparts.push(tmpslabparts[i]);
            }
        }
    }
}
function resetslabpart(index, newindex, partmaterialid, partsrno, partid) {
    // console.log(index, newindex, partmaterialid, partsrno, partid);
    for (let i = 0; i < slabparts.length; i++) {
        if (slabparts[i].spindex == index) {
            slabparts[i].spindex = newindex;
            slabparts[i].materialid = partmaterialid;
            slabparts[i].partsrno = partsrno;
            slabparts[i].partid = partid;
            if (partmaterialid == 0) { slabparts[i].isactive = 0; }
        }
    }
}
//check this function use
function resetslabpartseams(index, newindex, spindex) {
    for (let i = 0; i < slabparts.length; i++) {
        if (slabparts[i].spindex == index) {

        }
    }
}
function resetslabsplashs() {
    if (slabsplashs.length > 0) {
        let tmpslabsplashs = JSON.parse(JSON.stringify(slabsplashs));
        slabsplashs = [];
        for (let i = 0; i < tmpslabsplashs.length; i++) {
            if (tmpslabsplashs[i].isactive == 1) {
                slabsplashs.push(tmpslabsplashs[i]);
            }
        }
    }
}
function resetslabsplash(index, newindex, partmaterialid, partsrno, partid) {
    for (let i = 0; i < slabsplashs.length; i++) {
        if (slabsplashs[i].spindex == index) {
            slabsplashs[i].spindex = newindex;
            slabsplashs[i].materialid = partmaterialid;
            slabsplashs[i].partsrno = partsrno;
            slabsplashs[i].partid = partid;
            if (partmaterialid == 0) { slabsplashs[i].isactive = 0; }
        }
    }
}
function resetslabsplashseams(tmpslabsplashpart) {
    var tmpsplashseams = [];
    for (var i = 0; i < tmpslabsplashpart.seams.length; i++) {
        if (tmpslabsplashpart.seams[i].isactive == 1) {
            tmpsplashseams.push(tmpslabsplashpart.seams[i]);
        }
    }
    tmpslabsplashpart.seams = tmpsplashseams;
}
function setpartshapesmaterial(materialid, partid) {
    for (let i = 0; i < shapes.length; i++) {
        //console.log(shapes[i].partid, materialid, partid);
        if (shapes[i].partid == partid) {
            // console.log(shapes[i].partid, materialid, partid);
            shapes[i].materialid = materialid;
        }
    }
}
function removematshapes(materialid) {
    for (let i = 0; i < shapes.length; i++) {
        if (shapes[i].materialid == materialid) {
            shapes[i].materialid = 0;
        }
    }
}
function removematslabs(materialid) {
    for (let i = 0; i < slabs.length; i++) {
        if (slabs[i].materialid == materialid) {
            slabs[i].materialid = 0;
            slabs[i].isactive = 0;
        }
    }
}
function removematslabparts(materialid) {
    for (let i = 0; i < slabparts.length; i++) {
        if (slabparts[i].materialid == materialid) {
            slabparts[i].materialid = 0;
            slabparts[i].isactive = 0;
        }
    }
}
function removepartslabparts(partid) {
    for (let i = 0; i < slabparts.length; i++) {
        if (slabparts[i].partid == partid) {
            slabparts[i].materialid = 0;
            slabparts[i].isactive = 0;
        }
    }
}
function removematslabsplashs(materialid) {
    for (let i = 0; i < slabsplashs.length; i++) {
        if (slabsplashs[i].materialid == materialid) {
            slabsplashs[i].materialid = 0;
            slabsplashs[i].isactive = 0;
        }
    }
}
function removepartslabsplashs(partid) {
    for (let i = 0; i < slabsplashs.length; i++) {
        if (slabsplashs[i].partid == partid) {
            slabsplashs[i].materialid = 0;
            slabsplashs[i].isactive = 0;
        }
    }
}


//User Action functions - Drawing
function ActionDrawSideHide() {
    setTimeout(function () {
        _qscope.$apply(function () {
            _qscope.ActionDrawSidePush(2);
        });
    });
}
function ActionSelectShape() {
    if (_qscope.selctedshapeIndex != shape.index) {
        let shapeindex = shape.index;
        setTimeout(function () {
            _qscope.$apply(function () {
                _qscope.selctedshapeIndex = shapeindex;
            });
        });
    }
}
function ActionAddCopyPart() {
    return onaddareapart3(area.ID, _qscope.quote.header.Version);
}
function ActionCopyShapesToPart(partid, partsrno) {
    let shapeindex = shape.index, shapesides = shape.sides; chgflag = 1;
    CopyShapesToPart(shapeindex, shapesides, partid, partsrno);
}

/*Add*/
function ActionAddShape() {
    let shapeindex = shape.index, shapesides = shape.sides; chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            //onaddshapetoareapart(shapeindex, shapesides);
            onaddshapetopart3(shapeindex, shapesides);
            drawshapesidestext();
        });
    });
}
function ActionAddSplash() {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            onaddsplashtopart();
        });
    });
}
function ActionAddEdge() {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            if (shape.mode != 'print') { onaddedgetopart(); }
        });
    });
}
function ActionAddCorner() {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            onaddcornertopart();
        });
    });
}
function ActionAddCutout(cutout) {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            onaddcutouttopart(cutout);
        });
    });
}
function ActionShapeDrag() {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            setpartshapes1();
        });
    });
}
function ActionShapeReSize() {
    chgflag = 1;
    calcommonFun();
}
function ActionAddSplashSide() {
    chgflag = 1;
    calcommonFun();
}
function ActionShapeReSize1() {
    chgflag = 1;
    calcommonFun1();
}
/*Update*/
function ActionUpdateShape() {
    setTimeout(function () {
        _qscope.$apply(function () {
            setpartshapes1();
        });
    });
}
function ActionUpdateCutout(cutout) {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            updatecutout(cutout);
        });
    });
}
function ActionUpdateCorner() {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            onaddcornertopart();
        });
    });
}
function ActionUpdateSideShape() {
    chgflag = 1;
    calcommonFun();
}
function ActionChangeAngle() {
    chgflag = 1;
    calcommonFun();
}
/*Remove*/
function ActionRemovePartCutout(index, shapeindex, sindex) {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            onremovecutouttopart(index, shapeindex, sindex);
        });
    });
}
function ActionRemoveShapePart(index) {
    chgflag = 1;
    setTimeout(function () {
        _qscope.$apply(function () {
            //onremoveshapetopart(index);
            onremoveshapetopart3(index, shapes[index].partsrno);
        });
    });
}

//User Actions - Layout
function ActionSetShapeMaterial(materialid, partid) {
    chgflag = 1;
    //1. set slabmaterial to shape
    shape.materialid = materialid;
    //2. set materialid to part shapes  
    setpartshapesmaterial(materialid, partid)
    //3. set slab measurements to part
}
function ActionSlabpartMove() {
    //1. Existing part - remove slab measurement 
    //2. New part - allocate slab measurement
}
function ActionUpdateSlabParts() {
    chgflag = 1;
    if (_qscope.Audit != true) {
        _qscope.quote.header.Version.Slabs = JSON.stringify(slabs);
        _qscope.quote.header.Version.SlabParts = JSON.stringify(slabparts);
        _qscope.quote.header.Version.SlabSplashes = JSON.stringify(slabsplashs);
    }
}
function ActionUpdateSlabPartSplash() {
    if (_qscope.Audit != true) {
        _qscope.quote.header.Version.SlabSplashes = JSON.stringify(slabsplashs);
    }
}
function ActionRemoveSlabPart() {
    ActionUpdateSlabParts();
    chgflag = 1;
}
//User Action functions - Non Drawing
function QBRActionRemoveMaterial(materialid) {
    if (shapes.length > 0) {
        //1. Shapes - Remove All material references
        removematshapes(materialid);
        //2. Slabs - Remove All slabs and material references
        removematslabs(materialid);
        //3. Slabparts - Remove all slabparts and material references
        removematslabparts(materialid);
        //4. Slabsplashs - Remove all slabsplshs and material references
        removematslabsplashs(materialid);
    }
}
function QBRActionUpdatePartMaterial(materialid, partid) {
    if (shapes.length > 0) {
        //1. Shapes - Update  All material references
        setpartshapesmaterial(materialid, partid);
        //3. Slabparts - Remove all slabparts and material references
        removepartslabparts(partid);
        //4. Slabsplashs - Remove all slabsplshs and material references
        removepartslabsplashs(partid);
    }
}
function QBRActionRemovePartShapes(index, areaId) {
    deleteshape(index);
    deleteshapeslabparts(index);
    chgflag = 1;
}

function QBRActionRemovePartShapes1(partid) {
    let partshapes = getpartshapes1(partid);
    for (let i = 0; i < partshapes.length; i++) {
        //shape
        deleteshape(i);
        //shapes[i].isactive = 0;
        //1. Shapes - Remove All material references
        removematshapes(partshapes[i].materialid);
        //2. Slabs - Remove All slabs and material references
        removematslabs(partshapes[i].materialid);
        //3. Slabparts - Remove all slabparts and material references
        removematslabparts(partshapes[i].materialid);
        //4. Slabsplashs - Remove all slabsplshs and material references
        removematslabsplashs(partshapes[i].materialid);
    }
    chgflag = 1;
}


function QBRActionRemovePartShapeReferencesByPartID(partid) {
    let partshapes = getremovepartshape(partid);
    for (let i = 0; i < partshapes.length; i++) {
        //1. Shapes - Remove All material references
        removematshapes(partshapes[i].materialid);
        //2. Slabs - Remove All slabs and material references
        removematslabs(partshapes[i].materialid);
        //3. Slabparts - Remove all slabparts and material references
        removematslabparts(partshapes[i].materialid);
        //4. Slabsplashs - Remove all slabsplshs and material references
        removematslabsplashs(partshapes[i].materialid);
    }
    chgflag = 1;
}
function getremovepartshape(partId) {
    let partshapes = [];
    for (let i = 0; i < shapes.length; i++) {
        if (shapes[i].partid == partId) {
            partshapes.push(shapes[i]);
        }
    }
    return partshapes;
}

function getpricebookcutoutbyid(itemid) {
    let pricebook = _qscope.pricebook;
    for (let i = 0; i < pricebook.cutoutlist.length; i++) {
        let pcutout = pricebook.cutoutlist[i];
        if (pcutout.ID == itemid) {
            return pcutout;
        }
    }
}



//multiple shapes from one part to separate part
function QBRinitdrawing1(type) {
    shapes = [], areas = [], slabparts = [], slabsplashs = [];
    areas = _qscope.quote.header.Version.AreaList; routine = 1;
    initdrawingareas1();
}
function initdrawingareas1() {
    if (areas.length > 0) {
        for (let i = 0; i < areas.length; i++) {
            let tmparea = areas[i];
            if (tmparea != null) {
                initdrawingarea1(i, tmparea);
            }
        }
    }
}
function initdrawingarea1(index, tmparea) {
    tmparea.index = index;
    tmparea.ischg = 1;
    tmparea.shapecount = 0;
    if (tmparea.PartList != null && tmparea.PartList.length > 0) {
        var areashapecount = 0; let pcount = tmparea.PartList.length;
        for (let i = 0; i < tmparea.PartList.length; i++) {
            if (pcount > i) {
                areashapecount += initdrawingareashapes1(i, tmparea);
                if (i == 0) { _qscope.selectedPartSrNo = tmparea.PartList[i].SrNo; }
            }
        }
        tmparea.shapecount = areashapecount;
    }
}
function initdrawingareashapes1(index, tmparea) {
    let partshapecount = 0;
    let areaPart = tmparea.PartList[index];
    if (areaPart.Shape != null && areaPart.Shape.length > 0 && areaPart.IsActive == 1) {
        let partmaterialid = 0;
        if (areaPart.PartMaterialList != null && areaPart.PartMaterialList.length > 0) {
            let pmindex = areaPart.PartMaterialList.length - 1;
            partmaterialid = areaPart.PartMaterialList[pmindex].MaterialID;
        }
        let areapartshapes = areaPartShapes(areaPart);
        for (let i = 0; i < areapartshapes.length; i++) {
            let partshape = areapartshapes[i];
            if (partshape.sides != null && partshape.sides.length > 0 && partshape.isactive == 1) {
                if (i == 0) {
                    let oldindex = partshape.index;
                    initAreaPartShape(partshape, areaPart.ID, areaPart.Name, areaPart.SrNo, partmaterialid, tmparea.ID);
                    resetshapesides(partshape);
                    shapes.push(partshape);
                }
                //multiple shapes
                if (areapartshapes.length > 1) {
                    resetareaparts1(i, areaPart, partshape, partmaterialid, tmparea.ID);
                }
                partshapecount += 1;
            }
        }
    }
    return partshapecount;
}
function resetareaparts1(i, areaPart, partshape, partmaterialid, areaId) {
    //reset first part qty
    if (i == 0) {
        let partshapes = getpartshapes(areaPart.ID, areaPart.SrNo, areaPart.AreaID);
        if (partshapes.length == 0) {
            console.log("source:onaddshapetopart3" + JSON.stringify(shapes));
        } else {
            areaPart.Shape = JSON.stringify(partshapes);
        }
        //s1:reset fabrication sizes
        resetareapartmeasurements(areaPart, partshape);
        //s2:reset finished edge
        let tempobj = { totalfinishedlf: 0 };
        setshapesidespart(partshape.sides, tempobj);
        //setdefaultfedge(areaPart, tempobj.totalfinishedlf, "Finished Edge");
        setdefaultfedge(areaPart, tempobj.totalfinishedlf, "Eased");
        //s3:reset part material qty
        if (partmaterialid > 0) { calcpartmaterialfinishedtotalsqft(areaPart, partmaterialid); }
    }
    else { //add new part
        shape = partshape; shape.partid = 0; shape.areaid = areaId; shape.partname = areaPart.Name != null ? areaPart.Name : ""; shape.materialid = partmaterialid;
        //s1:reset shape sides
        resetshapesides(shape);
        shape.id = partshape.index;
        shapes.push(shape);
        //s2:add part from shape
        onaddshapetopart31(shape.index, shape.sides); chgflag = 1;
        //s3:shape text
        //drawshapesidestext();
    }
}
function resetareapartmeasurements(areaPart, partshape) {
    areaPart.PartFabList[0].MeasureList = [];
    setmeasurements(areaPart, areaPart.PartFabList[0], partshape.index, partshape.sides);
}