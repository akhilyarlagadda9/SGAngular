function initshapelabel(index, sideindex, slx, sly, text) {  
    let shapelabel = { index: index, sideindex: sideindex, text: text, width: 100, height: 40, x: slx, y: sly, isactive:1 };
    shape.labels.push(shapelabel);
}
function onsetshapelabel(mx, my, index, sideindex, sindex, source) {  
    if (shape.labels == undefined) { shape.labels = []; }    
    if (index == -1) {
        index = shape.labels.length;
        let labeltext = shape.partname;
        if (labeltext == '') { labeltext = 'A' + (shape.areaindex) + ':P' + (shape.partsrno); }
        initshapelabel(index, sideindex, mx, my, labeltext);
    }
    let shapelabel = shape.labels[index];
    ActionUpdateShape('onsetshapelabel');
    drawshapelabel(index, sideindex, mx, my, shapelabel.text);
}
function drawshapesidestext(index) {
    if (shape.sides != null) {
        for (let j = 0; j < shape.sides.length; j++) {
            drawshapesidetext(j);
        }
    }
}
function drawshapelabels(index) {
    if (shape.sides != null) {
        for (let j = 0; j < shape.labels.length; j++) {
            let shapelabel = shape.labels[j];
            if (shape.labels[j].isactive == 1) { drawshapelabel(j, shapelabel.sideindex, shapelabel.x, shapelabel.y, shapelabel.text); }            
        }
    }
}
function drawshapesidetext(index) {
    if (index > 0 && index < shape.sides.length - 1) { return; }        
    let side = shape.sides[index];
    if (side != undefined) {
        let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2;
        let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, w1 = side.w1;
        let x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, w2 = side.w2;
        let npt = calcenterpoint(x11, y11, x12, y12, x21, y21, x22, y22, w1, w2);        
        let sptx = npt.dx, spty = npt.dy;
        let sidepathindex = index + "" + shape.index;
        let spindex = shape.spindex;
        let sidetext = 'A' + (shape.areaindex) + ':P' + (shape.partsrno);
        if (shape.mode == 'slabpart') { if (shape.slabparts.length > 1) { sidetext = sidetext + "." + (spindex + 1); } }
        let sidepathtext = shapepathg.select("#sidepathtext" + sidepathindex);
        if (!sidepathtext.empty()) { sidepathtext.remove(); }
        sidepathtext = shapepathg.append("text").attr("id", "sidepathtext" + sidepathindex);
        sidepathtext.attr("x", sptx).attr("y", spty).append("tspan").attr("id", "sidepathtexttspan" + sidepathindex).style("fill", "black").text(sidetext);
        let angle1 = shape.angle;
        // console.log(index, code, mtx, mty, mtext, angle, angle1);
        sidepathtext.attr("transform", "rotate(" + -angle1 + "," + [sptx, spty] + ")");
    }
}
function drawshapelabel(index, sideindex, sltx, slty, ltext) {
    let sindex = shape.index, smode = shape.mode, partsrno = shape.partsrno, areaid = shape.areaid, spindex = shape.spindex;
    let slindex = sindex + "" + sideindex + "" + index;
    let foshapelabel = shapepathg.select("#foshapelabel" + slindex);
    if (!foshapelabel.empty()) { foshapelabel.remove(); }
    foshapelabel = shapepathg.append("foreignObject").attr("id", "foshapelabel" + slindex).attr("index", index).attr("sideindex", sideindex)
        .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode)
        .attr("x", sltx).attr("y", slty).attr("width", "300px").attr("height", "50px").attr("style", "overflow: visible;").call(shapelabeldrag);
    let splouterdiv = foshapelabel.select("#splouterdiv" + slindex);
    if (splouterdiv.empty()) {
        splouterdiv = foshapelabel.append('xhtml:div').attr("id", "splouterdiv" + slindex).attr("class", "col-xs-12 pleft pright").attr("index", index).attr("sideindex", sideindex)
            .attr("slindex", slindex).attr("style", "display: inline-block; width:100%;height:100%;padding:1px;background-color:beige;").on("mouseover", showlabelcontrols).on("mouseout", hidelabelcontrols);
    }
    let splinnerdiv = splouterdiv.select("#splinnerdiv" + slindex);
    if (splinnerdiv.empty()) { splinnerdiv = splouterdiv.append('xhtml:div').attr("id", "splinnerdiv" + slindex).attr("class", "cursor"); }
    let spltextdiv = splinnerdiv.select("#spltextdiv" + slindex);
    if (spltextdiv.empty()) { spltextdiv = splinnerdiv.append('xhtml:div').attr("id", "spltextdiv" + slindex).attr("index", index).attr("class", "col-xs-9 no-padding text-left"); }
    //ltext = '<p>test salsalkksdaklsadklksadklkl; </p><p>test salsalkksdaklsadklksadklkl; </p><p>test salsalkksdaklsadklksadklkl; </p><p>test salsalkksdaklsadklksadklkl; </p><p>test salsalkksdaklsadklksadklkl; </p><p>test salsalkksdaklsadklksadklkl; </p>'
    spltextdiv.html(ltext);
    if (shape.mode == 'shape') {
        let spleditspan = splinnerdiv.select("#spleditspan" + slindex);
        if (spleditspan.empty()) {
            spleditspan = splinnerdiv.append('xhtml:div').attr("id", "spleditspan" + slindex).attr("index", index).attr("sideindex", sideindex)
                .attr("slindex", slindex).attr("class", "col-xs-1 text-center btn btn-sm btn-primary fa fa-pencil widthcls1").on("click", oneditshapetext).attr('style', 'visibility:visibile');
        }
        let spldeletespan = splinnerdiv.select("#spldeletespan" + slindex);
        if (spldeletespan.empty()) {
            spldeletespan = splinnerdiv.append('xhtml:div').attr("id", "spldeletespan" + slindex).attr("index", index).attr("sideindex", sideindex)
                .attr("slindex", slindex).attr("class", "col-xs-1 text-center btn btn-sm btn-danger fa fa-trash widthcls1").on("click", ondeleteshapelabel).attr('style', 'visibility:visibile');
        }
        setshapelblwidthheight(slindex);
    }
}
function setshapelblwidthheight(slindex) {      
    let foshapelabel = shapepathg.select("#foshapelabel" + slindex);
    let splouterdiv = document.getElementById("splouterdiv" + slindex);  
    foshapelabel.attr("width", splouterdiv.scrollWidth).attr("height", splouterdiv.scrollHeight);
}
function oneditshapetext() {
    let slindex = this.getAttribute("slindex");
    let shapetext = $('#spltextdiv' + slindex).html();
    $('#shapetextindex').html(slindex);
    $('.note-editable').html(shapetext);  
    $("#divmodelshape").show();
}
function onsaveshapetext() {
    let shapetext = $('.note-editable').html();
    let slindex = $('#shapetextindex').html();      
    let foshapelabel = shapepathg.select("#foshapelabel" + slindex);
    let index = foshapelabel.attr('index');
    let spltextdiv = $('#spltextdiv' + slindex);
    $('#spltextdiv' + slindex).html(shapetext);
    let shapelabel = shape.labels[index];
    shapelabel.text = shapetext;
    ActionUpdateShape('onsaveshapetext');
    setshapelblwidthheight(slindex);
    $("#divmodelshape").hide();   
}
function ondeleteshapelabel() {
    let index = this.getAttribute("index");
    let slindex = this.getAttribute("slindex");
    let shapelabel = shape.labels[index];
    let foshapelabel = shapepathg.select("#foshapelabel" + slindex);    
    if (!foshapelabel.empty()) { foshapelabel.remove(); }
    shapelabel.isactive = 0;
    ActionUpdateShape('ondeleteshapelabel');
}
function oncloseeditshapetext() {  
    $("#divmodelshape").hide();
}

function shapelabeldragstarted() {
    let mode = this.getAttribute("smode");
    let index = parseInt(this.getAttribute("index"));
    let sideindex = parseInt(this.getAttribute("sideindex"));
    let sindex = parseInt(this.getAttribute("sindex"));
    let spindex = parseInt(this.getAttribute("spindex"));
    let partsrno = parseInt(this.getAttribute("partsrno"));
    let areaid = parseInt(this.getAttribute("areaid"));
    if (shape.index != sindex) { setdrawshape31(sindex, partsrno, areaid, mode, 'shapelabeldragstarted'); } 
    if (mode == 'shape') {       
        let shapelabel = shape.labels[index];
        dragdx = d3.event.x - shapelabel.x; dragdy = d3.event.y - shapelabel.y;
      //  console.log(index, 'shapelabeldragstarted', dragdx, dragdy);
        removeshapetools();
        bdrag = true;
    }
}
function shapelabeldragged() {
    let mode = this.getAttribute("smode");
    if (bdrag && mode == 'shape') {
        let index = parseInt(this.getAttribute("index"));
        let sideindex = parseInt(this.getAttribute("sideindex"));        
        let sindex = parseInt(this.getAttribute("sindex"));      
        let shapelabel = shape.labels[index];
        let slx = d3.event.x - dragdx, sly = d3.event.y - dragdy;
        shapelabel.x = slx; shapelabel.y = sly;      
        drawshapelabel(index, sideindex, slx, sly, shapelabel.text);        
    }
}
function shapelabeldragended() {
    if (bdrag) {
        bdrag = false;
        resetdragvars('shapelabeldragended');
        ActionUpdateShape('shapelabeldragended');       
    }
}
function showlabelcontrols() {    
    let slindex = this.getAttribute("slindex");   
    let spleditspan = $("#spleditspan" + slindex);   
    spleditspan.attr('style', 'visibility:visibile');
    let spldeletespan = $("#spldeletespan" + slindex);
    spldeletespan.attr('style', 'visibility:visibile');
}
function hidelabelcontrols() {    
    let slindex = this.getAttribute("slindex");
    let spleditspan = $("#spleditspan" + slindex);  
    spleditspan.attr('style', 'visibility:hidden');
    let spldeletespan = $("#spldeletespan" + slindex);
    spldeletespan.attr('style', 'visibility:hidden');
}