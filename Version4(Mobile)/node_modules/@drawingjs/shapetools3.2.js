function drawshapehandles() {
    //createshapehandles(shape.index);
    //for (var j = 0; j < shape.sides.length; j++) {
    //    drawsidehandle(j, true);
    //}
    //if (shape.angle != 0) {
    //    handleg.attr("transform", shapeg.attr("transform"));
    //}
    //handlesg.attr("transform", shapesg.attr("transform"));
}
function removeshapetools() {
    removeshapecontrols();
    //removeshapehandles();
}
function createshapehandles(index) {
    handleg = handlesg.select("#handleg" + index);
    if (handleg.empty()) { handleg = handlesg.append("g").attr("id", "handleg" + index); }
}
function removeshapecontrols() {    
    if (shapecontrolsg != undefined) { shapesg.select("#shapecontrolsg").remove(); }
    if (slabpartcontrolsg != undefined) { mslabpartsg.select("#slabpartcontrolsg").remove(); }
}
function createshapecontrols() {
    removeshapecontrols();
    if (shape.mode == 'shape') {
        shapecontrolsg = shapesg.select("#shapecontrolsg"); if (shapecontrolsg.empty()) { shapecontrolsg = shapesg.append("g").attr("id", "shapecontrolsg"); }
    } else if (mslabpartsg != undefined) {
        slabpartcontrolsg = mslabpartsg.select("#slabpartcontrolsg"); if (slabpartcontrolsg.empty()) { slabpartcontrolsg = mslabpartsg.append("g").attr("id", "slabpartcontrolsg"); }
    } 
}
function removeshapehandles() {
    if (handlesg != undefined) { handlesg.selectAll('*').remove(); }
}
function drawsidehandle(index) {
    var index1 = shape.opoints.length - 1 == index ? 0 : (index + 1);
    var x1 = shape.opoints[index][0], y1 = shape.opoints[index][1], x2 = shape.opoints[index1][0], y2 = shape.opoints[index1][1],
       w = Math.abs(x2 - x1), h = Math.abs(y2 - y1), m = 3, hclass = 'ns-handle';
    if (shape.type == 'r') {
        if (index == 0) { y1 = y2, w = m; hclass = 'ew-handle' } else if (index == 1) { h = m; } else if (index == 2) { w = m; hclass = 'ew-handle' } else if (index == 3) { x1 = x2, h = m; }
    } else if (shape.type == 'll') {
        if (index == 0) { w = m; y1 -= h; hclass = 'ew-handle' } else if (index == 1) { h = m; } else if (index == 2) { w = m; hclass = 'ew-handle' } else if (index == 3) { x1 -= w, h = m; w += m; }
        else if (index == 4) { y1 = y2 - h, w = m, h += m; hclass = 'ew-handle' } else if (index == 5) { x1 -= w, w += m, h = m; }
    } else if (shape.type == 'rl') {
        if (index == 0) { w = m; y1 -= h; hclass = 'ew-handle' } else if (index == 1) { x1 = x2, h = m; } else if (index == 2) { w = m; hclass = 'ew-handle' }
        else if (index == 3) { h = m; }
        else if (index == 4) { y1 = y2 - h, w = m, h += m; hclass = 'ew-handle' } else if (index == 5) { w += m, h = m; }
    } else if (shape.type == 'u') {
        if (index == 0) { w = m; y1 -= h; hclass = 'ew-handle' } else if (index == 1) { h = m; } else if (index == 2) { w = m; hclass = 'ew-handle' }
        else if (index == 3) { x1 -= w, h = m; w += m; } else if (index == 4) { y1 = y2, w = m, h += m; hclass = 'ew-handle' } else if (index == 5) { x1 -= w, w += m, h = m; }
        else if (index == 6) { w = m, h += m; hclass = 'ew-handle' } else if (index == 7) { x1 -= w, w += m, h = m; }
    }
    sidehandleg = handleg.select("#sidehandleg" + index); if (sidehandleg.empty()) { sidehandleg = handleg.append("g").attr("id", "sidehandleg" + index); }
    var handlerect = sidehandleg.select("#handlerect" + index);
    if (handlerect.empty()) { handlerect = sidehandleg.append("rect").attr("id", "handlerect" + index); }
    handlerect.attr("x", x1).attr("y", y1).attr("width", w).attr("height", h).attr("index", index).attr("sindex", shape.index).attr("smode", shape.mode).attr("class", hclass).call(resizedrag);
}
function shapecontroldiv(mx, my, index) {
    createshapecontrols();
    if (shape.mode == 'slabpart') {
        shapecontrolg = slabpartcontrolsg.select("#" + shape.mode + "controlg" + index);
        if (shapecontrolg.empty()) { shapecontrolg = slabpartcontrolsg.append("g").attr("id", shape.mode + "controlg" + index); }
    } else {
        shapecontrolg = shapecontrolsg.select("#" + shape.mode + "controlg" + index);
        if (shapecontrolg.empty()) { shapecontrolg = shapecontrolsg.append("g").attr("id", shape.mode + "controlg" + index); }
    }
    var shapectlfo = shapecontrolg.select("#shapectlfo" + index);
    if (shapectlfo.empty()) { shapectlfo = shapecontrolg.append("foreignObject").attr("id", "shapectlfo" + index); }
    shapectlfo.attr("x", mx).attr("y", my).attr("width", "230px").attr("height", "230px");
    shapectldiv = shapectlfo.select("#shapectldiv" + index);
    if (shapectldiv.empty()) { shapectldiv = shapectlfo.append('xhtml:div').attr("id", "shapectldiv" + index); }
    shapectldiv.attr("style", "width:220;background-color:lightyellow;border:1px solid blue;padding:5px;border-radius:5px;line-height: 25px; vertical-align:middle;");
    shapecontrolg.attr('transform', shapeouterg.attr('transform'));
}
function shapecontrolangle(type, angle, index, sideindex) {
    let areashapeindex = shape.areaid + "" + index;
    let shapectlangle = shapectldiv.select("#shapectlangle" + areashapeindex);
    if (shapectlangle.empty()) { shapectlangle = shapectldiv.append('xhtml:span').attr("id", "shapectlangle" + areashapeindex); }
    shapectlangle.attr("style", "width:55;height:20px;color:orange;text-align:center;cursor:pointer;").html("Rotate:");

    let shapectlminus = shapectldiv.select("#shapectlminus" + areashapeindex);
    if (shapectlminus.empty()) { shapectlminus = shapectldiv.append('xhtml:span').attr("id", "shapectlminus" + areashapeindex); }
    shapectlminus.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;-&nbsp;&nbsp;");

    let shapectlinputangle = shapectldiv.select("#shapectlinputangle" + areashapeindex);
    if (shapectlinputangle.empty()) { shapectlinputangle = shapectldiv.append('xhtml:input').attr("id", "shapectlinputangle" + areashapeindex); }
    shapectlinputangle.attr("style", "width:45px;height:17px;text-align:center;").attr("type", "text").attr("readonly", "true").property("value", angle);

    let shapectlplus = shapectldiv.select("#shapectlplus" + areashapeindex);
    if (shapectlplus.empty()) { shapectlplus = shapectldiv.append('xhtml:span').attr("id", "shapectlplus" + areashapeindex); }
    shapectlplus.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;+&nbsp;&nbsp;");

    //var shapectlhflip = shapectldiv.select("#shapectlhflip" + index);
    //if (shapectlhflip.empty()) { shapectlhflip = shapectldiv.append('xhtml:span').attr("id", "shapectlhflip" + index); }
    //shapectlhflip.attr("class", "btn-primary").attr("style", "margin-left:10px;").html("&nbsp;&nbsp;=&nbsp;&nbsp;");

    if (type == 0) {
        shapectlminus.attr("onclick", "onrotateshape(-1," + index + ",22.5)");
        shapectlplus.attr("onclick", "onrotateshape(1," + index + ",22.5)");
        //if (shape.type == 'rl') { shapectlhflip.attr("onclick", "rotateshape(2," + index + ",90)"); }
        //else { shapectlhflip.attr("onclick", "rotateshape(2," + index + ",-90)"); }        
    } else if (type == 3) {
        shapectlminus.attr("onclick", "onrotatecutout(-1," + index + "," + sideindex + ",22.5)");
        shapectlplus.attr("onclick", "onrotatecutout(1," + index + "," + sideindex + ",22.5)");
        // shapectlhflip.attr("onclick", "rotatecutout(" + index + ",-90)");
    }
    //var shapectlvflip = shapectldiv.select("#shapectlvflip" + index);
    //if (shapectlvflip.empty()) { shapectlvflip = shapectldiv.append('xhtml:span').attr("id", "shapectlvflip" + index); }
    //shapectlvflip.attr("class", "btn-primary").attr("style", "margin-left:10px;").html("&nbsp;&nbsp;=&nbsp;&nbsp;").attr("onclick", "rotateshape(" + index + ",1)");
}
function shapecontrolseparator(lindex, index) {
    var shapectlhr = shapectldiv.select("#shapectlhr" + lindex + index);
    if (shapectlhr.empty()) { shapectlhr = shapectldiv.append('xhtml:div').attr("id", "shapectlhr" + lindex + index); }
    shapectlhr.attr("style", "width:155;height:10px;border-bottom:1px solid;");
}
function shapecontrolheader34(type, index, sideindex, sidecode) {    
    let typename = "";    
    if (type == 0) {typename = "Shape"; }
    else if (type == 1) {typename = "Bump out"; }
    else if (type == 2) {typename = "Corner"; }
    else if (type == 3) {typename = "Cutout"; }
    else if (type == 4) {typename = "Splash"; }
    else if (type == 5) {typename = "Bump"; }
    else if (type == 6) { typename = "Splash"; }
    else if (type == 7) { typename = "Seam"; }
    else if (type == 8) { typename = "Seam"; }
    else if (type == 9) { typename = "Splash"; }
    let shapectldivheader = shapectldiv.select("#shapectldivheader");
    if (shapectldivheader.empty()) { shapectldivheader = shapectldiv.append('xhtml:div').attr("id", "shapectldivheader"); }
    shapectldivheader.attr("style", "border-bottom:1px solid;");
    let shapectlheadertitle = shapectldivheader.select("#shapectlheadertitle");
    if (shapectlheadertitle.empty()) { shapectlheadertitle = shapectldivheader.append('xhtml:span').attr("id", "shapectlheadertitle"); }
    shapectlheadertitle.attr("class", "hed").attr("style", "padding:4px;").html("Edit " + typename);
    let shapectlheaderclose = shapectldivheader.select("#shapectlheaderclose");
    if (shapectlheaderclose.empty()) { shapectlheaderclose = shapectldivheader.append('xhtml:span').attr("id", "shapectlheaderclose"); }
    shapectlheaderclose.attr("class", "btn-danger").attr("style", "margin-left:65px;padding:3px;cursor:pointer;text-align:center;").html("&nbsp;&nbsp;X&nbsp;&nbsp;").attr("onclick", "oncloseshapecontrols34()");
}
function shapecontroldelete(type, index, sideindex, sidecode) {
    let shapectldelete = shapectldiv.select("#shapectldelete" + index);
    let typename = "";
    if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }   
    if (type == 0) { shapectldelete.attr("onclick", "ondeleteshape(" + index + ")"); typename = "Shape"; }
    else if (type == 1) { shapectldelete.attr("onclick", "ondeletesideshape(" + index + "," + sideindex + ")"); typename = "Bumpout"; }
    else if (type == 2) { shapectldelete.attr("onclick", "ondeleteshapesidecorner(" + index + "," + sideindex + ")"); typename = "Corner"; }
    else if (type == 3) { shapectldelete.attr("onclick", "ondeletecutout(" + index + "," + sideindex + ")"); typename = "Cutout"; }
    else if (type == 4) { shapectldelete.attr("onclick", "ondeleteshapesidesplash(" + index + "," + sideindex + "," + sidecode + ")"); typename = "Splash"; }
    else if (type == 5) { shapectldelete.attr("onclick", "removesplsideshape(" + index + ")"); typename = "Bump"; }
    else if (type == 6) { shapectldelete.attr("onclick", "removecornersplash(" + index + ")"); typename = "Splash"; }
    shapectldelete.attr("class", "btn-default").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html('X Delete ' + typename);
}

function drawshapecontrols(index, sideindex, spindex, spseamindex, spsideindex, mx, my) {
    if (shape.mode != 'print') {
        let index = shape.index, angle = shape.angle, ctltype = 0, dupcount = 1;
        if (shape.unitcount > 1) { dupcount = shape.unitcount - shape.dupcount; if (dupcount < 1) { dupcount = 1; } }
        shapecontroldiv(mx, my, index);
        shapecontrolheader34(ctltype, index);
        shapecontrolangle(ctltype, angle, index, -1);       
        if (shape.mode == 'shape') {
            shapecontrolseparator(1, index);
            var shapectlunitcount = shapectldiv.select("#shapectlunitcount" + index);
            if (shapectlunitcount.empty()) { shapectlunitcount = shapectldiv.append('xhtml:span').attr("id", "shapectlunitcount" + index); }
            shapectlunitcount.attr("style", "width:55;height:20px;color:orange;text-align:center;cursor:pointer;").html("#Units:");

            let shapectlduplminus1 = shapectldiv.select("#shapectlduplminus1" + index);
            if (shapectlduplminus1.empty()) { shapectlduplminus1 = shapectldiv.append('xhtml:span').attr("id", "shapectlduplminus1" + index); }
            shapectlduplminus1.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;-&nbsp;&nbsp;").attr("onclick", "onduplshapecounter(-1)");

            let shapectlduplinput = shapectldiv.select("#shapectlduplinput" + index);
            if (shapectlduplinput.empty()) { shapectlduplinput = shapectldiv.append('xhtml:input').attr("id", "shapectlduplinput" + index); }
            shapectlduplinput.attr("style", "width:45px;height:17px;text-align:center;").attr("type", "text").attr("readonly", "true").property("value", dupcount);

            let shapectlduplplus1 = shapectldiv.select("#shapectlduplplus1" + index);
            if (shapectlduplplus1.empty()) { shapectlduplplus1 = shapectldiv.append('xhtml:span').attr("id", "shapectlplus1" + index); }
            shapectlduplplus1.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;+&nbsp;&nbsp;").attr("onclick", "onduplshapecounter(1)");

            var shapectlcopy = shapectldiv.select("#shapectlcopy" + index);
            if (shapectlcopy.empty()) { shapectlcopy = shapectldiv.append('xhtml:span').attr("id", "shapectlcopy" + index); }
            shapectlcopy.attr("style", "width:55;height:20px;color:orange;text-align:center;cursor:pointer;").html("  Duplicate");

            shapectlcopy.attr("onclick", "onduplicateshape(" + index + ")");
            shapecontrolseparator(2, index);
            shapecontroldelete(ctltype, index, -1, -1);
        }else if (shape.mode == 'slabpart') {
            if (shape.spindex != 0) {
                shapecontrolseparator(1, index);
                shapecontroldelete(ctltype, index, -1, -1);

                var shapectldelete = shapectldiv.select("#shapectldelete" + index);
                if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
                shapectldelete.attr("class", "btn-default").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html('X Delete Shape');
                //shapectldelete.attr("style", "width:55;height:20px;color:red;text-align:center;cursor:pointer;").html("<button style='font-size: 12px;line-height: 12px;'>X Delete Shape</button>");
                shapectldelete.attr("onclick", "ActionDeleteSlabpart32(" + index + "," + sideindex + "," + spindex + "," + spseamindex + "," + spsideindex + ")");

            }
        }        
    }
}
function drawsideshapecontrols(index, sideindex, sidecode, mx, my) {
    let side = shape.sides[sideindex];
    let sideshape = side.sideshapes[index];
    let ctltype = 1, w = applymminchfact(sideshape.w, 2, 2), h = applymminchfact(sideshape.h, 2, 2), angle = sideshape.angle, type = sideshape.type;
    shapecontroldiv(mx, my, index);
    shapecontrolheader34(ctltype, index);
    let shapectlwidth = shapectldiv.select("#shapectlwidth" + index);
    if (shapectlwidth.empty()) { shapectlwidth = shapectldiv.append('xhtml:span').attr("id", "shapectlwidth" + index); }
    if (type != 11) {
        shapectlwidth.attr("style", "width:45;height:30px;").html("W:");
        let shapectlinputwidth = shapectldiv.select("#shapectlinputwidth" + index);
        if (shapectlinputwidth.empty()) { shapectlinputwidth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputwidth" + index); }
        shapectlinputwidth.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", w).attr("onchange", "onresizesideshape(this,0," + index + "," + sideindex + ")");
    }
    let shapectlheight = shapectldiv.select("#shapectlheight" + index);
    if (shapectlheight.empty()) { shapectlheight = shapectldiv.append('xhtml:span').attr("id", "shapectlheight" + index); }
    shapectlheight.attr("style", "width:45;height:30px;").html("H:");
    let shapectlinputheight = shapectldiv.select("#shapectlinputheight" + index);
    if (shapectlinputheight.empty()) { shapectlinputheight = shapectldiv.append('xhtml:input').attr("id", "shapectlinputheight" + index); }
    shapectlinputheight.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", h).attr("onchange", "onresizesideshape(this,1," + index + "," + sideindex + ")");
   // console.log(index, sideindex, sidecode, mx, my, type);
    //if (type == '6' || type == '7') {
    //    var shapectlrad = shapectldiv.select("#shapectlangle" + index);
    //    if (shapectlrad.empty()) { shapectlrad = shapectldiv.append('xhtml:span').attr("id", "shapectlangle" + index); }
    //    shapectlrad.attr("style", "width:45;height:30px;").html("Angle:");
    //    var shapectlinputrad = shapectldiv.select("#shapectlinputangle" + index);
    //    if (shapectlinputrad.empty()) { shapectlinputrad = shapectldiv.append('xhtml:input').attr("id", "shapectlinputangle" + index); }
    //    shapectlinputrad.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", angle).attr("onchange", "onresizesideshape(this,2," + index + "," + sideindex + ")");
    //}
    shapecontrolseparator(1, index);
    shapecontroldelete(ctltype, index, sideindex, sidecode);
}
function drawsplashsideshapecontrols(index, splashindex, sideindex, sidecode, mx, my) {
    let side = shape.sides[sideindex];
    let splash = side.splashs[splashindex];
    let sideshape = splash.sideshapes[index];
    var ctltype = 1, w = applymminchfact(sideshape.w, 2, 2), h = applymminchfact(sideshape.h, 2, 2), r = applymminchfact(sideshape.r, 2, 2), type = sideshape.type;
    //if (type == 3) { h = h / 2; }
    shapecontroldiv(mx, my, index);
    shapecontrolheader34(ctltype, index);
    var shapectlwidth = shapectldiv.select("#shapectlwidth" + index);
    if (shapectlwidth.empty()) { shapectlwidth = shapectldiv.append('xhtml:span').attr("id", "shapectlwidth" + index); }
    shapectlwidth.attr("style", "width:45;height:30px;").html("W:");
    var shapectlinputwidth = shapectldiv.select("#shapectlinputwidth" + index);
    if (shapectlinputwidth.empty()) { shapectlinputwidth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputwidth" + index); }
    shapectlinputwidth.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", w).attr("onchange", "onresizesplashsideshape(this,0," + index + "," + splashindex + "," + sideindex + ")");
    var shapectlheight = shapectldiv.select("#shapectlheight" + index);
    if (shapectlheight.empty()) { shapectlheight = shapectldiv.append('xhtml:span').attr("id", "shapectlheight" + index); }
    shapectlheight.attr("style", "width:45;height:30px;").html("H:");
    var shapectlinputheight = shapectldiv.select("#shapectlinputheight" + index);
    if (shapectlinputheight.empty()) { shapectlinputheight = shapectldiv.append('xhtml:input').attr("id", "shapectlinputheight" + index); }
    shapectlinputheight.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", h).attr("onchange", "onresizesplashsideshape(this,1," + index + "," + splashindex + "," + sideindex + ")");
    if (type == '7' || type == '8') {
        var shapectlrad = shapectldiv.select("#shapectlrad" + index);
        if (shapectlrad.empty()) { shapectlrad = shapectldiv.append('xhtml:span').attr("id", "shapectlrad" + index); }
        shapectlrad.attr("style", "width:45;height:30px;").html("R:");
        var shapectlinputrad = shapectldiv.select("#shapectlinputrad" + index);
        if (shapectlinputrad.empty()) { shapectlinputrad = shapectldiv.append('xhtml:input').attr("id", "shapectlinputrad" + index); }
        shapectlinputrad.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", r).attr("onchange", "onresizesideshape(this,2," + index + "," + splashindex + "," + sideindex + ")");
    }
    shapecontrolseparator(1, index);
    var shapectldelete = shapectldiv.select("#shapectldelete" + index);
    if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
    shapectldelete.attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html("X Delete");
    shapectldelete.attr("onclick", "ondeletesplashsideshape(" + index + "," + splashindex + "," + sideindex + ")");
}
function drawshapesidecornercontrols(index, sideindex, mx, my) {
    if (shape.mode == 'shape') {
        var side = shape.sides[sideindex];
        var corner = side.corners[index];
        var index = corner.index, w = applymminchfact(corner.w, 2, 2), h = applymminchfact(corner.h, 2, 2), r = applymminchfact(corner.r, 2, 2), type = corner.type, ctltype = 2, delname = '';
       // if (type == 1) { r = calchyplen1(w, h); }
        shapecontroldiv(mx, my, index);
        shapecontrolheader34(ctltype, index);
        if (type == 1) {
            delname = 'Clip';
            let shapectldepth = shapectldiv.select("#shapectldepth" + index);
            if (shapectldepth.empty()) { shapectldepth = shapectldiv.append('xhtml:span').attr("id", "shapectldepth" + index); }
            shapectldepth.attr("style", "width:65;height:20px;").html("LEN:");

            let shapectlinputdepth = shapectldiv.select("#shapectlinputdepth" + index);
            if (shapectlinputdepth.empty()) { shapectlinputdepth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputdepth" + index); }
            shapectlinputdepth.attr("style", "width:85px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(r)).attr("onchange", "onresizesidecorner(this,3," + index + "," + sideindex + ")");
            shapectlinputdepth.attr("onclick", "onfocusinputcontrol32(this)");
            $("#shapectlinputdepth" + index).focus().select();
            shapecontrolseparator(5, index);

            let shapectlwidth = shapectldiv.select("#shapectlwidth" + index);
            if (shapectlwidth.empty()) { shapectlwidth = shapectldiv.append('xhtml:span').attr("id", "shapectlwidth" + index); }
            shapectlwidth.attr("style", "width:45;height:20px;").html("W:");

            let shapectlinputwidth = shapectldiv.select("#shapectlinputwidth" + index);
            if (shapectlinputwidth.empty()) { shapectlinputwidth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputwidth" + index); }
            shapectlinputwidth.attr("style", "width:75px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(w)).attr("onchange", "onresizesidecorner(this,1," + index + "," + sideindex + ")");
            shapectlinputwidth.attr("onclick", "onfocusinputcontrol32(this)");
           

            let shapectlheight = shapectldiv.select("#shapectlheight" + index);
            if (shapectlheight.empty()) { shapectlheight = shapectldiv.append('xhtml:span').attr("id", "shapectlheight" + index); }
            shapectlheight.attr("style", "width:45;height:20px;").html("H:");

            let shapectlinputheight = shapectldiv.select("#shapectlinputheight" + index);
            if (shapectlinputheight.empty()) { shapectlinputheight = shapectldiv.append('xhtml:input').attr("id", "shapectlinputheight" + index); }
            shapectlinputheight.attr("style", "width:75px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(h)).attr("onchange", "onresizesidecorner(this,2," + index + "," + sideindex + ")");
            shapectlinputheight.attr("onclick", "onfocusinputcontrol32(this)");
        } else if (type == 2) {
            delname = 'Radius';
            let shapectldepth = shapectldiv.select("#shapectldepth" + index);
            if (shapectldepth.empty()) { shapectldepth = shapectldiv.append('xhtml:span').attr("id", "shapectldepth" + index); }
            shapectldepth.attr("style", "width:65;height:20px;").html("RAD:");

            let shapectlinputdepth = shapectldiv.select("#shapectlinputdepth" + index);
            if (shapectlinputdepth.empty()) { shapectlinputdepth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputdepth" + index); }
            shapectlinputdepth.attr("style", "width:85px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(r)).attr("onchange", "onresizesidecorner(this,3," + index + "," + sideindex + ")");
            shapectlinputdepth.attr("onclick", "onfocusinputcontrol32(this)");
            $("#shapectlinputdepth" + index).focus().select();
        } else if (type == 3) {
            delname = 'Notch';
            let shapectlwidth = shapectldiv.select("#shapectlwidth" + index);
            if (shapectlwidth.empty()) { shapectlwidth = shapectldiv.append('xhtml:span').attr("id", "shapectlwidth" + index); }
            shapectlwidth.attr("style", "width:45;height:20px;").html("W:");

            let shapectlinputwidth = shapectldiv.select("#shapectlinputwidth" + index);
            if (shapectlinputwidth.empty()) { shapectlinputwidth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputwidth" + index); }
            shapectlinputwidth.attr("style", "width:75px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(w)).attr("onchange", "onresizesidecorner(this,1," + index + "," + sideindex + ")");
            shapectlinputwidth.attr("onclick", "onfocusinputcontrol32(this)");
            $("#shapectlinputwidth" + index).focus().select();

            let shapectlheight = shapectldiv.select("#shapectlheight" + index);
            if (shapectlheight.empty()) { shapectlheight = shapectldiv.append('xhtml:span').attr("id", "shapectlheight" + index); }
            shapectlheight.attr("style", "width:45;height:20px;").html("H:");

            let shapectlinputheight = shapectldiv.select("#shapectlinputheight" + index);
            if (shapectlinputheight.empty()) { shapectlinputheight = shapectldiv.append('xhtml:input').attr("id", "shapectlinputheight" + index); }
            shapectlinputheight.attr("style", "width:75px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(h)).attr("onchange", "onresizesidecorner(this,2," + index + "," + sideindex + ")");
            shapectlinputheight.attr("onclick", "onfocusinputcontrol32(this)");
        } else if (type == 4) {
            delname = 'Bump';
            let shapectlwidth = shapectldiv.select("#shapectlwidth" + index);
            if (shapectlwidth.empty()) { shapectlwidth = shapectldiv.append('xhtml:span').attr("id", "shapectlwidth" + index); }
            shapectlwidth.attr("style", "width:45;height:20px;").html("W:");
            
            let shapectlinputwidth = shapectldiv.select("#shapectlinputwidth" + index);
            if (shapectlinputwidth.empty()) { shapectlinputwidth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputwidth" + index); }
            shapectlinputwidth.attr("style", "width:75px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(w)).attr("onchange", "onresizesidecorner(this,1," + index + "," + sideindex + ")");
            shapectlinputwidth.attr("onclick", "onfocusinputcontrol32(this)");
            $("#shapectlinputwidth" + index).focus().select();

            let shapectldepth = shapectldiv.select("#shapectldepth" + index);
            if (shapectldepth.empty()) { shapectldepth = shapectldiv.append('xhtml:span').attr("id", "shapectldepth" + index); }
            shapectldepth.attr("style", "width:45;height:20px;").html("H:");

            let shapectlinputdepth = shapectldiv.select("#shapectlinputdepth" + index);
            if (shapectlinputdepth.empty()) { shapectlinputdepth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputdepth" + index); }
            shapectlinputdepth.attr("style", "width:55px;height:20px;text-align:center;").attr("type", "text").property("value", decimaltofraction(r)).attr("onchange", "onresizesidecorner(this,3," + index + "," + sideindex + ")");
            shapectlinputdepth.attr("onclick", "onfocusinputcontrol32(this)");
        }        
        shapecontrolseparator(2, index);
       
        let shapectldelete = shapectldiv.select("#shapectldelete" + index);
        if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
        shapectldelete.attr("class", "btn-default").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html('X Delete ' + delname);
        shapectldelete.attr("onclick", "ondeleteshapesidecorner(" + index + "," + sideindex + ")");

        //let shapectlallspace = shapectldiv.select("#shapectlallspace" + index);
        //if (shapectlallspace.empty()) { shapectlallspace = shapectldiv.append('xhtml:span').attr("id", "shapectlallspace" + index); }
        //shapectlallspace.attr("style", "width:30;height:20px;").html("&nbsp;&nbsp;&nbsp;");

        //let shapectlApplyAll = shapectldiv.select("#shapectlApplyAll" + index);
        //if (shapectlApplyAll.empty()) { shapectlApplyAll = shapectldiv.append('xhtml:span').attr("id", "shapectlcenter" + index); }
        //shapectlApplyAll.attr("class", "btn-primary").attr("style", "padding:3px;cursor:pointer;").html("&nbsp;&nbsp;Apply All&nbsp;&nbsp;").attr("onclick", "onresizesetallsidescorners(" + index + "," + sideindex + ")");
      
        shapecontrolseparator(3, index);

        let shapectlerrormsg = shapectldiv.select("#shapectlerrormsg" + index);
        if (shapectlerrormsg.empty()) { shapectlerrormsg = shapectldiv.append('xhtml:span').attr("id", "shapectlerrormsg" + index); }
        shapectlerrormsg.attr("style", "width:205;height:20px;color:red;display:none;").html("Invalid corner sizes!");
    }
}
function drawshapesidesplashcontrols(index, sideindex, sidecode, width, height, mx, my, spltype) {
    var sindex = shape.index, ctltype = 4;
    var splctlindex = sindex + "" + sideindex + "" + index + "" + sidecode;
    shapecontroldiv(mx, my, index);
    shapecontrolheader34(ctltype, index);
    //var splashctlwidth = shapectldiv.select("#splashctlwidth" + splctlindex);
    //if (splashctlwidth.empty()) { splashctlwidth = shapectldiv.append('xhtml:span').attr("id", "splashctlwidth" + splctlindex); }
    //splashctlwidth.attr("style", "width:45;height:30px;").html("W:");
    //var splashctlinputwidth = shapectldiv.select("#splashctlinputwidth" + splctlindex);
    //if (splashctlinputwidth.empty()) { splashctlinputwidth = shapectldiv.append('xhtml:input').attr("id", "splashctlinputwidth" + splctlindex); }
    //splashctlinputwidth.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", width)
    //    .attr("onchange", "onresizesidesplash(this,0," + index + "," + sideindex + "," + sidecode + ")");
    var splashctlheight = shapectldiv.select("#splashctlheight" + splctlindex);
    if (splashctlheight.empty()) { splashctlheight = shapectldiv.append('xhtml:span').attr("id", "splashctlheight" + splctlindex); }
    splashctlheight.attr("style", "width:45;height:30px;").html("HEIGHT:");
    var splashctlinputheight = shapectldiv.select("#splashctlinputheight" + splctlindex);
    if (splashctlinputheight.empty()) { splashctlinputheight = shapectldiv.append('xhtml:input').attr("id", "splashctlinputheight" + splctlindex); }
    splashctlinputheight.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", height)
        .attr("onchange", "onresizesidesplash(this," + spltype + "," + index + "," + sideindex + "," + sidecode + ")");
    shapecontrolseparator(1, splctlindex);
    shapecontroldelete(ctltype, index, sideindex, sidecode);
}
function drawcutoutcontrols(index, sideindex, mx, my) {
    if (shape.mode != 'print') {
        let side = shape.sides[sideindex];
        let cutout = side.cutouts[index];
        let w = applymminchfact(cutout.w, 2, 2), h = applymminchfact(cutout.h, 2, 2), ctype = cutout.type, holes = cutout.holes, angle = cutout.angle, ctltype = 3,
            cdw = applymminchfact(cutout.dw, 2, 2), cmtype = cutout.measuretype;
        if (cmtype == undefined) { cmtype = 1;}
        shapecontroldiv(mx, my, index, sideindex);
        shapecontrolheader34(ctltype, index);
        let shapectlwidth = shapectldiv.select("#shapectlwidth" + index);
        if (shapectlwidth.empty()) { shapectlwidth = shapectldiv.append('xhtml:span').attr("id", "shapectlwidth" + index); }
        shapectlwidth.attr("style", "width:45;height:20px;").html("Width:");

        let shapectlinputwidth = shapectldiv.select("#shapectlinputwidth" + index);
        if (shapectlinputwidth.empty()) { shapectlinputwidth = shapectldiv.append('xhtml:input').attr("id", "shapectlinputwidth" + index); }
        shapectlinputwidth.attr("style", "width:45px;height:20px;text-align:center;").attr("type", "text").property("value", w).attr("onchange", "onresizecutout(" + index + "," + sideindex + ")");

        let shapectlheight = shapectldiv.select("#shapectlheight" + index);
        if (shapectlheight.empty()) { shapectlheight = shapectldiv.append('xhtml:span').attr("id", "shapectlheight" + index); }
        shapectlheight.attr("style", "width:45;height:20px;").html("Height:");

        let shapectlinputheight = shapectldiv.select("#shapectlinputheight" + index);
        if (shapectlinputheight.empty()) { shapectlinputheight = shapectldiv.append('xhtml:input').attr("id", "shapectlinputheight" + index); }
        shapectlinputheight.attr("style", "width:45px;height:20px;text-align:center;").attr("type", "text").property("value", h).attr("onchange", "onresizecutout(" + index + "," + sideindex + ")");

      
        shapecontrolseparator(2, index);
        if (ctype != 'rc') {
            let shapectlholes = shapectldiv.select("#shapectlholes" + index);
            if (shapectlholes.empty()) { shapectlholes = shapectldiv.append('xhtml:span').attr("id", "shapectlholes" + index); }
            shapectlholes.attr("style", "width:55;height:20px;").html("Holes:");

            let shapectlinputholes = shapectldiv.select("#shapectlinputholes" + index);
            if (shapectlinputholes.empty()) { shapectlinputholes = shapectldiv.append('xhtml:input').attr("id", "shapectlinputholes" + index); }
            shapectlinputholes.attr("style", "width:45px;height:20px;text-align:center;").attr("type", "text").property("value", holes).attr("onchange", "oncutoutholeschange(" + index + "," + sideindex + ")");
        }

        shapecontrolseparator(3, index);
        shapecontrolangle(ctltype, angle, index, sideindex);
        shapecontrolseparator(4, index);
        let shapectlalign = shapectldiv.select("#shapectlalign" + index);
        if (shapectlalign.empty()) { shapectlalign = shapectldiv.append('xhtml:span').attr("id", "shapectlalign" + index); }
        shapectlalign.attr("style", "width:55;height:20px;").html("Align:");

        let shapectlcutoutdist = shapectldiv.select("#shapectlinputdist" + index);
        if (shapectlcutoutdist.empty()) { shapectlcutoutdist = shapectldiv.append('xhtml:input').attr("id", "shapectlcutoutdist" + index); }
        shapectlcutoutdist.attr("style", "width:75px;height:20px;text-align:center;").attr("type", "text").property("value", cdw).attr("onchange", "oncutoutmeasuretype34(" + index + "," + sideindex + ",0)");

        let shapectlleft = shapectldiv.select("#shapectlleft" + index);
        if (shapectlleft.empty()) { shapectlleft = shapectldiv.append('xhtml:i').attr("id", "shapectlleft" + index); }
        shapectlleft.attr("class", "btn-primary fa fa-align-left").attr("style", "margin:5px;padding:5px;cursor:pointer;").attr("onclick", "oncutoutmeasuretype34(" + index + "," + sideindex + ",1)");
        
        let shapectlcenter = shapectldiv.select("#shapectlcenter" + index);
        if (shapectlcenter.empty()) { shapectlcenter = shapectldiv.append('xhtml:i').attr("id", "shapectlcenter" + index); }
        shapectlcenter.attr("class", "btn-warning fa fa-align-center").attr("style", "margin:5px;padding:5px;cursor:pointer;").attr("onclick", "oncutoutmeasuretype34(" + index + "," + sideindex + ",2)");
       
        let shapectlright = shapectldiv.select("#shapectlright" + index);
        if (shapectlright.empty()) { shapectlright = shapectldiv.append('xhtml:i').attr("id", "shapectlright" + index); }
        shapectlright.attr("class", "btn-primary fa fa-align-right").attr("style", "margin:5px;padding:5px;cursor:pointer;").attr("onclick", "oncutoutmeasuretype34(" + index + "," + sideindex + ",3)");
        shapecontrolseparator(5, index);
        shapecontroldelete(ctltype, index, sideindex, -1);
        setcutoutmeasuretypestyles34(index, cmtype);
    }
}
function setcutoutmeasuretypestyles34(index, cmtype) {   
    let shapectlleft = shapectldiv.select("#shapectlleft" + index);
    shapectlleft.attr("class", "btn-primary fa fa-align-left");
    let shapectlcenter = shapectldiv.select("#shapectlcenter" + index);
    shapectlcenter.attr("class", "btn-primary fa fa-align-center")
    let shapectlright = shapectldiv.select("#shapectlright" + index);
    shapectlright.attr("class", "btn-primary fa fa-align-right");
    if (cmtype == 1) {        
        shapectlleft.attr("class", "btn-warning fa fa-align-left");
    } else if (cmtype == 2) {       
        shapectlcenter.attr("class", "btn-warning fa fa-align-center")
    } else if (cmtype == 3) {        
        shapectlright.attr("class", "btn-warning fa fa-align-right")
    }
}
function drawcornersplashcontrols(mx, my) {
    var index = edge.index, sindex = shape.index, ctltype = 6, w = edge.w, h = edge.h;
    shapecontroldiv(mx, my, index);
    shapecontrolheader34(ctltype, index);
    var cornersplctlheight = shapectldiv.select("#cornersplctlheight" + sindex + index);
    if (cornersplctlheight.empty()) { cornersplctlheight = shapectldiv.append('xhtml:span').attr("id", "cornersplctlheight" + sindex + index); }
    cornersplctlheight.attr("style", "width:45;height:30px;").html("HEIGHT:");
    var cornersplctlinputheight = shapectldiv.select("#cornersplctlinputheight" + sindex + index);
    if (cornersplctlinputheight.empty()) { cornersplctlinputheight = shapectldiv.append('xhtml:input').attr("id", "cornersplctlinputheight" + sindex + index); }
    cornersplctlinputheight.attr("style", "width:45px;height:30px;text-align:center;").attr("type", "text").property("value", h).attr("onchange", "setcorneredgesplheight(" + index + ")");
    shapecontrolseparator(1, sindex + index);
    shapecontroldelete(ctltype, index, -1);
}
function drawshapeseamcontrols(index, sideindex, spseamindex, spsideindex, mx, my, seamtype) {
    //console.log(index, sideindex, spseamindex, spsideindex, mx, my, seamtype, shape.mode, shape.index, shape.spindex);
    if (shape.mode == 'slabpart') {
        let sindex = shape.index, ctltype = 7;
        shapecontroldiv(mx, my, index);
        shapecontrolheader34(ctltype, index);     
        let shapectlsplit = shapectldiv.select("#shapectlsplit" + index);
        if (shapectlsplit.empty()) { shapectlsplit = shapectldiv.append('xhtml:div').attr("id", "shapectlsplit" + index); }
        shapectlsplit.attr("class", "btn-info fa fa-scissors").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:105px;padding:4px;").html("&nbsp;&nbsp;Seam Shape").attr("onclick", "ActionSeamSlabpart32(" + index + "," + sideindex + "," + spseamindex + "," + spsideindex + "," + seamtype + ")");
        shapecontrolseparator(1, index);
        let shapectldelete = shapectldiv.select("#shapectldelete" + index);
        if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
        shapectldelete.attr("class", "btn-default").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html('X Delete Seam');
        shapectldelete.attr("onclick", "ActionDeleteSeam32(" + index + "," + sideindex + "," + spseamindex + "," + spsideindex + "," + seamtype + ")");
    }
}
function drawsplashseamcontrols(index, splashindex, sideindex, mx, my) {
    if (shape.mode == 'shape') {
        let sindex = shape.index;
        shapecontroldiv(mx, my, index);
        shapecontrolheader34(ctltype, index);
        shapecontrolseparator(1, index);
        let shapectldelete = shapectldiv.select("#shapectldelete" + index);
        if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
        shapectldelete.attr("class", "btn-default").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html('X Delete Seam');
        shapectldelete.attr("onclick", "ondeletesplashseam(" + index + "," + splashindex + "," + sideindex + "," + sindex + ")");
    }
}
function drawslabsplashseamcontrols(index, spseamindex, spsplashindex, mx, my) {
    //console.log(index, spseamindex, spsplashindex, mx, my, shape.mode);
    let ctltype = 8;
    shape.mode = 'slabpart';
    shapecontroldiv(mx, my, index);
    shapecontrolheader34(ctltype, index);
    shapecontrolg.attr('transform', slabsplashouterg.attr('transform'));
    let shapectlsplit = shapectldiv.select("#shapectlsplit" + index);
    if (shapectlsplit.empty()) { shapectlsplit = shapectldiv.append('xhtml:div').attr("id", "shapectlsplit" + index); }
    shapectlsplit.attr("class", "btn-info fa fa-scissors").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:105px;padding:4px;").html("&nbsp;&nbsp;Seam Splash")
        .attr("onclick", "ActionSeamSlabSplash32(" + index + "," + spseamindex + "," + spsplashindex + ")");
    shapecontrolseparator(1, index);
    let shapectldelete = shapectldiv.select("#shapectldelete" + index);
    if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
    shapectldelete.attr("class", "btn-default").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html('X Delete Seam');
    shapectldelete.attr("onclick", "ActionDeleteSlabSplashSeam32(" + +index + "," + spseamindex + "," + spsplashindex + ")");
}
function drawslabsplashcontrols(index, mx, my) {
    //console.log(index, spseamindex, spsplashindex, mx, my, shape.mode);
    let x = shapeslabsplash.x, y = shapeslabsplash.y, w = applymminchfact(shapeslabsplash.width, 1, 2), h = applymminchfact(shapeslabsplash.height, 1, 2), angle = shapeslabsplash.angle, splindex = shapeslabsplash.splindex;

    let ctltype = 9;
    shape.mode = 'slabpart';
    shapecontroldiv(mx, my, index);
    shapecontrolheader34(ctltype, index);
    shapecontrolg.attr('transform', slabsplashouterg.attr('transform'));

    let shapectlangle = shapectldiv.select("#shapectlangle" + index);
    if (shapectlangle.empty()) { shapectlangle = shapectldiv.append('xhtml:span').attr("id", "shapectlangle" + index); }
    shapectlangle.attr("style", "width:55;height:20px;color:orange;text-align:center;cursor:pointer;").html("Rotate:");

    let shapectlminus = shapectldiv.select("#shapectlminus" + index);
    if (shapectlminus.empty()) { shapectlminus = shapectldiv.append('xhtml:span').attr("id", "shapectlminus" + index); }
    shapectlminus.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;-&nbsp;&nbsp;").attr("onclick", "onrotateslabsplash(-1," + index + ",22.5)");;

    let shapectlinputangle = shapectldiv.select("#slabsplashctlinputangle" + index);
    if (shapectlinputangle.empty()) { shapectlinputangle = shapectldiv.append('xhtml:input').attr("id", "slabsplashctlinputangle" + index); }
    shapectlinputangle.attr("style", "width:45px;height:17px;text-align:center;").attr("type", "text").attr("readonly", "true").property("value", angle);

    let shapectlplus = shapectldiv.select("#shapectlplus" + index);
    if (shapectlplus.empty()) { shapectlplus = shapectldiv.append('xhtml:span').attr("id", "shapectlplus" + index); }
    shapectlplus.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;+&nbsp;&nbsp;").attr("onclick", "onrotateslabsplash(1," + index + ",22.5)");

    if (splindex != 0) {
        shapecontrolseparator(1, index);
        let shapectldelete = shapectldiv.select("#shapectldelete" + index);
        if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
        shapectldelete.attr("class", "btn-default").attr("style", "margin-left:50px;cursor:pointer;text-align:center;width:125px;color:red;").html('X Delete Splash');
        shapectldelete.attr("onclick", "ActionDeleteSlabSplash32(" + index + ")");
    }
}
function drawslabsplashcontrols11(index, mx, my) {
    let x = shapeslabsplash.x, y = shapeslabsplash.y, w = applymminchfact(shapeslabsplash.width, 1, 2), h = applymminchfact(shapeslabsplash.height, 1, 2), angle = shapeslabsplash.angle, splindex = shapeslabsplash.splindex;

    slabpartcontrolsg = mslabpartsg.select("#slabpartcontrolsg"); if (slabpartcontrolsg.empty()) { slabpartcontrolsg = mslabpartsg.append("g").attr("id", "slabpartcontrolsg"); }

    shapecontrolg = slabpartcontrolsg.select("#slabpartcontrolg" + index);
    if (shapecontrolg.empty()) { shapecontrolg = slabpartcontrolsg.append("g").attr("id", "slabpartcontrolg" + index); }

    var shapectlfo = shapecontrolg.select("#shapectlfo" + index);
    if (shapectlfo.empty()) { shapectlfo = shapecontrolg.append("foreignObject").attr("id", "shapectlfo" + index); }
    shapectlfo.attr("x", mx).attr("y", my).attr("width", "200px").attr("height", "100px");
    shapectldiv = shapectlfo.select("#shapectldiv" + index);
    if (shapectldiv.empty()) { shapectldiv = shapectlfo.append('xhtml:div').attr("id", "shapectldiv" + index); }
    shapectldiv.attr("style", "width:145;background-color:lightyellow;border:1px solid blue;padding:5px;border-radius:5px;line-height: 25px; vertical-align:middle;");
    shapecontrolg.attr('transform', slabsplashouterg.attr('transform'));

    var shapectlminus = shapectldiv.select("#shapectlminus" + index);
    if (shapectlminus.empty()) { shapectlminus = shapectldiv.append('xhtml:span').attr("id", "shapectlminus" + index); }
    shapectlminus.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;-&nbsp;&nbsp;").attr("onclick", "onrotateslabsplash(-1," + index + ",22.5)");;

    var shapectlinputangle = shapectldiv.select("#slabsplashctlinputangle" + index);
    if (shapectlinputangle.empty()) { shapectlinputangle = shapectldiv.append('xhtml:input').attr("id", "slabsplashctlinputangle" + index); }
    shapectlinputangle.attr("style", "width:45px;height:17px;text-align:center;").attr("type", "text").attr("readonly", "true").property("value", angle);

    var shapectlplus = shapectldiv.select("#shapectlplus" + index);
    if (shapectlplus.empty()) { shapectlplus = shapectldiv.append('xhtml:span').attr("id", "shapectlplus" + index); }
    shapectlplus.attr("class", "btn-primary").attr("style", "cursor:pointer;").html("&nbsp;&nbsp;+&nbsp;&nbsp;").attr("onclick", "onrotateslabsplash(1," + index + ",22.5)");

    if (splindex != 0) {
        shapecontrolseparator(1, index);
        var shapectldelete = shapectldiv.select("#shapectldelete" + index);
        if (shapectldelete.empty()) { shapectldelete = shapectldiv.append('xhtml:div').attr("id", "shapectldelete" + index); }
        shapectldelete.attr("style", "margin-left:50px;width:55;height:20px;color:red;text-align:center;cursor:pointer;").html("X Delete").attr("onclick", "ActionDeleteSlabSplash32(" + index + ")");
    }
}
function drawmessagecontrols(index, mx, my, text, header, smode) {
    let ctltype = 0;
    shapecontroldiv(mx, my, index);
    shapecontrolheader34(ctltype, index);
    var shapectlmsgheader = shapectldiv.select("#shapectlmsgheader" + index);
    if (shapectlmsgheader.empty()) { shapectlmsgheader = shapectldiv.append('xhtml:div').attr("id", "shapectlmsgheader" + index); }
    shapectlmsgheader.attr("style", "width:205;height:30px;color:red;text-align:center;cursor:pointer;").html(header);   
    var shapectltext = shapectldiv.select("#shapectltext" + index);
    if (shapectltext.empty()) { shapectltext = shapectldiv.append('xhtml:div').attr("id", "shapectltext" + index); }
    shapectltext.attr("style", "width:205;height:70px;color:blue;text-align:center;cursor:pointer;").html(text);
}
function showsplashside() {
    if (drawmode == 4) {//splash type
        d3.select(this).attr("class", "shapesideblue");
    }
}
function hidesplashside() {
    d3.select(this).attr("class", "splashside");
}


function parsetoinches(val) {
    //if ($.isNumeric(val)) {
    //    if(val.indexOf('.')!=-1){

    //    } else if (val.indexOf('/') != -1) {

    //    }
    //}
}
