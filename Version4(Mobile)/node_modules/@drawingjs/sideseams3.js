function drawsideseams(index) {
    var side = shape.sides[index];    
    if (side != undefined) {
        if (side.seams != undefined) {
            for (var j = 0; j < side.seams.length; j++) {
                //  console.log(JSON.stringify(side.seams[j]));
                if (side.seams[j].isactive == 1) {
                    setsideseam(0, 0, j, index, side.seams[j].type);
                    drawsideseam(j, index, side.seams[j].type);
                }
            }
        }
    }
}
function initsideseam(x, y, sideindex, type) {    
    var side = shape.sides[sideindex];
    var seam = {}; index = side.seams.length;
    seam.index = index, seam.type = type, seam.sindex = shape.index, seam.sideindex = sideindex, seam.spsideindex = sideindex, seam.spseamindex = index,
    seam.x = x, seam.y = y, seam.w = 0, seam.h = 0, seam.x1 = 0, seam.y1 = 0, seam.x2 = 0, seam.y2 = 0, seam.sx = 0, seam.sy = 0, seam.split = 0, seam.isactive = 1;
    side.seams.push(seam);
}
function setsideseam(x, y, index, sideindex, type) {    
    let side = shape.sides[sideindex];   
    if (side !== undefined) {
        if (index == -1) {
            index = side.seams.length, initsideseam(x, y, sideindex, type);
        }
        let seam = side.seams[index];      
        if (seam != undefined) {
            let smtype = seam.type;
            if (seam.index != index) { seam.index = index; } //reindex 
            if (x > 0 && y > 0) { seam.x = x, seam.y = y; }                     
        }
    }
    return index;
}
function onsetsideseam(x, y, index, sideindex, sindex, type) {  
    let side = shape.sides[sideindex];
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2;
    let angle = calclineangle2(x1, y1, x2, y2, 'setsideseam');   
    if (index==-1 && shape.sides.length > 1) {
        if (angle == 0 || angle ==180) {
            if (type == 3) { return;}
        } else if (angle ==90 || angle == 270) {
            if (type == 3) { type = 1; } else if (type == 1) { return;}            
        } else {
            if (type == 3 || type == 1) { type = 1; }
        }
    }   
    if (shape.mode == 'shape') {
        onsetshapesideseam(x, y, index, sideindex, sindex, type);
        onsetslabpartsideseam(x, y, index, sideindex, sindex, type);     
    }
    else if (shape.mode == 'slabpart') {
        onsetslabpartsideseam1(x, y, index, sideindex, sindex, type);
        onsetshapesideseam1(x, y, index, sideindex, sindex, type);
    }
}
function onsetshapesideseam(x, y, index, sideindex, sindex, type) {    
    index = setsideseam(x, y, index, sideindex, type);
    drawsideseam(index, sideindex, type);
}
function onsetshapesideseam1(x, y, index, sideindex, sindex, type) {
    let spindex = shape.spindex;
    initshapegroups(spindex, 'shape', 'onsetshapesideseam1');
    index = setsideseam(x, y, index, sideindex, type);
    drawsideseam(index, sideindex, type);
    initshapegroups(sindex, 'slabpart', 'onsetshapesideseam1');
}
function onsetslabpartsideseam(x, y, index, sideindex, sindex, type) {
    let spindex = slabpartindex(sindex);
    if (spindex != -1) {
        initshapegroups(spindex, 'slabpart', 'onsetslabpartsideseam');
        index = setsideseam(x, y, index, sideindex, type);
        drawsideseam(index, sideindex, type);
        initshapegroups(sindex, 'shape', 'onsetslabpartsideseam');
    }
}
function onsetslabpartsideseam1(x, y, index, sideindex, sindex, type) {
    index = setsideseam(x, y, index, sideindex, type);
    drawsideseam(index, sideindex, type);
}
function onseamshapesideseam(index, sideindex, sindex) {
    let side = shapes[sindex].sides[sideindex];
    if (side != undefined) {       
        let sideseam = side.seams[index];
        if (sideseam != null) {
            sideseam.split = 1;
        }
    }
}
function unsplitshapeseams(sindex) {
    for (let i = 0; i < shape.sides.length; i++) {
        unsplitshapesideseams(i, sindex);
    }
}
function unsplitshapesideseams(sideindex, sindex) {
    if (shapes[sindex] != undefined) {
        let side = shapes[sindex].sides[sideindex];
        if (side != undefined) {
            for (let i = 0; i < side.seams.length; i++) {
                side.seams[i].split = 0;
            }
        }
    }
}
function onshapesideseamcontextmenu() {
    removeshapetools();
    let m = d3.mouse(this);
    d3.event.preventDefault();
    let index = parseInt(this.getAttribute("index"));
    let sideindex = parseInt(this.getAttribute("sideindex"));
    let sindex = parseInt(this.getAttribute("sindex"));
    let mode = this.getAttribute("smode");   
    if (mode != 'print') {
        initshapegroups(sindex, mode, 'onshapesideseamcontextmenu');
        let side = shape.sides[sideindex];
        let seam = side.seams[index];       
        if (shapeslabpartcount(sindex) < 2) { drawshapeseamcontrols(index, seam.spseamindex, sideindex, m[0], m[1], seam.type); }
    }
}
function ondeletesideseam(index, spseamindex, sideindex, sindex) {
    removeshapetools();
    if (shape.mode == 'shape') {
        ondeleteshapesideseam(index, sideindex, sindex);
        ondeleteslabpartsideseam(index, sideindex, sindex);
    }
    else if (shape.mode == 'slabpart') {
        ondeleteslabpartsideseam1(index, sideindex, sindex);
        ondeleteshapesideseam1(index, sideindex, sindex);
    }
}
function ondeleteshapesideseam(index, sideindex, sindex) {
    if (shapeslabpartcount(sindex) < 2 ) {
        deletesideseam(index, sideindex);
        removesideseam(index, sideindex);
        ActionUpdateSlabParts();
    }
}
function ondeleteshapesideseam1(index, sideindex, sindex) {
    if (shapeslabpartcount(sindex) < 2) {
        deletesideseam(index, sideindex);
        removesideseam(index, sideindex);
        ActionUpdateSlabParts();
    }
}
function ondeleteslabpartsideseam(index, sideindex, sindex) {
    if (shapeslabpartcount(sindex) < 2) {
        let spindex = slabpartindex(sindex);
        if (spindex != -1) {
            initshapegroups(spindex, 'slabpart', 'onsetslabpartsideseam');
            deletesideseam(index, sideindex);
            removesideseam(index, sideindex);
            initshapegroups(sindex, 'shape', 'onsetslabpartsideseam');
        }
    }
}
function ondeleteslabpartsideseam1(index, sideindex, sindex) {
    let spindex = shape.spindex;
    initshapegroups(spindex, 'shape', 'onsetshapesideseam1');
    deletesideseam(index, sideindex);
    removesideseam(index, sideindex);
    initshapegroups(sindex, 'slabpart', 'onsetshapesideseam1');    
}
function deletesideseam(index, sideindex) {    
    let side = shape.sides[sideindex];
    if (side != undefined) {      
        let seam = side.seams[index];
        if (seam != undefined) {
            seam.isactive = 0;           
        }
    }
}
function removesideseam(index, sideindex) {
    let seamindex = shape.index + "" + sideindex + "" + index;
    if (seamsg != undefined) {
        let seamg = seamsg.select("#" + shape.mode + "seamg" + seamindex);
        if (seamg != undefined) { seamg.remove(); }
        let seammarkerg = seamsg.select("#" + shape.mode + "smarkerg" + seamindex);
        if (seammarkerg != undefined) { seammarkerg.remove(); }
    }
}
function drawsideseam(index, sideindex, type) {    
    //type - 1: vertical,2:angle, 3:horizontal;
    if (type == 1) { drawshapesideseam1(index, sideindex); }
    else if (type == 2) { drawshapesideseam2(index, sideindex); }
    else if (type == 3) { drawshapesideseam3(index, sideindex); }
}
function drawshapesideseam1(index, sideindex) {
    var side = shape.sides[sideindex];
    var seam = side.seams[index];
    // console.log(index, sideindex, side.seams.length);
    if (seam != undefined) {
        var smtype = seam.type, x = seam.x, y = seam.y, h = seam.h, x1 = 0, y1 = 0, x2 = 0, y2 = 0, dw = 0;
        var x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, asign = -1, dsign = 1;
        var mx1 = 0, my1 = 0, mx2 = 0, my2 = 0, mtext = '', mtx = 0, mty = 0;
        let npt1 = calcverticalvectorpoint(x11, y11, x12, y12, x, y);
        x1 = npt1.dx, y1 = npt1.dy;
        let ipt = calcverticalvectorpoint(x21, y21, x22, y22, x1, y1);
        x2 = ipt.dx, y2 = ipt.dy;
        seam.x1 = x1, seam.y1 = y1, seam.x2 = x2, seam.y2 = y2;
        mx1 = x11, my1 = y11, mx2 = x1; my2 = y1, mtx = (mx1 + mx2) / 2, mty = (my1 + my2) / 2;
        mtext = (calchyplen(mx1, my1, mx2, my2) / scale).toFixed();
        drawshapesideseamline(index, sideindex, x1, y1, x2, y2);
        drawseammarkerline(index, sideindex, mx1, my1, mx2, my2, mtx, mty, mtext);
    }
}
function drawshapesideseam2(index, sideindex) {
    var side = shape.sides[sideindex];
    var seam = side.seams[index];
    var smtype = seam.type, x = seam.x, y = seam.y, h = seam.h, x1 = 0, y1 = 0, x2 = 0, y2 = 0;
    var x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, asign = -1, dsign = 1;
    var mx1 = 0, my1 = 0, mx2 = 0, my2 = 0, mtext = '', mtx = 0, mty = 0;
    x1 = x12, y1 = y12, x2 = x22, y2 = y22;
    drawshapesideseamline(index, sideindex, x1, y1, x2, y2);
}
function drawshapesideseam3(index, sideindex) {
    var side = shape.sides[sideindex];
    var seam = side.seams[index];
    // console.log(index, sideindex, side.seams.length);
    if (seam != undefined) {
        var smtype = seam.type, x = seam.x, y = seam.y, h = seam.h, x1 = 0, y1 = 0, x2 = 0, y2 = 0, dw = 0;
        var x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, asign = -1, dsign = 1;
        var mx1 = 0, my1 = 0, mx2 = 0, my2 = 0, mtext = '', mtx = 0, mty = 0;
        let npt1 = calcverticalvectorpoint(x11, y11, x12, y12, x, y);
        x1 = npt1.dx, y1 = npt1.dy, x2 = x, y2 = y;
        dw = calchyplen(x1, y1, x2, y2);
        let npt2 = offsetline(x11, y11, x12, y12, -dw);
        x1 = npt2.dx1, y1 = npt2.dy1, x2 = npt2.dx2, y2 = npt2.dy2;
        seam.x1 = x1, seam.y1 = y1, seam.x2 = x2, seam.y2 = y2;
        mx1 = x11, my1 = y11, mx2 = x1; my2 = y1, mtx = (mx1 + mx2) / 2, mty = (my1 + my2) / 2;
        mtext = (calchyplen(mx1, my1, mx2, my2) / scale).toFixed();
        drawshapesideseamline(index, sideindex, x1, y1, x2, y2);
        drawseammarkerline(index, sideindex, mx1, my1, mx2, my2, mtx, mty, mtext);
    }
}

function drawshapesideseamline(index, sideindex, x1, y1, x2, y2) {   
    var eclass = "shapeseam";
    var seamindex = shape.index + "" + sideindex + "" + index;
    var seamg = seamsg.select("#" + shape.mode + "seamg" + seamindex);
    if (seamg.empty()) { seamg = seamsg.append("g").attr("id", shape.mode + "seamg" + seamindex); }
    var seamline = seamg.select("#seam" + seamindex);
    if (seamline.empty()) { seamline = seamg.append("line").attr("id", "seam" + seamindex); }
    seamline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", eclass).attr("index", index).attr("sideindex", sideindex).attr("sindex", shape.index)
    .attr("smode", shape.mode).on('contextmenu', onshapesideseamcontextmenu);
    if (shape.mode != 'print') { seamline.call(seamdrag); }
    var seambandline = seamg.select("#seamband" + seamindex);
    if (seambandline.empty()) { seambandline = seamg.append("line").attr("id", "seamband" + seamindex); }
    seambandline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("index", index).attr("sideindex", sideindex).attr("sindex", shape.index)
    .attr("smode", shape.mode).on('contextmenu', onshapesideseamcontextmenu).on("mouseover", showshapesideseam).on("mouseout", hideshapesideseam);
    if (shape.mode != 'print') { seambandline.call(seamdrag); }
    seambandline.attr("style", "stroke:" + shape.color).attr("scolor", shape.color).style("stroke-opacity", "0.1").style("stroke-width", "20").on("mouseover", showshapesideseam).on("mouseout", hideshapesideseam);
}
function drawseammarkerline(index, sideindex, x1, y1, x2, y2, mtx, mty, mtext) {
    var seamindex = shape.index + "" +  sideindex + "" + index;
    var seammarkerg = seamsg.select("#" + shape.mode + "smarkerg" + seamindex);
    if (seammarkerg.empty()) { seammarkerg = seamsg.append("g").attr("id", shape.mode + "smarkerg" + seamindex); }
    if (!seammarkerg.empty()) {
        seammarkerg.attr("index", index).attr("sideindex", sideindex).attr("sindex", shape.index).attr("smode", shape.mode);
        var markerline = seammarkerg.select("#msline" + seamindex);
        if (markerline.empty()) { markerline = seammarkerg.append("line").attr("id", "msline" + seamindex); }
        var arrowstart = shape.mode == 'print' ? "url(#printtriangle-start)" : "url(#triangle-start)";
        var arrowend = shape.mode == 'print' ? "url(#printtriangle-end)" : "url(#triangle-end)";
        markerline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", "seamarrow").attr("marker-start", arrowstart).attr("marker-end", arrowend);
        var smarkertext = seammarkerg.select("#mstext" + seamindex);
        if (smarkertext.empty()) { smarkertext = seammarkerg.append("text").attr("id", "mstext" + seamindex); }
        smarkertext.attr("x", mtx).attr("y", mty).text(mtext + '"');
        seammarkerg.style("opacity", "1");
    }
}
function seamdragstarted() {
    let index = parseInt(this.getAttribute("index"));
    let sideindex = parseInt(this.getAttribute("sideindex"));
    let sindex = parseInt(this.getAttribute("sindex"));
    let mode = this.getAttribute("smode");   
    if (mode != 'part') {
        initshapegroups(sindex, mode, 'seamdragstarted');
        var side = shape.sides[sideindex];
        var seam = side.seams[index];       
        if (shapeslabpartcount(sindex) < 2 && seam.type!=2) {
            dragdx = d3.event.x - seam.x; dragdy = d3.event.y - seam.y;
            removeshapetools();
            bdrag = true;
            drawlogservice.beforeupdate(shape, 'seamdragstarted', 7);
        }
    }
}
function seamdragged() {
    if (bdrag) {
        var index = parseInt(this.getAttribute("index"));
        var sideindex = parseInt(this.getAttribute("sideindex"));
        var sindex = parseInt(this.getAttribute("sindex"));
        var mode = this.getAttribute("smode");
        var side = shape.sides[sideindex];
        var seam = side.seams[index];
        var cx = d3.event.x - dragdx, cy = d3.event.y - dragdy;
        seam.x = cx; seam.y = cy;
        onsetsideseam(cx, cy, index, sideindex, sindex, seam.type);
    }
}
function seamdragended() {
    if (bdrag) {
        resetdragvars('seamdragended');
        bdrag = false;
        var index = parseInt(this.getAttribute("index"));
        var sideindex = parseInt(this.getAttribute("sideindex"));
        var seamindex = sideindex + "" + index;
        var seammarkerg = seamsg.select("#smarkerg" + seamindex);
        if (!seammarkerg.empty()) { seammarkerg.style("opacity", "0"); }
        ActionUpdateShape();
        ActionUpdateSlabParts();
        drawlogservice.update(shape, 'seamdragended', 7);
    }  
}
function showshapesideseam() {
    if (!bdrag) {
        var index = parseInt(this.getAttribute("index"));
        var sideindex = parseInt(this.getAttribute("sideindex"));
        var sindex = parseInt(this.getAttribute("sideindex"));
        var smode = this.getAttribute("smode");
        var seamindex = sindex + "" + sideindex + "" + index;        
        var seammarkerg = seamsg.select("#" + smode + "smarkerg" + seamindex);
        if (!seammarkerg.empty()) { seammarkerg.style("opacity", "1"); }
        //d3.select(this).attr("class", "shapesideblue");
        d3.select(this).attr("style", "stroke:" + 'blue').style("stroke-opacity", "1.0").style("stroke-width", "15");
    }
}
function hideshapesideseam() {
    if (!bdrag) {
        var index = parseInt(this.getAttribute("index"));
        var sideindex = parseInt(this.getAttribute("sideindex"));
        var sindex = parseInt(this.getAttribute("sideindex"));
        var smode = this.getAttribute("smode");
        var seamindex = sindex + "" + sideindex + "" + index;
        var seammarkerg = seamsg.select("#" + smode + "smarkerg" + seamindex);
        if (!seammarkerg.empty()) { seammarkerg.style("opacity", "0"); }
        //d3.select(this).attr("class", "shapeseam");
        let scolor = d3.select(this).attr('scolor');
        d3.select(this).attr("style", "stroke:" + scolor).style("stroke-opacity", "0.1").style("stroke-width", "15");
    }
}
