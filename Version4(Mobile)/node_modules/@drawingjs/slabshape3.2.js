/*Drawing methods*/
function drawslabshapes(index, source) {
    mslaby = 30;
    let material = getmaterialbyindex(index);
    if (material != undefined) {
        materialid = material.ID;
        let mslablist = getmatslablistbyindex(index);       
        if (mslablist != null) {
            for (let i = 0; i < mslablist.length; i++) {
                if (mslablist[i].IsActive == 1) {
                    mslablist[i].Color = material.Description;
                    mslablist[i].materialid = materialid;
                    let slabqty = mslablist[i].NoOfSlabs;
                    //console.log(i, mslablist[i].ID, slabqty, mslablist[i].Path)
                    for (let j = 0; j < slabqty; j++) {
                        drawslabrectshape(i, j, mslablist[i], index, source);
                        zoomslabshape(j, mslablist[i].ID);
                    }
                }
            }
        }
        resetmatsvg();
    }
}
function zoomslabshapes(index) {   
    let mslablist = getmatslablistbyindex(index);
    if (mslablist != null) {
        for (let i = 0; i < mslablist.length; i++) {
            if (mslablist[i].IsActive == 1) {              
                let slabqty = mslablist[i].NoOfSlabs;               
                for (let j = 0; j < slabqty; j++) {                    
                    zoomslabshape(j, mslablist[i].ID);
                }
            }
        }
    }
}
function zoomslabshape(slabsrno, slabid) {
    let mslabindex = slabid + "" + slabsrno;   
    let mslabg = mslabsg.select("#mslabg" + mslabindex);
    mslabg.attr('transform', 'scale(' + lzscale + ')');
}
function onuploadslabimage32() {
    let source = 'onuploadslabimage32';
    let index = parseInt(this.getAttribute("index"));
    let slabid = parseInt(this.getAttribute("slabid"));
    let slabsrno = parseInt(this.getAttribute("slabsrno"));
    ActionUploadSlabImage34(index, slabid, source);
}
function drawslabrectshape(index, slabsrno, mslab, matindex, source) {
    let slabid = mslab.ID, mslabw = applymminchfact(mslab.Width, 1, 2), mslabh = applymminchfact(mslab.Length, 1, 2);
    let lnindex = '', x1 = 0, y1 = 0, x2 = 0, y2 = 0, dx = 10, mx = 0, my = 0, mtext = '', mtlen = 0;  
    if (mslabw > 0 && mslabh > 0) {
        lnindex = 1, x1 = mslabx, y1 = mslaby - dx, x2 = x1 + mslabw, y2 = y1;
        if (mslab.Color!=null && mslab.Color.length > 0) { mtext = mslab.Color + " - "; }
        if (mslab.StockNo!=null && mslab.StockNo.length > 0) { mtext = mslab.StockNo + " - "; }
        if (mslab.BlockNo != null && mslab.BlockNo.length > 0) { mtext = mslab.BlockNo + " - "; }
        let metric = getcompanyunittype();
        let txt = metric == 0 ? '"' : 'MM';
        mtext += applymminchfact(mslabw, 2, 2) + txt;
       // if (slab.extslabno != null && slab.extslabno.length > 0) { mtext = "#" + slab.extslabno + "-" + mtext; }
       // mtlen = markertext.node().getComputedTextLength();
        mx = (x1 + x2) / 2, my = y1;        
        drawslabrect(index, slabsrno, slabid, mslabx, mslabw, mslabh, matindex);
        if (layoutmode == 2) { drawslabrectimage(index, slabsrno, slabid, mslabx, mslabw, mslabh, mslab, matindex); }
        drawslabrectmarkers(lnindex, index, slabsrno, slabid, x1, y1, x2, y2, mx, my, mtext, matindex);
        lnindex = 2, x1 = mslabx + mslabw + dx, y1 = mslaby - dx, x2 = x1, y2 = y1 + mslabh;
        mx = x1, my = (y1 + y2) / 2;
        mtext = applymminchfact(mslabh, 2, 2) + txt;
        drawslabrectmarkers(lnindex, index, slabsrno, slabid, x1, y1, x2, y2, mx, my, mtext, matindex);
    }
    if ((mslabx + mslabw) > slabpartx) { slabpartx = (mslabx + mslabw + 30); }
    mslaby += (mslabh + 30);
}
function drawslabrect(slabindex, slabsrno, slabid, mslabx, mslabw, mslabh, matindex) {
    let mslabindex = slabid + "" + slabsrno;
    let mslabg = mslabsg.select("#mslabg" + mslabindex);
    if (mslabg.empty()) { mslabg = mslabsg.append("g").attr("id", "mslabg" + mslabindex); } else { mslabg.selectAll('*').remove(); }
    let mslabpathg = mslabg.select("#mslabpathg" + mslabindex);
    if (mslabpathg.empty()) { mslabpathg = mslabg.append("g").attr("id", "mslabpathg" + mslabindex);}
    mslabpathg.attr("x", mslabx).attr("y", mslaby).attr("width", mslabw).attr("height", mslabh).attr("slabindex", slabindex).attr("slabsrno", slabsrno).attr("slabid", slabid).attr("matindex", matindex).attr("class", "slabshape");
    let slabrect = mslabpathg.select("#slabrect" + mslabindex);
    if (slabrect.empty()) { slabrect = mslabpathg.append("rect").attr("id", "slabrect" + mslabindex); }
    slabrect.attr("x", mslabx).attr("y", mslaby).attr("width", mslabw).attr("height", mslabh).attr("slabindex", slabindex).attr("slabsrno", slabsrno).attr("slabid", slabid).attr("matindex", matindex).attr("class", "slabshape");
    if (layoutmode != 2) { slabrect.style("fill-opacity", "0.7"); }
}
function drawslabrectimage(slabindex, slabsrno,  slabid, mslabx, mslabw, mslabh, mslab, matindex) {
    let mslabindex = slabid + "" + slabsrno;
    if (mslab.Path != null && mslab.Path.length > 0) {
        let mslabg = mslabsg.select("#mslabg" + mslabindex); if (mslabg.empty()) { mslabg = mslabsg.append("g").attr("id", "mslabg" + mslabindex); } else { mslabg.selectAll('*').remove(); }
        let mslabpathg = mslabg.select("#mslabpathg" + mslabindex);
        if (mslabpathg.empty()) { mslabpathg = mslabg.append("g").attr("id", "mslabpathg" + mslabindex).attr("slabid", slabid).attr("matindex", matindex); }
        mslabpathg.attr("x", mslabx).attr("y", mslaby).attr("width", mslabw).attr("height", mslabh).attr("slabindex", slabindex).attr("slabsrno", slabsrno).attr("slabid", slabid).attr("matindex", matindex).attr("class", "slabshape");
        let slabptrnimmage = mslabpathg.select("#slabptrnimg" + mslabindex);
        let slabimgpath = mslab.Path;
        if (mslab.ValidPath == -2) {//product
            slabimgpath = contentPath + "Product/" + mslab.Path;
        } else if (slabimgpath.indexOf('.jpg') == -1) {//inventory
            slabimgpath = contentPath + "Inventory/" + mslab.Path + '.jpg';
        }
        //if (slabimgpath.indexOf('.jpg') == -1) { slabimgpath = contentPath + "Inventory/" + slab.Path + '.jpg'; }
        if (slabptrnimmage.empty()) {
            let d = new Date(), extn = d.getMilliseconds();
            slabptrnimmage = mslabpathg.append("image").attr("id", "slabptrnimg" + mslabindex).attr("x", mslabx).attr("y", mslaby).attr("width", mslabw).attr("height", mslabh)
                .attr("slabindex", slabindex).attr("slabid", slabid).attr("matindex", matindex).attr("preserveAspectRatio", "xMinYMin slice").attr("href", slabimgpath + "?" + extn);
        }
    }
}
function drawslabrectmarkers(lnindex, slabindex, slabsrno, slabid, x1, y1, x2, y2, mx, my, mtext, matindex) {
    let mslabindex = slabid + "" + slabsrno;
    let mlnindex = mslabindex + "" + lnindex;
    let mslabg = mslabsg.select("#mslabg" + mslabindex);
    let mslabmarkersg = mslabg.select("#mslabmarkersg" + mslabindex);
    if (mslabmarkersg.empty()) { mslabmarkersg = mslabg.append("g").attr("id", "mslabmarkersg" + mslabindex); }
    let markerline = mslabmarkersg.select("#mline" + mlnindex);
    if (markerline.empty()) { markerline = mslabmarkersg.append("line").attr("id", "mline" + mlnindex); }
    markerline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", "arrow").attr("marker-start", "url(#triangle-start)").attr("marker-end", "url(#triangle-end)");
    let markertext = mslabmarkersg.select("#mtext" + mlnindex);
    if (markertext.empty()) { markertext = mslabmarkersg.append("text").attr("id", "mtext" + mlnindex); }
    markertext.attr("x", mx).attr("y", my).attr("slabindex", slabindex).attr("slabsrno", slabsrno).attr("slabid", slabid).attr("matindex", matindex).text(mtext);
    if (lnindex == 1) { markertext.attr("style", "cursor:pointer;fill:blue;text-decoration:underline").on("click", onuploadslabimage34);}
}

function onuploadslabimage34() {
    let quoteno = getquoteno();
    let slabid = parseInt(this.getAttribute("slabid"));
    let slabsrno = parseInt(this.getAttribute("slabsrno"));
    let matindex = parseInt(this.getAttribute("matindex"));
    let material = getmaterialbyindex(matindex);
    let slabinfo = getslabinfo(slabid, material.SlabList);
    if (slabinfo != undefined && material != undefined) {
        ajaxuploadpopup(slabinfo.Path, 0, slabinfo.ID, material.ID, material.Color, quoteno);
    }
}
function getslabinfo(slabid,slabs) {
    for (let j = 0; j < slabs.length; j++) {
        if (slabs[j].ID == slabid) {
            return slabs[j];
        }
    }
}
