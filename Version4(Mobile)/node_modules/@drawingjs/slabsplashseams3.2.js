function initslabsplashseam(index, x, y, spsplashindex) {
    let splashseam = { index: index, spseamindex: index, spsplashindex: spsplashindex, x: x, y: y, w: 0, h: 0, x1: 0, y1: 0, x2: 0, y2: 0, sx: 0, sy: 0, sw: 0, split: 0, isactive: 1, type: 1 };
    shapeslabsplash.seams.push(splashseam);
}
function setslabsplashseam31(x, y, index, splashindex, spsplashindex) {
    if (index == -1) { index = shapeslabsplash.seams.length, initslabsplashseam(index, x, y, spsplashindex); }
    let slabsplashseam = shapeslabsplash.seams[index];
    if (slabsplashseam != undefined) {
        if (slabsplashseam.index != index) { slabsplashseam.index = index; } //reindex 
        if (x > 0 && y > 0) { slabsplashseam.x = Math.round(x), slabsplashseam.y = Math.round(y); }
    }
    return index;
}
function setslabsplashseam32(index) {
    let splashseam = shapeslabsplash.seams[index];
    setsplashseam32(splashseam);
}
function setsplashseam32(splashseam) {
    if (splashseam != undefined) {
        let smtype = splashseam.type, x = splashseam.x, y = splashseam.y, h = splashseam.h, x1 = 0, y1 = 0, x2 = 0, y2 = 0, sw = 0;
        let x11 = shapeslabsplash.x11, y11 = shapeslabsplash.y11, x12 = shapeslabsplash.x12, y12 = shapeslabsplash.y12,
            x21 = shapeslabsplash.x21, y21 = shapeslabsplash.y21, x22 = shapeslabsplash.x22, y22 = shapeslabsplash.y22;
        let mx1 = 0, my1 = 0, mx2 = 0, my2 = 0, mtx = 0, mty = 0;
        let npt1 = calcverticalvectorpoint(x11, y11, x12, y12, x, y);
        x1 = Math.round(npt1.dx), y1 = Math.round(npt1.dy);
        let npt2 = calcverticalvectorpoint(x21, y21, x22, y22, x1, y1);
        x2 = Math.round(npt2.dx), y2 = Math.round(npt2.dy);
        sw = applymminchfact(calchyplen(x11, y11, x1, y1), 2, 2);
        splashseam.x1 = x1, splashseam.y1 = y1, splashseam.x2 = x2, splashseam.y2 = y2, splashseam.sw = sw;
    }
}
function onsetslabsplashseam31(x, y, index, splindex, spseamindex, spsplashindex, spsideindex, partsrno, areaid) {
    let source = 'onsetslabsplashseam31';
    index = setslabsplashseam31(x, y, index, splindex, spsplashindex);
    setslabsplashseam32(index);
    //drawslabsplashseam31(index, splindex, spsplashindex, source);
    ActionAddSlabSplashSeam32(index, spseamindex, splindex, source);
    //console.log(JSON.stringify(shapeslabsplash));
}
function onsetslabsplashseam32(index, splindex, spsplashindex) {
    let source = 'onsetslabsplashseam32';
    setslabsplashseam32(index);
    drawslabsplashseam31(index, splindex, spsplashindex, source);
}
function onslabsplashseamcontextmenu() {
    removeshapetools();
    d3.event.preventDefault();
    let m = d3.mouse(this);
    let mx = m[0], my = m[1];
    let index = parseInt(this.getAttribute("index"));
    let slabsplindex = parseInt(this.getAttribute("slabsplindex"));
    let splindex = parseInt(this.getAttribute("splindex"));
    let startseamindex = parseInt(this.getAttribute("startseamindex"));
    let endseamindex = parseInt(this.getAttribute("endseamindex"));
    let spseamindex = parseInt(this.getAttribute("spseamindex"));
    let spsplashindex = parseInt(this.getAttribute("spsplashindex"));
    let spsideindex = parseInt(this.getAttribute("spsideindex"));
    let partsrno = parseInt(this.getAttribute("partsrno"));
    let areaid = parseInt(this.getAttribute("areaid"));
    onsetslabsplash32(slabsplindex, splindex, startseamindex, endseamindex, spsplashindex, spsideindex, partsrno, areaid, 'slabsplash', 'onslabsplashseamcontextmenu');
    drawslabsplashseamcontrols(index, spseamindex, spsplashindex, mx, my);
}

function deleteslabsplashseam32(index, splashindex) {
    let splashseam = shapeslabsplash.seams[index];
    if (splashseam != undefined) {
        splashseam.isactive = 0;
        if (seamsg != undefined) {
            let spsplashindex = shapeslabsplash.spsplashindex
            let seamindex = spsplashindex + "" + index;
            let splashseamg = slabsplashg.select("#splashseamg" + seamindex);
            if (!splashseamg.empty()) { splashseamg.remove(); }
        }
    }
}
function drawslabsplashseams31(splindex, spsplashindex, source) {
    for (let i = 0; i < shapeslabsplash.seams.length; i++) {
        //console.log(shapeslabsplash.seams[i].isactive);
        if (shapeslabsplash.seams[i].isactive == 1) { drawslabsplashseam31(i, splindex, spsplashindex, source); }
    }
}
function drawslabsplashseam31(index, splindex, spsplashindex, source) {
    let splashseam = shapeslabsplash.seams[index];
    //console.log(index, splindex, spsplashindex, source);
    let smtype = splashseam.type, x = splashseam.x, y = splashseam.y, h = splashseam.h, x1 = splashseam.x1, y1 = splashseam.y1, x2 = splashseam.x2, y2 = splashseam.y2,
        sw = splashseam.sw, spseamindex = splashseam.spseamindex, startseamindex = shapeslabsplash.startseamindex, dw = 5;
    let x11 = shapeslabsplash.x11, y11 = shapeslabsplash.y11, x12 = shapeslabsplash.x12, y12 = shapeslabsplash.y12,
        x21 = shapeslabsplash.x21, y21 = shapeslabsplash.y21, x22 = shapeslabsplash.x22, y22 = shapeslabsplash.y22;
    sw = applymminchfact(calchyplen(x11, y11, x1, y1), 2, 2);
    let mtx = x2 + dw, mty = y2 - dw;
    drawslabsplashseamline31(index, spseamindex, splindex, x1, y1, x2, y2);
    drawslabsplashseammarkerline31(index, splindex, x21, y21, x2, y2, mtx, mty, sw);
}
function drawslabsplashseamline31(index, spseamindex, splindex, x1, y1, x2, y2) {
    let partsrno = shapeslabsplash.partsrno, areaid = shapeslabsplash.areaid, slabsplindex = shapeslabsplash.index, spsplashindex = shapeslabsplash.spsplashindex,
        startseamindex = shapeslabsplash.startseamindex, endseamindex = shapeslabsplash.endseamindex, spsideindex = shapeslabsplash.spsideindex;
    let eclass = "shapeseam";
    let seamindex = spsplashindex + "" + index;
    let splashseamg = slabsplashg.select("#splashseamg" + seamindex);
    if (splashseamg.empty()) { splashseamg = slabsplashg.append("g").attr("id", "splashseamg" + seamindex); }
    let seamline = splashseamg.select("#splashseam" + seamindex);
    if (seamline.empty()) { seamline = splashseamg.append("line").attr("id", "splashseam" + seamindex); }
    seamline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", eclass).attr("index", index).attr("slabsplindex", slabsplindex).attr("spseamindex", spseamindex).attr("startseamindex", startseamindex)
        .attr("splindex", splindex).attr("spsplashindex", spsplashindex).attr("spsideindex", spsideindex).attr("partsrno", partsrno).attr("areaid", areaid);
    seamline.call(slabsplashseamdrag).on("mouseover", showslabsplashseam).on("mouseout", hideslabsplashseam).on('contextmenu', onslabsplashseamcontextmenu);
    let seambandline = splashseamg.select("#seamband" + seamindex);
    if (seambandline.empty()) { seambandline = splashseamg.append("line").attr("id", "seamband" + seamindex); }
    seambandline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("index", index).attr("slabsplindex", slabsplindex).attr("spseamindex", spseamindex)
        .attr("startseamindex", startseamindex).attr("endseamindex", endseamindex).attr("splindex", splindex).attr("spsplashindex", spsplashindex).attr("spsideindex", spsideindex).attr("partsrno", partsrno).attr("areaid", areaid)
        .on('contextmenu', onslabsplashseamcontextmenu).on("mouseover", showslabsplashseam).on("mouseout", hideslabsplashseam).call(slabsplashseamdrag);
    seambandline.attr("style", "stroke:" + shape.color).attr("scolor", shape.color).style("stroke-opacity", "0.1").style("stroke-width", "20");
}
function drawslabsplashseammarkerline31(index, splindex, x1, y1, x2, y2, mtx, mty, mtext) {
    let spsplashindex = shapeslabsplash.spsplashindex
    let seamindex = spsplashindex + "" + index;
    let splashseamg = slabsplashg.select("#splashseamg" + seamindex);
    if (splashseamg.empty()) { splashseamg = slabsplashg.append("g").attr("id", "splashseamg" + seamindex); }
    let splashseammarkerg = splashseamg.select("#smarkerg" + seamindex);
    if (splashseammarkerg.empty()) { splashseammarkerg = splashseamg.append("g").attr("id", "smarkerg" + seamindex); }
    if (!splashseammarkerg.empty()) {
        //let markerline = splashseammarkerg.select("#msline" + seamindex);
        //if (markerline.empty()) { markerline = splashseammarkerg.append("line").attr("id", "msline" + seamindex); }       
        //markerline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", "cutoutarrow").attr("marker-start", 'url(#triangle-start)').attr("marker-end", '"url(#triangle-end)');
        let smarkertext = splashseammarkerg.select("#mstext" + seamindex);
        if (smarkertext.empty()) { smarkertext = splashseammarkerg.append("text").attr("id", "mstext" + seamindex); }
        smarkertext.attr("x", mtx).attr("y", mty).text(mtext);
        smarkertext.attr("style", "fill:red;fill-opacity:0.3;");
        splashseammarkerg.style("opacity", "1");
    }
}
function slabsplashseamdragstarted() {
    removeshapetools();
    let index = parseInt(this.getAttribute("index"));
    let slabsplindex = parseInt(this.getAttribute("slabsplindex"));
    let splindex = parseInt(this.getAttribute("splindex"));
    let startseamindex = parseInt(this.getAttribute("startseamindex"));
    let endseamindex = parseInt(this.getAttribute("endseamindex"));
    let spseamindex = parseInt(this.getAttribute("spseamindex"));
    let spsplashindex = parseInt(this.getAttribute("spsplashindex"));
    let spsideindex = parseInt(this.getAttribute("spsideindex"));
    let partsrno = parseInt(this.getAttribute("partsrno"));
    let areaid = parseInt(this.getAttribute("areaid"));
    onsetslabsplash32(slabsplindex, splindex, startseamindex, endseamindex, spsplashindex, spsideindex, partsrno, areaid, 'slabsplash', 'slabsplashseamdragstarted');
    //console.log(index, shapeslabsplash.seams.length, JSON.stringify(shapeslabsplash));
    let splashseam = shapeslabsplash.seams[index];
    dragdx = d3.event.x - splashseam.x; dragdy = d3.event.y - splashseam.y;
    bdrag = true;
}
function slabsplashseamdragged() {
    if (bdrag) {
        let index = parseInt(this.getAttribute("index"));
        let slabsplindex = parseInt(this.getAttribute("slabsplindex"));
        let splindex = parseInt(this.getAttribute("splindex"));
        let startseamindex = parseInt(this.getAttribute("startseamindex"));
        let spseamindex = parseInt(this.getAttribute("spseamindex"));
        let spsplashindex = parseInt(this.getAttribute("spsplashindex"));
        let spsideindex = parseInt(this.getAttribute("spsideindex"));
        let partsrno = parseInt(this.getAttribute("partsrno"));
        let areaid = parseInt(this.getAttribute("areaid"));
        let sx = d3.event.x - dragdx, sy = d3.event.y - dragdy;
        let splashseam = shapeslabsplash.seams[index];
        splashseam.x = sx; splashseam.y = sy;
        onsetslabsplashseam32(index, splindex, spsplashindex);
    }
}
function slabsplashseamdragended() {
    bdrag = false;
    let index = parseInt(this.getAttribute("index"));
    let spsplashindex = parseInt(this.getAttribute("spsplashindex"));
    let seamindex = spsplashindex + "" + index;
    let seammarkerg = seamsg.select("#smarkerg" + seamindex);
    if (!seammarkerg.empty()) { seammarkerg.style("opacity", "0"); }
    ActionDragSlabSplashSeam32(index, spsplashindex, 'seamdragended');
    //  onsetslabsplashseam32(index, splindex, spsplashindex);
    dragdx = 0, dragdy = 0;
}
function showslabsplashseam() {
    d3.select(this).attr("style", "stroke:" + 'blue').style("stroke-opacity", "1.0").style("stroke-width", "15").style("cursor", "crosshair");
}
function hideslabsplashseam() {
    if (!bdrag) {
        let scolor = d3.select(this).attr('scolor');
        d3.select(this).attr("style", "stroke:" + scolor).style("stroke-opacity", "0.1").style("stroke-width", "15");
    }
}
