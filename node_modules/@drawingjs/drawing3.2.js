var inptratio = 10, drawwidth = 120 * inptratio, drawheight = 84 * inptratio // 1920*1080 monitor with 16:9(1.778) aspect ratio, monitor unit=120;
var scale = 4, sdh = 108, zscale = 1, drawzoom, zscalex = 0, zscaley = 0, minwh = 2, splashmode = 2, splashminh = 4, splheight = 0; cornerwh = 51;
var defaults = { edgetype: 'E', edgetypeid: 16, edgeclass: 'shapeside' };
var shape = {};
var asvg, shapesg, shapeouterg, shapeg, shapepathg, sidesg, cornersg, cutoutsg, splashsg, sideshapesg, splsideshapesg, seamsg;
var drawhandlesg, anglehandlesg, shapecontrolsg, shapecontrolg;
var shapedraw, shapedrag, sideshapedrag, cutoutdrag, splashdrag, seamdrag, splashseamdrag, splashsideshapedrag, slabsplashdrag, slabsplashseamdrag, anglehandledrag, shapelabeldrag, dragdx = 0, dragdy = 0;
var bdraw = false, bdrag = false, blayout = false, bedit = false;
var drawmode = 0, editmode = 0, layoutmode = 0, chgflag = 0;
var shapetype = 0, cornertype = 0, cornertypeid = 0, sideshapetype = 0, sideshapetypeid = 0, edgetype = 0, edgetypeid = 0, cutouttype = 0, cutoutinfo = 0, seamtype = 0, countersidemode = 0;
//print
var prsvg, prshapesg, przoom, apdefssvg, prwidth = 790, prheight = 120;
//layout
var mslabsg, mpartimgsg, lwidth = 1080, lheight = 780, lzscale = 0.8, layoutzoom, lzscalex = 0, lzscaley = 0;
//slabs
var simg, mslabx = 10, mslaby = 0, spdx = 50, spdy = 72;
//splabparts
var msvg, slabpartcontrolsg, slabpartx = 0, slabparty = 0, slabpartsgrect, matpartlist = [];
//slabsplashs
var slabsplashouterg, slabsplashg, shapeslabsplash = {};
//digital layout
var mdgsvg, mdgslabsg, mdgslabpartsg, dglzscale = 0.8, dglwidth = 720, dglheight = 780;
//defs
var defssvg, markerdefs, maskdefs;
//undoredolog
var drawlogservice;
function initdrawingcontrols() {
    //setdrawsettings();
    //drawzoom = d3.zoom().scaleExtent([0.2, 2]).on("zoom", zoommousewheel);
    drawzoom = d3.zoom().scaleExtent([0.2, 2]);
    shapedraw = d3.drag().on("start", shapedrawstarted).on("drag", shapedrawed).on("end", shapedrawended);
    shapedrag = d3.drag().on("start", shapedragstarted).on("drag", shapedragged).on("end", shapedragended);
    sideshapedrag = d3.drag().on("start", sideshapedragstarted).on("drag", sideshapedragged).on("end", sideshapedragended);
    cutoutdrag = d3.drag().on("start", cutoutdragstarted).on("drag", cutoutdragged).on("end", cutoutdragended);
    splashdrag = d3.drag().on("start", splashdragstarted).on("drag", splashdragged).on("end", splashdragended);
    seamdrag = d3.drag().on("start", seamdragstarted).on("drag", seamdragged).on("end", seamdragended);    
    splashsideshapedrag = d3.drag().on("start", splashsideshapedragstarted).on("drag", splashsideshapedragged).on("end", splashsideshapedragended);
    slabsplashdrag = d3.drag().on("start", slabsplashdragstarted).on("drag", slabsplashdragged).on("end", slabsplashdragended);
    slabsplashseamdrag = d3.drag().on("start", slabsplashseamdragstarted).on("drag", slabsplashseamdragged).on("end", slabsplashseamdragended);
    anglehandledrag = d3.drag().on("start", anglehandledragstarted).on("drag", anglehandledragged).on("end", anglehandledragended);
    shapelabeldrag = d3.drag().on("start", shapelabeldragstarted).on("drag", shapelabeldragged).on("end", shapelabeldragended);
    defssvg = d3.select("#defssvg"); if (defssvg.empty()) { defssvg = d3.select('.defssvg').append("svg").attr("id", "defssvg"); }   
    setmarkerdefs(defssvg);   
}
function setdrawsettings() {
    let dsetting = getcompanydrawsettings();
    if (dsetting != '') {
        scale = dsetting.Scale; splashminh = dsetting.SplashHeight;
    }
}
function initdrawarea(index) {  
    setdrawlayout();
    shapesg.selectAll('*').remove();
    drawshapesgrect();
    let areaid = getareaid(index); //area id or index??
    drawlogservice._setarealog(areaid);
    drawpartshapes(index, 'shape', 'drawAreashapes1');    
    resetsvgbounds('shape');
    zoomdrawshapes('shape');
    $("#divmodelshape").hide();
}
function setdrawlayout() {
    //set window width
    drawwidth = window.innerWidth - 70;
    asvg = d3.select("#drawsvg"); if (asvg.empty()) { asvg = d3.select('#dsvg').append("svg").attr("id", "drawsvg").on("blur", svgblur); }
    asvg.selectAll('*').remove();
    asvg.attr("viewBox", '0 0 ' + drawwidth + ' ' + drawheight).attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight).attr("preserveAspectRatio", "xMidYMid meet")
       .attr("style", "background-color:white;");
    shapesg = asvg.select("#shapesg"); if (shapesg.empty()) { shapesg = asvg.append("g").attr("id", "shapesg").call(drawzoom); }
    shapesg.attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight);    
    drawlogservice = new DrawinglogService();
}
function initprintdrawingcontrols() {
    przoom = d3.zoom().on("zoom", printzoomed);
    apdefssvg = d3.select("#apdefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.apdefssvg').append("svg").attr("id", "apdefssvg"); }
    setprintmarkerdefs(apdefssvg);
}
function initquotearea(index) {
    d3.select('.areasvg').selectAll('*').remove();
    prsvg = d3.select("#areadsvg" + index);
    if (prsvg.empty()) { prsvg = d3.select('.areasvg').append("svg").attr("id", "areadsvg" + index); }
    prsvg.attr("width", prwidth).attr("height", prheight);
    prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
    drawpartshapes(index, 'print', 'initquotearea');
    apdefssvg = d3.select("#areadefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.areadefssvg').append("svg").attr("id", "areadefssvg"); }
    setprintmarkerdefs(apdefssvg);
    resetsvgbounds('print');
}
function redrawareashapes() {
    let areaindex = getareaindex();
    drawpartshapes(areaindex, 'shape', 'redrawareashapes');
}
function drawpartshapes(index, mode, source) {
    editmode = 0;

let partlist = _qscope.quote.header.Version.AreaList[index].PartList;
   // let partlist = getpartlist(index);   
    if (partlist != null && partlist.length > 0) {       
        for (let i = 0; i < partlist.length; i++) {           
            if (partlist[i].IsActive == 1 && partlist[i].Shape != null && partlist[i].Shape != 'null') {               
                drawshape31(i, partlist[i].SrNo, partlist[i].AreaID, mode, source);
            }
        }
    }
}
function drawshapesgrect() {
    let shapesrect = shapesg.select("#shapesrect"); if (shapesrect.empty()) { shapesrect = shapesg.append("rect").attr("id", "shapesrect"); }
    shapesrect.attr("x", zscalex).attr("y", zscaley).attr("width", drawwidth).attr("height", drawheight).style("fill", "lightblue").style("fill-opacity", "0.1").style("stroke", "skyblue").on("mousedown", svgclick);
}
function initprintarea() {
    przoom = d3.zoom().on("zoom", printzoomed);
    apdefssvg = d3.select("#apdefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.apdefssvg').append("svg").attr("id", "apdefssvg"); }
    //area = areas[index];
    let areaindex = getareaindex();
    let areas = getversionareas();
    for (let index = 0; index < areas.length; index++) {
        let area = areas[index]; setareaindex(index);
        prsvg = d3.select("#apdsvg" + index + area.VersionID + area.ExNo);
        if (prsvg.empty()) { prsvg = d3.select('.pdsvg' + index + area.VersionID + area.ExNo).append("svg").attr("id", "apdsvg" + index + area.VersionID + area.ExNo); }
        prsvg.attr("width", prwidth).attr("height", prheight);
        prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
        drawpartshapes(index, 'print', 'initprintarea');
        resetsvgbounds('print');
    }
    setareaindex(areaindex);
}

function setmarkerdefs(defsvg) {
    markerdefs = defsvg.select("#markerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "markerdefs");//check this
        markerdefs.append("marker").attr("id", "triangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "triangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "circle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function setareamarkerdefs(defsvg) {
    markerdefs = defsvg.select("#areamarkerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "areamarkerdefs");//check this
        markerdefs.append("marker").attr("id", "triangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "triangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "circle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function setprintmarkerdefs(defsvg) {
    markerdefs = defsvg.select("#areamarkerdefs");//markerdefs = defsvg.select("#printmarkerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "printmarkerdefs");//check this
        markerdefs.append("marker").attr("id", "printtriangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "printtriangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "printcircle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function resetdragvars(source) {
    bdrag = false, dragdx = 0, dragdy = 0;
}

//SVG Zoom
////function zoommousewheel() {
////    let direction = d3.event.sourceEvent.wheelDelta < 0 ? 'down' : 'up';
////    if (direction == 'up') {
////        zoomClick(1);
////    } else {
////        zoomClick(0);
////    }
////}
function zoomClick(ztype) {
    zscale = roundToOne(zscale);   
    var scaleto = ztype == 0 ? roundToOne(zscale - 0.1) : roundToOne(zscale + 0.1);
    if (scaleto <= 0.1) { scaleto = 0.1; }
    zscale = roundToOne(scaleto);
    zoomdrawshapes('shape');
    removeshapetools();
    $('#txtzoom').html((Math.round(roundToOne(zscale) * 100)) + "%");
}
function zoomdrawshapes(mode) {
    editmode = 0;
    let areaindex = getareaindex();
    let partlist = getpartlist(areaindex);   
    if (partlist != null && partlist.length > 0) {
        for (let i = 0; i < partlist.length; i++) {
            if (partlist[i].IsActive == 1 && partlist[i].Shape != null && partlist[i].Shape != 'null') {
                zoomdrawshape(i, partlist[i].SrNo, partlist[i].AreaID, mode);
            }
        }
    }
}
function zoomdrawshape(index, partsrno, areaid, mode) {
    setdrawshape31(index, partsrno, areaid, mode, 'zoomdrawshape');    
    shape.tscale = zscale;  
    transformshape(); 
    ActionUpdateShapesZoom('zoomdrawshape');
}
function resetsvgbounds(mode) {   
    if (mode == 'shape' && !shapesg.empty() && shapeg != undefined) {
        let sgscale = getshapesgscale();
        if (sgscale < zscale) { zscale = sgscale; }
       // console.log(sgscale, zscale);
        $('#txtzoom').html((Math.round(roundToOne(zscale) * 100)) + "%");
    }
    if (mode == 'print' && !prshapesg.empty()) {
        let gnode = prshapesg.node().getBBox(), w = gnode.width, h = gnode.height, sx = gnode.x + w / 2, sy = gnode.y + h / 2;
        if (h > prheight) { prsvg.style("height", (h / 2) + prheight); }
        if (w != 0 && h != 0) {
            let prsvgnode = prsvg.node(), prsvgw = prsvgnode.clientWidth, prsvgh = prsvgnode.clientHeight;
            let scale = (0.9) / Math.max(w / prsvgw, h / prsvgh);
            let translate = [prsvgw / 2 - scale * sx, prsvgh / 2 - scale * sy];
            prshapesg.attr('transform', 'translate(' + translate + ') scale(' + scale + ')');
            //prshapesg.transition().duration(600).attr('transform', 'translate(' + translate + ') scale(' + scale + ')');
        }
    }
}
function getshapesgscale() {
    let sgscale = 0;
    let shapesgnode = shapesg.node().getBBox(), sgw = shapesgnode.width, sgh = shapesgnode.height;
    if (sgw != 0 && sgh != 0) {
        let drawsvgnode = asvg.node(), drawsvgw = drawsvgnode.clientWidth, drawsvgh = drawsvgnode.clientHeight;
        sgscale = roundToPlaces(Math.min(drawsvgw / sgw, drawsvgh / sgh) * zscale, 2);
    }
    return sgscale;
}
function isshapeinbounds(sgscale) {
    let isinbox = true;
    let nsgscale = getshapesgscale();
    nsgscale += (zscale - sgscale);
    if (nsgscale < zscale) { isinbox = false; }
    //console.log(nsgscale, sgscale, zscale);
    return isinbox;
}
function printzoomed() {
    prshapesg.attr("transform", d3.event.transform);
}
function initauditarea(areas, auditindex, revno) {
    let areaindex = getareaindex();
    let currareas = getversionareas();
    setversionareas(areas);
    for (let index = 0; index < areas.length; index++) {
        apdefssvg = d3.select("#areadefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.areadefssvg').append("svg").attr("id", "areadefssvg"); }
        setareamarkerdefs(apdefssvg);
        let area = areas[index]; setareaindex(index);
        prsvg = d3.select("#areaauditdsvg" + index + auditindex + revno);
        if (prsvg.empty()) { prsvg = d3.select('.areaauditdsvg' + index + auditindex + revno).append("svg").attr("id", "areadsvg" + index + auditindex + revno); }
        prsvg.attr("width", prwidth).attr("height", prheight);
        prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
        drawpartshapes(index, 'print', 'initauditarea'); resetsvgbounds('print');     
    }
    setareaindex(areaindex);
    setversionareas(currareas);
}