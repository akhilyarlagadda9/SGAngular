var inptratio = 10, drawwidth = 108 * inptratio, drawheight = 84 * inptratio // 1920*1080 monitor with 16:9(1.778) aspect ratio, monitor unit=120;
var defaults = { edgetype: 'E', edgetypeid: 16, edgeclass: 'shapeside' };
var scale = 4, zscale = 1, drawzoom, zscalex = 0, zscaley = 0;
var areas = [], area = {}, shapes = [], shape = {};
var asvg, shapesg, shapeouterg, shapeg, shapepathg, sidesg, cornersg, cutoutsg, splashsg, sideshapesg, splsideshapesg, seamsg;
var drawhandlesg, anglehandlesg, shapecontrolsg, shapecontrolg;
var shapedraw, shapedrag, sideshapedrag, cutoutdrag, splashdrag, seamdrag, splashseamdrag, splashsideshapedrag, slabsplashdrag, slabsplashseamdrag, anglehandledrag, dragdx = 0, dragdy = 0;
var bdraw = false, bdrag = false, blayout = false, bedit = false;
var drawmode = 0, editmode = 0, layoutmode = 0, chgflag = 0;
var shapetype = 0, cornertype = 0, cornertypeid = 0, sideshapetype = 0, sideshapetypeid = 0, edgetype = 0, edgetypeid = 0, cutouttype = 0, cutoutinfo = 0, splheight = 0, seamtype = 0;
//print
var prsvg, prshapesg, przoom, apdefssvg, prwidth = 350, prheight = 0;
//layout
var lwidth = 720, lheight = 780;
var msvg, mslabsg, mslabg, mslabpathg, mslabmarkersg, mslabmarkerg, mpartimgsg;
var lzscale = 1, layoutzoom, lzscalex = 0, lzscaley = 0;
//slabs
var materialid=0, slabs = [], slab = {}, simg, slabx = 0, slaby = 0, spdx = 50, spdy = 72;
//splabparts
var slabpartsg, slabpartg, slabpartcontrolsg, slabparts = [], slabpartx = 0, slabparty = 0, slabpartsgrect;
//slabsplashs
var slabsplashsg, slabsplashouterg, slabsplashg, slabsplashs = [];
//defs
var defssvg, markerdefs, maskdefs;
//undoredolog
var drawlogservice;
//routine
var routine = 0;
function initdrawingcontrols(type) {   
    drawzoom = d3.zoom().scaleExtent([0.2, 2]).on("zoom", zoomsvg);
    shapedraw = d3.drag().on("start", shapedrawstarted).on("drag", shapedrawed).on("end", shapedrawended);
    shapedrag = d3.drag().on("start", shapedragstarted).on("drag", shapedragged).on("end", shapedragended);
    sideshapedrag = d3.drag().on("start", sideshapedragstarted).on("drag", sideshapedragged).on("end", sideshapedragended);
    cutoutdrag = d3.drag().on("start", cutoutdragstarted).on("drag", cutoutdragged).on("end", cutoutdragended);
    splashdrag = d3.drag().on("start", splashdragstarted).on("drag", splashdragged).on("end", splashdragended);
    seamdrag = d3.drag().on("start", seamdragstarted).on("drag", seamdragged).on("end", seamdragended);
    splashseamdrag = d3.drag().on("start", splashseamdragstarted).on("drag", splashseamdragged).on("end", splashseamdragended);
    splashsideshapedrag = d3.drag().on("start", splashsideshapedragstarted).on("drag", splashsideshapedragged).on("end", splashsideshapedragended);
    slabsplashdrag = d3.drag().on("start", slabsplashdragstarted).on("drag", slabsplashdragged).on("end", slabsplashdragended);
    slabsplashseamdrag = d3.drag().on("start", slabsplashseamdragstarted).on("drag", slabsplashseamdragged).on("end", slabsplashseamdragended);
    anglehandledrag = d3.drag().on("start", anglehandledragstarted).on("drag", anglehandledragged).on("end", anglehandledragended);
    defssvg = d3.select("#defssvg"); if (defssvg.empty()) { defssvg = d3.select('.defssvg').append("svg").attr("id", "defssvg"); }   
    asvg = d3.select("#drawsvg"); if (asvg.empty()) { asvg = d3.select('#dsvg').append("svg").attr("id", "drawsvg").on("blur", svgblur); }
    asvg.selectAll('*').remove();
    asvg.attr("viewBox", '0 0 ' + drawwidth + ' ' + drawheight).attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight).attr("preserveAspectRatio", "xMidYMid meet")
       .attr("style", "background-color:white;");
    shapesg = asvg.select("#shapesg"); if (shapesg.empty()) { shapesg = asvg.append("g").attr("id", "shapesg").call(drawzoom); }
    shapesg.attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight);
    setmarkerdefs(defssvg);
    drawlogservice = new DrawinglogService();
}
function setdrawlayout(type) {
    //console.log($(window).width())
    //let drawlayoutwidth = $(window).width();   
    //if (drawlayoutwidth <= 1280) {       
    //    $('#divpagezoom').attr("style", "-moz-transform: scale(0.7, 0.7);zoom: 0.7; zoom: 65%;")
    //}else if (drawlayoutwidth <= 1366) {
    //    $('#divpagezoom').attr("style","-moz-transform: scale(0.7, 0.7);zoom: 0.7; zoom: 65%;")
    //}else if (drawlayoutwidth <= 1440) {
    //    $('#divpagezoom').attr("style", "-moz-transform: scale(0.7, 0.7);zoom: 0.7; zoom: 73%;")
    //}else if (drawlayoutwidth <= 1600) {
    //    $('#divpagezoom').attr("style", "-moz-transform: scale(0.7, 0.7);zoom: 0.7; zoom: 82%;")
    //}else if (drawlayoutwidth <= 1680) {
    //    $('#divpagezoom').attr("style", "-moz-transform: scale(0.7, 0.7);zoom: 0.7; zoom: 87%;")
    //}else if (drawlayoutwidth < 1920) {
    //    $('#drawinglayout').attr("style", "-moz-transform: scale(0.7, 0.7);zoom: 0.95; zoom: 90%;")
    //}
    //$('#drawinglayout').attr("style", "-moz-transform: scale(0.7, 0.7);zoom: 0.95; zoom: 90%;")
    //$('#divdrawsvg').attr("class", "col-xs-7 slide-animate border-rigt no-padding").attr("style", "zoom:90%");
    //$('#divlayoutsvg').attr("class", "col-xs-5 slide-animate border-rigt no-padding").attr("style","zoom:65%");
    asvg.attr("viewBox", '0 0 ' + drawwidth + ' ' + drawheight).attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight).attr("preserveAspectRatio", "xMidYMid meet")
    .attr("style", "background-color:white;");
    shapesg = asvg.select("#shapesg"); if (shapesg.empty()) { shapesg = asvg.append("g").attr("id", "shapesg"); }
    shapesg.attr("x", 0).attr("y", 0).attr("width", drawwidth).attr("height", drawheight);
    checksvgbounds();  
}
function initprintdrawingcontrols() {
    przoom = d3.zoom().on("zoom", printzoomed);
    apdefssvg = d3.select("#apdefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.apdefssvg').append("svg").attr("id", "apdefssvg"); }
    setprintmarkerdefs(apdefssvg);
}
function initdrawarea(index) {
    shapesg.selectAll('*').remove(); 
    area = areas[index];
    drawlogservice._setarealog(area.ID);
    drawshapesgrect();
    drawAreashapes('shape');
    //resetsvgbounds('shape');
    //setdrawmode(1,'initdrawarea');
    //unhighlightareaslabparts(index);   
}
function drawshapesgrect() {
    let shapesrect = shapesg.select("#shapesrect"); if (shapesrect.empty()) { shapesrect = shapesg.append("rect").attr("id", "shapesrect"); }
    shapesrect.attr("x", zscalex).attr("y", zscaley).attr("width", drawwidth).attr("height", drawheight).style("fill", "lightblue").style("fill-opacity", "0.1").on("mousedown", svgclick);
}
function initprintarea(index) {
    przoom = d3.zoom().on("zoom", printzoomed);
    apdefssvg = d3.select("#apdefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.apdefssvg').append("svg").attr("id", "apdefssvg"); }
    area = areas[index];    
    prsvg = d3.select("#apdsvg" + index + area.VersionID + area.ExNo);
    if (prsvg.empty()) { prsvg = d3.select('.pdsvg' + index + area.VersionID + area.ExNo).append("svg").attr("id", "apdsvg" + index + area.VersionID + area.ExNo); }
    prsvg.attr("width", prwidth).attr("height", prheight);
    prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
    drawAreashapes('print');
    resetsvgbounds('print');
}
function initquotearea(index) {
    apdefssvg = d3.select("#areadefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.areadefssvg').append("svg").attr("id", "areadefssvg"); }
    setprintmarkerdefs(apdefssvg);
    area = areas[index];
    d3.select('.areasvg').selectAll('*').remove();
    prsvg = d3.select("#areadsvg" + index);
    if (prsvg.empty()) { prsvg = d3.select('.areasvg').append("svg").attr("id", "areadsvg" + index); }
    prsvg.attr("width", prwidth).attr("height", prheight);
    prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
    drawAreashapes('print');
    resetsvgbounds('print');
}
function setmarkerdefs(defsvg) {
    markerdefs = defsvg.select("#markerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "markerdefs");//check this
        markerdefs.append("marker").attr("id", "triangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "triangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "circle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function setareamarkerdefs(defsvg) {
    markerdefs = defsvg.select("#areamarkerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "areamarkerdefs");//check this
        markerdefs.append("marker").attr("id", "triangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "triangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "circle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function setprintmarkerdefs(defsvg) {
    markerdefs = defsvg.select("#printmarkerdefs");
    if (markerdefs.empty()) {
        markerdefs = defsvg.append("defs").attr("id", "printmarkerdefs");//check this
        markerdefs.append("marker").attr("id", "printtriangle-start").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "printtriangle-end").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
        markerdefs.append("marker").attr("id", "printcircle-end").attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z");
    }
}
function resetdragvars(source) {
    bdrag = false, dragdx = 0, dragdy = 0;
}

//SVG Zoom
function zoomClick(ztype) {
    zscale = roundToOne(zscale);   
    var scaleto = ztype == 0 ? roundToOne(zscale - 0.1) : roundToOne(zscale + 0.1);
    if (scaleto <= 0.1) { scaleto = 0.1; }
    zscale = roundToOne(scaleto);
    zoomsvg();
    //removeshapetools();
}
function zoomsvg() {
    let shapesgnode = shapesg.node().getBBox(), sgw = shapesgnode.width, sgh = shapesgnode.height, sgx = shapesgnode.x + sgw, sgy = shapesgnode.y + sgh;
    if (sgw != 0 && sgh != 0) {
        let drawsvgnode = asvg.node(), drawsvgw = drawsvgnode.clientWidth, drawsvgh = drawsvgnode.clientHeight;       
        zscalex = Math.round((drawsvgw - zscale * sgx)) / 2, zscaley = Math.round((drawsvgh - zscale * sgy) / 2);
        shapesg.attr('transform', 'translate(' + [zscalex, zscaley] + ') scale(' + zscale + ')');
        //shapesg.attr('transform', 'translate(' + [0, 0] + ') scale(' + zscale + ')');
        $('#txtzoom').html((Math.round(roundToOne(zscale) * 100)) + "%");
    }
}
function resetsvgbounds(mode) {                                                           
    if (mode == 'shape' && !shapesg.empty() && shapeg != undefined) {
        let shapesgnode = shapesg.node().getBBox(), sgw = shapesgnode.width, sgh = shapesgnode.height, sgx = shapesgnode.x + sgw, sgy = shapesgnode.y + sgh;
        if (sgw != 0 && sgh != 0) {
            let drawsvgnode = asvg.node(), drawsvgw = drawsvgnode.clientWidth, drawsvgh = drawsvgnode.clientHeight;
            // zscale = 1 / Math.max(sgw / drawsvgw, sgh / drawsvgh);
            zscalex = Math.round((drawsvgw - zscale * sgx)) / 2, zscaley = Math.round((drawsvgh - zscale * sgy) / 2);
            shapesg.attr('transform', 'translate(' + [zscalex, zscaley] + ') scale(' + zscale + ')');
            $('#txtzoom').html((Math.round(roundToOne(zscale) * 100)) + "%");
        }
    }
    if (mode == 'print' && !prshapesg.empty()) {
        let gnode = prshapesg.node().getBBox(), w = gnode.width, h = gnode.height, sx = gnode.x + w / 2, sy = gnode.y + h / 2;
        if (h > 120) { prsvg.style("height", (h / 2) + 120); }
        if (w != 0 && h != 0) {
            let prsvgnode = prsvg.node(), prsvgw = prsvgnode.clientWidth, prsvgh = prsvgnode.clientHeight;
            let scale = (0.9) / Math.max(w / prsvgw, h / prsvgh);
            let translate = [prsvgw / 2 - scale * sx, prsvgh / 2 - scale * sy];
            prshapesg.attr('transform', 'translate(' + translate + ') scale(' + scale + ')');
            //prshapesg.transition().duration(600).attr('transform', 'translate(' + translate + ') scale(' + scale + ')');
        }
    }
}
function checksvgbounds(ndx, ndy) {   
    let isinbox = true;
    let shapesgnode = shapesg.node().getBBox(), sgw = shapesgnode.width, sgh = shapesgnode.height, sgx = shapesgnode.x, sgy = shapesgnode.y;    
    if (sgw != 0 && sgh != 0) {
        let drawsvgnode = asvg.node(), drawsvgw = drawsvgnode.clientWidth, drawsvgh = drawsvgnode.clientHeight;
        let nzscale = roundToOne(1 / Math.max(sgw / drawsvgw, sgh / drawsvgh));
        //if (nzscale > 0.9) {
        //    if (sgx >= 0 && sgy >= 0) {
        //        zscalex = sgx, lzscaley = sgy, zscale = nzscale;
        //        shapesg.attr('transform', 'translate(' + [0, 0] + ') scale(' + zscale + ')');
        //        $('#txtzoom').html((Math.round(roundToOne(zscale) * 100)) + "%");
        //        isinbox = true;
        //    } else if (nzscale > 0.7) {
        //        isinbox = true;
        //    }

        //}
      //  console.log(nzscale, zscale);
        if (nzscale < 0.5) {           
            isinbox = false;
        }    
    }
    return isinbox;
}
function printzoomed() {
    prshapesg.attr("transform", d3.event.transform);
}

//Audit
function initAuditAreas(arealist) {
    shapes = [], shape = {};
    areas = arealist;
    if (areas.length > 0) {
        for (var i = 0; i < areas.length; i++) {
            area = areas[i];
            if (area != null) {
                area.index = i; area.ischg = 1;
                area.shapecount = 0;
                initAuditAreaPartShapes();
            }
        }
        shape = {};
    }
}
function initAuditAreaPartShapes() {
    if (area.PartList != null && area.PartList.length > 0) {
        var shapecount = 0;
        for (var i = 0; i < area.PartList.length; i++) {
            var areaPart = area.PartList[i];
            if (areaPart.Shape != null && areaPart.Shape.length > 0 && areaPart.IsActive == 1) {
                var partshapes = [];
                if (typeof (areaPart.Shape) == 'string') {
                    partshapes = JSON.parse(areaPart.Shape);
                } else if (typeof (areaPart.Shape) == 'object') {
                    partshapes = areaPart.Shape;
                }
                for (var p = 0; p < partshapes.length; p++) {
                    shape = partshapes[p];
                    if (shape.isactive == 1) {
                        shapecount += 1;
                        shape.areaid = area.ID;
                        shape.partid = areaPart.ID;
                        shape.partsrno = areaPart.SrNo;
                        if (areaPart.PartMaterialList != null && areaPart.PartMaterialList.length > 0) {
                            shape.materialid = areaPart.PartMaterialList[0].MaterialID;
                        }
                        shape.index = shapes.length;
                        shapes.push(shape);
                    }
                }
            }
        }
        area.shapecount = shapecount;
    }
}
function areaauditdrawing(index, auditindex, revno) {
    for (var i = 0; i < areas.length; i++) {
        apdefssvg = d3.select("#areadefssvg"); if (apdefssvg.empty()) { apdefssvg = d3.select('.areadefssvg').append("svg").attr("id", "areadefssvg"); }
        setareamarkerdefs(apdefssvg);
        prparts = JSON.parse(JSON.stringify(shapes));
        area = areas[i];
        initauditdrawarea(area.index, auditindex, revno);
    }
}
function initauditdrawarea(index, auditindex, revno) {
    prsvg = d3.select("#areaauditdsvg" + index + auditindex + revno);
    if (prsvg.empty()) { prsvg = d3.select('.areaauditdsvg' + index + auditindex + revno).append("svg").attr("id", "areadsvg" + index + auditindex + revno); }
    prsvg.attr("width", prwidth).attr("height", prheight);
    prshapesg = prsvg.select("#prshapesg" + index); if (prshapesg.empty()) { prshapesg = prsvg.append("g").attr("id", "prshapesg" + index); }
    drawAreashapes('print'); resetsvgbounds('print');
}


function initAuditMaterialLayout(SlabParts, SlabSplashes, MaterialList) {
    slabparts = [], slabsplashs = [];
    initdrawingcontrols('draw');
    let tmpslabparts = SlabParts;
    let tmpslabsplashs = SlabSplashes;
    let tmpmaterials = MaterialList;
    initscopeslabparts(tmpslabparts);
    initscopeslabsplashs(tmpslabsplashs);
    initMaterials(tmpmaterials);
}