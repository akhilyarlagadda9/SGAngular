function initsidecutout(x, y, sideindex) {
    let side = shape.sides[sideindex];
    let cw = 120; ch = 72, holes = 1;
    let cutout = {};
    let index = side.cutouts.length;
    cutout.index = index, cutout.shapeindex = shape.index, cutout.type = cutouttype, cutout.itemid = cutoutinfo.ID, cutout.sideindex = sideindex, cutout.spcutoutindex = index, cutout.angle = 0, cutout.Isactive = 1;
    cutout.x = x, cutout.y = y, cutout.w = cw, cutout.h = ch, cutout.dx = 0, cutout.dy = 0;
    //if (cutouttype == 'co') { cw = 68; ch = 56; }
    //else if (cutouttype == 'co1') { cw = 64; ch = 52; }
    //else if (cutouttype == 'co2') { cw = 60; ch = 48; }
    //else if (cutouttype == 'rc') { cw = 144; ch = 64; }
    //else if (cutouttype == 'cr1') { cw = 72; ch = 52; }
    //else if (cutouttype == 'cor') { cw = 24; ch = 16; holes = 0; }

    if (cutoutinfo.Width != 0 && cutoutinfo.Height != 0) { cw = cutoutinfo.Width * scale; ch = cutoutinfo.Height * scale; }
    cutout.w = cw, cutout.h = ch, cutout.holes = cutoutinfo.NoOfBowls;  
    side.cutouts.push(cutout);
    //console.log(x, y, sideindex, side.cutouts.length);
}
function resetshapecutouts(source) {
    for (let j = 0; j < shape.sides.length; j++) {
        setsidecutouts(j);
    }
}
function setsidecutouts(sideindex, sindex) {
    for (let j = 0; j < shape.sides[sideindex].cutouts.length; j++) {
        if (shape.sides[sideindex].cutouts[j].Isactive == 1) {           
            setcutoutcoords1(j, sideindex);
            setcutoutangle(j, sideindex);
            drawsidecutout(j, sideindex);
        }
    }
}

function sidecutoutcount(side) {
    let count = 0;
    for (let i = 0; i < side.cutouts.length - 1; i++) {
        if (side.cutouts[i].Isactive == 1) { count++; }
    }
    return count;
}
function setcutoutangle(index, sideindex) {
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index];
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2, w1 = side.w1, w2 = side.w2;
    let sideangle = calclineangle2(x1, y1, x2, y2, 'calcutoutangle');
    if (sideangle >= 180) { sideangle = 180 - sideangle; } else if (sideangle > 90) { sideangle = 180 - sideangle; }
    if (w1 > w2) { sideangle = -sideangle; }
    cutout.angle = sideangle;
}
function setsidecutout(x, y, index, sideindex) {
    let index1 = index;
    let side = shape.sides[sideindex];
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2, w1 = side.w1, w2 = side.w2;   
    let sideangle = calclineangle2(x1, y1, x2, y2, 'calcutoutangle');   
    if (index == -1) {
        index = side.cutouts.length;
        initsidecutout(x, y, sideindex);
        ActionSinkCutout(cutoutinfo.SinkID, 'setsidecutout');//sink cutout
    }
   // console.log(x, y, index, sideindex, side.cutouts.length);
    let cutout = side.cutouts[index];
    if (cutout != undefined) {
        if (cutout.index != index) { cutout.index = index; } //reindex     
        if (index1 == -1) {
            cutout.x = x; cutout.y = y;
            setcutoutcoords(index, sideindex);         
            setcutoutangle(index, sideindex);
        }
        else {            
            setcutoutcoords(index, sideindex);
        }        
    }
    return index;
}
function setcutoutcoords(index, sideindex) {
    let source = 'setcutoutcoords';
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index], cx = cutout.x, cy = cutout.y, cw = cutout.w, ch = cutout.h, dw = cutout.dw, dh = cutout.dh;
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2;
    let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, w1 = applymminchfact(side.w1, 1, 2, source), h = applymminchfact1(side.h, 1, 2, source);
    let x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, w2 = applymminchfact(side.w2, 1, 2, source);
    let cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, npt = {};    
    let sideangle = calclineangle2(x1, y1, x2, y2, source);
    cx = cx + cw / 2, cy = cy + ch / 2;
    if (w1 > w2) {
        cx1 = x21, cy1 = y21;
        npt = calcverticalvectorpoint(x21, y21, x22, y22, cx, cy);
    } else {
        cx1 = x11, cy1 = y11;
        npt = calcverticalvectorpoint(x11, y11, x12, y12, cx, cy);
    }
    cx2 = npt.dx, cy2 = npt.dy;
   // drawpointcircle(1, 1, sideindex, 1, cx2, cy2, 10, 'A');   
    cutout.dw = Math.round(calchyplen(cx1, cy1, cx2, cy2));
    cutout.dh = Math.round(calchyplen(cx2, cy2, cx, cy));
}
function setcutoutcoords1(index, sideindex) {//called  on shape angle change
    let source = 'setcutoutcoords1';
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index], cx = cutout.x, cy = cutout.y, dw = cutout.dw, dh = cutout.dh;
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2;
    let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, w1 = applymminchfact(side.w1, 1, 2, source), h = applymminchfact1(side.h, 1, 2, source);
    let x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, w2 = applymminchfact(side.w2, 1, 2, source);
    let cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, npt = {};
    let sideangle = calclineangle2(x1, y1, x2, y2, source);
    let sideangle1 = 0;
    if (w1 > w2) {
        cx1 = x21, cy1 = y21;
        sideangle1 = calclineangle2(x21, y21, x11, y11, source);
    } else {
        cx1 = x11, cy1 = y11;
        sideangle1 = calclineangle2(x11, y11, x21, y21, source);
    }
    npt = rotate_point1(cx1, cy1, -1, sideangle, dw);
    cx2 = npt.dx, cy2 = npt.dy;
    npt = rotate_point1(cx2, cy2, -1, sideangle1, dh);
    cx = npt.dx, cy = npt.dy;
    cutout.cx = cx, cutout.cy = cy;
   // drawpointcircle(1, 1, sideindex, 1, cx, cy, 10, 'A');
    cutout.dw = Math.round(calchyplen(cx1, cy1, cx2, cy2));
    cutout.dh = Math.round(calchyplen(cx2, cy2, cx, cy));
}
function centercutout(index, sideindex) {
    let source = 'centercutout'
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index];
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2;
    let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, w1 = applymminchfact(side.w1, 1, 2, source), h = applymminchfact1(side.h, 1, 2, source);
    let x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, w2 = applymminchfact(side.w2, 1, 2, source);
    let cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, cx3 = 0, cy3 = 0;
    if (w1 >= w2) { cx1 = x21, cy1 = y21, cx2 = (x21 + x22) / 2; cy2 = (y21 + y22) / 2; } else { cx1 = x11, cy1 = y11, cx2 = (x11 + x12) / 2; cy2 = (y11 + y12) / 2; }    
    for (let i = 0; i < side.cutouts.length - 1; i++) {
        if (side.cutouts[i].Isactive == 1) { cx2 += side.cutouts[i].w / 2; }        
    }
    let npt1 = calcverticalvectorpoint(x1, y1, x2, y2, cx2, cy2);
    cx3 = npt1.dx, cy3 = npt1.dy;   
    cutout.x = cx3; cutout.y = cy3;   
    cutout.dw = Math.round(calchyplen(cx1, cy1, cx2, cy2));
    cutout.dh = Math.round(calchyplen(cx2, cy2, cx3, cy3));   
}

function onsetshapesidecutout(x, y, index, sideindex, sindex, source) {
    drawlogservice.beforeupdate(shape, 'onsetshapesidecutout', 6);
    let index1 = setsidecutout(x, y, index, sideindex); 
    drawsidecutout(index1, sideindex);
    //ActionSinkCutout(cutoutinfo.SinkID, 'initsidecutout');
    ActionCutout('onsetshapesidecutout');
    //if (shape.mode == 'shape' && drawmode != 0) {//review
    //    let side = shape.sides[sideindex];
    //    let cutout = side.cutouts[index1];
    //    ActionCutout('onsetshapesidecutout');
    //}
    drawlogservice.update(shape, 'onsetshapesidecutout', 6);   
}
function onsetshapesidecutout1(x, y, index, sideindex, sindex) {    
    setsidecutout(x, y, index, sideindex);
    drawsidecutout(index, sideindex);
}
function onsetshapesidecutouts(sideindex, sindex) {
    setsidecutouts(sideindex, sindex);
}
function oncutoutcontextmenu() {
    removeshapetools();
    let m = d3.mouse(this);
    d3.event.preventDefault();
    let mode = this.getAttribute("smode");
    if (mode == 'shape') {
        let index = parseInt(this.getAttribute("index"));
        let sideindex = parseInt(this.getAttribute("sideindex"));
        let sindex = parseInt(this.getAttribute("sindex"));
        let spindex = parseInt(this.getAttribute("spindex"));
        let partsrno = parseInt(this.getAttribute("partsrno"));
        let areaid = parseInt(this.getAttribute("areaid"));
        setdrawshape31(sindex, partsrno, areaid, mode, 'oncutoutcontextmenu');       
        let side = shape.sides[sideindex];
        let cutout = side.cutouts[index];
        drawcutoutcontrols(index, sideindex, m[0], m[1]);
    }
}
function onrotatecutout(type, index, sideindex, angle) {
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index];
    let angle1 = cutout.angle;
    if (type == 0) { angle1 = angle; } else if (type == 1) { angle1 += angle; } else if (type == -1) { angle1 -= angle; }    
    if (angle1 <= 180 && angle1 >= -180) {
        cutout.angle = angle1;
        drawlogservice.beforeupdate(shape, 'onrotatecutout', 6);
        rotatecutout(index, sideindex);
        if (shape.mode == 'shape') { ActionUpdateShape('onrotatecutout'); }
        drawlogservice.beforeupdate(shape, 'onrotatecutout', 6);      
    }
   
}
function rotatecutout(index, sideindex) {  
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index];
    cindex = shape.index + "" + sideindex + "" + index;
    cutoutg = cutoutsg.select("#" + shape.mode + "cutoutg" + cindex);
    if (!cutoutg.empty()) {
        var cx = 0, cy = 0;
        var gnode = cutoutg.node();
        var cx = gnode.getBBox().x + gnode.getBBox().width / 2; cy = gnode.getBBox().y + gnode.getBBox().height / 2;
        var npt = [cx.toFixed(), cy.toFixed()];
        cutoutg.attr("transform", "rotate(" + cutout.angle + "," + npt + ")");
        $('#shapectlinputangle' + index).val(cutout.angle);
    }
}
function rotatesidecutouts(sideindex) {
    var side = shape.sides[sideindex];
    var angle = side.angle;
    for (var j = 0; j < side.cutouts.length; j++) {
        rotatecutout(j, sideindex)
    }
}
function oncentercutout(index, sideindex) {
    centercutout(index, sideindex);
    onsetshapesidecutout(0, 0, index, sideindex, shape.index);
}
function onresizecutout(index, sideindex) {
    let source = 'onresizecutout';
    var w = roundToTwo(parseFloat($('#shapectlinputwidth' + index).val()));
    var h = roundToTwo(parseFloat($('#shapectlinputheight' + index).val()));
    var side = shape.sides[sideindex];
    var cutout = side.cutouts[index];
    cutout.w = applymminchfact(w, 1, 2, source); cutout.h = applymminchfact(h, 1, 2, source);
    onsetshapesidecutout(0, 0, index, sideindex, shape.index);
    if (shape.mode == 'shape') { ActionCutout('onresizecutout'); }
}
function oncutoutholeschange(index, sideindex) {
    var side = shape.sides[sideindex];
    var cutout = side.cutouts[index];
    var holes = parseInt($('#shapectlinputholes' + index).val());
    cutout.holes = holes;
    onsetshapesidecutout(0, 0, index, sideindex, shape.index);
    if (shape.mode == 'shape') { ActionCutout('onresizecutout'); }
}
function ondeletecutout(index, sideindex) {
    removeshapetools();
    drawlogservice.beforeupdate(shape, 'ondeletecutout', 6);
    deletecutout(index, sideindex);
    if (shape.mode == 'shape') { ActionCutout(index, 'ondeletecutout'); }    
    drawlogservice.update(shape, 'ondeletecutout', 6);
}
function deletecutout(index, sideindex) {
    if (cutoutsg != undefined) {
        var side = shape.sides[sideindex];
        var cutout = side.cutouts[index];
        if (cutout != undefined) {
            cutout.Isactive = 0;
            var cindex = shape.index + "" + sideindex + "" + index;
            var cutoutg = cutoutsg.select("#" + shape.mode + "cutoutg" + cindex);
            if (!cutoutg.empty()) { cutoutg.remove(); }
            let sidegindex = shape.mode + "sideg" + shape.index + sideindex;
            let sideg = sidesg.select("#" + sidegindex);
            if (!sideg.empty()) {
                var cmarkerg = sideg.select("#" + shape.mode + "cmarkerg" + cindex);
                if (!cmarkerg.empty()) { cmarkerg.remove(); }
            }     
        }
    }
}
function drawsidecutouts(index) {
    let side = shape.sides[index];
    if (side != undefined) {
        for (let j = 0; j < side.cutouts.length; j++) {
            if (side.cutouts[j].Isactive == 1) {
                drawsidecutout(j, index);
            }
        }
    }
}
function initcutoutg(index, sideindex) {
    let sindex = shape.index, smode = shape.mode, partsrno = shape.partsrno, areaid = shape.areaid, spindex = shape.spindex;
    let cindex = shape.index + "" + sideindex + "" + index;
    let cutoutg = cutoutsg.select("#" + smode + "cutoutg" + cindex);
    if (!cutoutg.empty()) { cutoutg.remove(); }
    cutoutg = cutoutsg.append("g").attr("id", smode + "cutoutg" + cindex);
    cutoutg.attr("index", index).attr("sideindex", sideindex).attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
    if (shape.mode == 'shape') { cutoutg.call(cutoutdrag); } else if (shape.mode == 'slabpart') { cutoutg.attr("pointer-events", "none") }
    return cutoutg;
}
function drawsidecutout(index, sideindex) {   
    let side = shape.sides[sideindex];    
    let cutout = side.cutouts[index], ctype = cutout.type;
    if (cutout != undefined) {
        if (cutout.dw == undefined) { setcutoutcoords(index, sideindex);}
        if (ctype == 'cr' || ctype == 'cr1' || ctype == 'crf' || ctype == 'crd' || ctype == 'cor') { drawrectcutout(index, sideindex); }
        else if (ctype == 'co' || ctype == 'co1' || ctype == 'co2') { drawovalcutout(index, sideindex); }
        else if (ctype == 'rc') { drawrangecutout(index, sideindex); } else { drawdoublecutout(index, sideindex); }        
        rotatecutout(index, sideindex);
        if (shape.mode != 'slabpart') {
            if (cutout.dw != 0) { drawcutoutmarkers(index, sideindex); }
        }
    }   
}
function drawrectcutout(index, sideindex) {
    let sindex = shape.index, smode = shape.mode, partsrno = shape.partsrno, areaid = shape.areaid, spindex = shape.spindex;
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index];
    let x = cutout.x, y = cutout.y, w = cutout.w, h = cutout.h, holes = cutout.holes, type = cutout.type;
    let ix = 0, iy = 0, iw = 0, ih = 0, ox = 0, oy = 0, ow = 0, oh = 0, cx = 0, cy = 0, rx = type == 'cor' ? 0 : 8, ry = type == 'cor' ? 0 : 8, cr = 5, cdx = 14;
  //  x = x - w / 2, y = y - h / 2;
    ix = x, iy = y, iw = w, ih = h;
    ox = x, oy = y, ow = w, oh = h;
    cx = (x + w / 2) - (6 * (holes - 1)), cy = y - 10;    
    let cindex = sideindex + "" + index;
    let cutoutg = initcutoutg(index, sideindex)
    let corectcircle;
    let corectinner = cutoutg.select("#corectinner" + cindex);
    if (corectinner.empty()) {
        corectinner = cutoutg.append("rect").attr("id", "corectinner" + cindex).attr("index", index).attr("sideindex", sideindex)
            .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
    }
    for (let i = 0; i < holes; i++) {
        corectcircle = cutoutg.select("#corectcircle" + cindex + + "" + i);
        if (corectcircle.empty()) {
            corectcircle = cutoutg.append("circle").attr("id", "corectcircle" + cindex + + "" + i).attr("index", index).attr("sideindex", sideindex)
                .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
        }
        corectcircle.attr("cx", cx).attr("cy", cy).attr("r", cr).attr("class", "cutoutinner");
        cx += cdx;
    }
    corectinner.attr("x", ix).attr("y", iy).attr("rx", rx).attr("ry", ry).attr("width", iw).attr("height", ih).attr("class", "cutoutinner");
    if (type == 'crf' || type == 'crd') {
        let mtext = ''; if (type == 'crf') { mtext = 'FARM' } else if (type == 'crd') { mtext = 'DROP' }
        let ctx = x + w / 2 - 16, cty = y + 15;
        let cotext = cutoutg.select("#cotext" + cindex);
        if (cotext.empty()) { cotext = cutoutg.append("text").attr("id", "cotext" + cindex); }
        cotext.attr("x", ctx).attr("y", cty).text(mtext);
    }
    if (shape.mode == 'shape') {
        corectinner.on("mouseover", showcutoutmarkers).on("mouseout", hidecutoutmarkers).on("contextmenu", oncutoutcontextmenu);
    }
    //if (shape.mode == 'part') { corectinner.on("click", onshape); }
}
function drawdoublecutout(index, sideindex) {
    let sindex = shape.index, smode = shape.mode, partsrno = shape.partsrno, areaid = shape.areaid, spindex = shape.spindex;
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index];
    let x = cutout.x, y = cutout.y, w = cutout.w, h = cutout.h, holes = cutout.holes, type = cutout.type;
  //  x = x - w / 2, y = y - h / 2;
    var m = 4, cr = 5, irwidth = (w - 3 * m), lw = rw = irwidth * 0.5, lh = h;
    if (type == "cd") { lw = rw = irwidth * 0.5; } else if (type == "c64") { lw = irwidth * 0.6, rw = irwidth * 0.4 }
    else if (type == "c46") { lw = irwidth * 0.4, rw = irwidth * 0.6 } else if (type == "c73") { lw = irwidth * 0.7, rw = irwidth * 0.3 }
    else if (type == "c37") { lw = irwidth * 0.3, rw = irwidth * 0.7 }
    var cindex = sideindex + "" + index;
    var cutoutg = initcutoutg(index, sideindex);
    var corectlinner = cutoutg.select("#corectlinner" + cindex);
    var corectrinner = cutoutg.select("#corectrinner" + cindex);
    if (corectlinner.empty()) {
        corectlinner = cutoutg.append("rect").attr("id", "corectlinner" + cindex).attr("index", index).attr("sideindex", sideindex)
            .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
    }
    if (corectrinner.empty()) {
        corectrinner = cutoutg.append("rect").attr("id", "corectrinner" + cindex).attr("index", index).attr("sideindex", sideindex)
            .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
    }
    var corectcircle;
    var cx = (x + w / 2) - (6 * (holes - 1));
    var cdx = 14, rx = 6, ry = 6; cy = y; rcy = y - 10;
    //if (shape.mode == 'print') {
    //    lh = h; cr = 2.5; rx = 5; ry = 5; cy = y; rcy = y - 5;
    //    cx = (x + w / 2) - (2 * (holes - 1)); cdx = 8;
    //}
    for (var i = 0; i < holes; i++) {
        corectcircle = cutoutg.select("#corectcircle" + cindex + + "" + i);
        if (corectcircle.empty()) {
            corectcircle = cutoutg.append("circle").attr("id", "corectcircle" + cindex + + "" + i).attr("index", index)
                .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
        }
        corectcircle.attr("cx", cx).attr("cy", rcy).attr("r", cr).attr("class", "cutoutinner");
        cx += cdx;
    }
    corectlinner.attr("x", x + m).attr("y", cy).attr("rx", rx).attr("ry", ry).attr("width", lw).attr("height", lh).attr("class", "cutoutinner");
    corectrinner.attr("x", x + lw + 2 * m).attr("y", cy).attr("rx", ry).attr("ry", ry).attr("width", rw).attr("height", lh).attr("class", "cutoutinner");
    // corectouter.attr("x", cutout.x).attr("y", cutout.y).attr("rx", 10).attr("ry", 10).attr("width", cutout.w).attr("height", cutout.h).attr("class", "cutoutouter");
    if (shape.mode == 'shape') {
        corectlinner.on("mouseover", showcutoutmarkers).on("mouseout", hidecutoutmarkers).on("contextmenu", oncutoutcontextmenu);
        corectrinner.on("mouseover", showcutoutmarkers).on("mouseout", hidecutoutmarkers).on("contextmenu", oncutoutcontextmenu);
    }
    //if (shape.mode == 'part') { corectrinner.on("click", onshape); }
}
function drawovalcutout(index, sideindex) {
    let sindex = shape.index, smode = shape.mode, partsrno = shape.partsrno, areaid = shape.areaid, spindex = shape.spindex;
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index];
    var x = cutout.x, y = cutout.y, w = cutout.w, h = cutout.h, holes = cutout.holes, type = cutout.type;
    //x = x - w / 2, y = y - h / 2;
    var cw = w / 2; ch = h / 2, cx = x + cw, cy = y + ch;
    var pcrh = -9, pcrw = 7, pcrx = 14, cr = 5;
    //if (shape.mode == 'print') {
    //    cr = 2.5; pcry = h + 3; pcrx = 7; pcrw = 3; //cutout.rx = cutout.w / 2; cutout.ry = cutout.h / 2;
    //}
    var cindex = sideindex + "" + index;
    var cutoutg = initcutoutg(index, sideindex);
    var coovalouter = cutoutg.select("#coovalouter" + cindex);
    if (coovalouter.empty()) {
        coovalouter = cutoutg.append("ellipse").attr("id", "coovalouter" + cindex).attr("index", index).attr("sideindex", sideindex)
            .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
    }
    var coovalcircle;
    var crcx = (cx) - (pcrw * (holes - 1)), crcy = y + pcrh;
    for (var i = 0; i < holes; i++) {
        coovalcircle = cutoutg.select("#coovalcircle" + cindex + "" + i);
        if (coovalcircle.empty()) {
            coovalcircle = cutoutg.append("circle").attr("id", "coovalcircle" + cindex + "" + i).attr("index", index).attr("sideindex", sideindex)
                .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
        }
        coovalcircle.attr("cx", crcx).attr("cy", crcy).attr("r", cr).attr("class", "cutoutinner");
        crcx += pcrx;
    }
    coovalouter.attr("cx", cx).attr("cy", cy).attr("rx", cw).attr("ry", ch).attr("class", "cutoutinner");
    if (shape.mode == 'shape') {
        coovalouter.on("mouseover", showcutoutmarkers).on("mouseout", hidecutoutmarkers).on("contextmenu", oncutoutcontextmenu);
    }
    // if (shape.mode == 'part') { coovalouter.on("click", onshape); }
}
function drawrangecutout(index, sideindex) {
    let sindex = shape.index, smode = shape.mode, partsrno = shape.partsrno, areaid = shape.areaid, spindex = shape.spindex;
    var side = shape.sides[sideindex];
    var cutout = side.cutouts[index];
    var x = cutout.x, y = cutout.y, w = cutout.w, h = cutout.h, holes = cutout.holes, type = cutout.type;
   // x = x - w / 2, y = y - h / 2;
    var cindex = sideindex + "" + index;
    var cutoutg = initcutoutg(index, sideindex);
    var cotloutcircle = cutoutg.select("#cotloutcircle" + cindex);
    var cotroutcircle = cutoutg.select("#cotroutcircle" + cindex);
    var cobloutcircle = cutoutg.select("#cobloutcircle" + cindex);
    var cobroutcircle = cutoutg.select("#cobroutcircle" + cindex);
    var cotlincircle = cutoutg.select("#cotlincircle" + cindex);
    var cotrincircle = cutoutg.select("#cotrincircle" + cindex);
    var coblincircle = cutoutg.select("#coblincircle" + cindex);
    var cobrincircle = cutoutg.select("#cobrincircle" + cindex);
    var corectouter = cutoutg.select("#corectouter" + cindex);

    if (cotloutcircle.empty()) { cotloutcircle = cutoutg.append("circle").attr("id", "cotloutcircle" + cindex); }
    if (cotroutcircle.empty()) { cotroutcircle = cutoutg.append("circle").attr("id", "cotroutcircle" + cindex); }
    if (cobloutcircle.empty()) { cobloutcircle = cutoutg.append("circle").attr("id", "cobloutcircle" + cindex); }
    if (cobroutcircle.empty()) { cobroutcircle = cutoutg.append("circle").attr("id", "cobroutcircle" + cindex); }
    if (cotlincircle.empty()) { cotlincircle = cutoutg.append("circle").attr("id", "cotlincircle" + cindex); }
    if (cotrincircle.empty()) { cotrincircle = cutoutg.append("circle").attr("id", "cotrincircle" + cindex); }
    if (coblincircle.empty()) { coblincircle = cutoutg.append("circle").attr("id", "coblincircle" + cindex); }
    if (cobrincircle.empty()) { cobrincircle = cutoutg.append("circle").attr("id", "cobrincircle" + cindex); }
    var dw = cutout.w / 4, dh = cutout.h / 4, dw2 = cutout.w / 2, outr = 10, inr = 5, irdx = 6;
    if (shape.mode == 'part') { outr = outr / pswidthratio; inr = inr / pswidthratio; irdx = irdx / pswidthratio; }
    //else if (shape.mode == 'print') { outr = outr / prswidthratio; inr = inr / prswidthratio; irdx = irdx / prswidthratio; }
    cotloutcircle.attr("cx", x + dw).attr("cy", y + dh).attr("r", outr).attr("class", "cutoutinner");
    cotroutcircle.attr("cx", x + 3 * dw).attr("cy", y + dh).attr("r", outr).attr("class", "cutoutinner");
    cobloutcircle.attr("cx", x + dw).attr("cy", y + 3 * dh).attr("r", outr).attr("class", "cutoutinner");
    cobroutcircle.attr("cx", x + 3 * dw).attr("cy", y + 3 * dh).attr("r", outr).attr("class", "cutoutinner");
    cotlincircle.attr("cx", x + dw2 - irdx).attr("cy", y + dh - irdx).attr("r", inr).attr("class", "cutoutinner");
    cotrincircle.attr("cx", x + dw2 + irdx).attr("cy", y + dh - irdx).attr("r", inr).attr("class", "cutoutinner");
    coblincircle.attr("cx", x + dw2 - irdx).attr("cy", y + dh + irdx).attr("r", inr).attr("class", "cutoutinner");
    cobrincircle.attr("cx", x + dw2 + irdx).attr("cy", y + dh + irdx).attr("r", inr).attr("class", "cutoutinner");

    if (corectouter.empty()) {
        corectouter = cutoutg.append("rect").attr("id", "corectouter" + cindex).attr("index", index).attr("sideindex", sideindex)
            .attr("sindex", sindex).attr("spindex", spindex).attr("partsrno", partsrno).attr("areaid", areaid).attr("smode", smode);
    }
    corectouter.attr("x", x).attr("y", y).attr("rx", 10).attr("ry", 10).attr("width", cutout.w).attr("height", cutout.h).attr("class", "cutoutouter");
    if (shape.mode == 'shape') {
        corectouter.on("mouseover", showcutoutmarkers).on("mouseout", hidecutoutmarkers).on("contextmenu", oncutoutcontextmenu);
    }
    //if (shape.mode == 'part') { corectouter.on("click", onshape); }
}
function drawcutoutmarkers(index, sideindex) {
    let source = 'drawcutoutmarkers';
    let side = shape.sides[sideindex];
    let cutout = side.cutouts[index], cx = cutout.x, cy = cutout.y, cw = cutout.w, ch = cutout.h, cdw = cutout.dw, cdh = cutout.dh, dh = 15;
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2;
    let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, w1 = applymminchfact(side.w1, 1, 2, source), h = applymminchfact1(side.h, 1, 2,source);
    let x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, w2 = applymminchfact(side.w2, 1, 2, source);
    let cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, npt1 = {};   
    if (w1 >= w2) { cx1 = x21; cy1 = y21, dh = -dh; } else { cx1 = x11; cy1 = y11; }  
    let angle = calclineangle2(x1, y1, x2, y2, 'drawcutoutmarkers');   
    npt1 = rotate_point1(cx1, cy1, -1, angle, cdw);   
    cx2 = npt1.dx, cy2 = npt1.dy;   
    npt1 = offsetline(cx1, cy1, cx2, cy2, dh);
    cx1 = npt1.dx1, cy1 = npt1.dy1, cx2 = npt1.dx2, cy2 = npt1.dy2;
    let mtx1 = (cx1 + cx2) / 2, mty1 = (cy1 + cy2) / 2, mtext1 = applymminchfact(cdw, 2, 2, source), mtext = applymminchfact(cw, 2, 2, source) + " x " + applymminchfact(ch, 2, 2, source);
    let angle1 = calclineangle2(cx1, cy1, cx2, cy2, 'drawcutoutmarkers'); 
    if (shape.mode == 'shape') {
        drawcutoutmarkerline(index, sideindex, 1, cx1, cy1, cx2, cy2);
        // drawcutoutmarkerline(index, sideindex, 2, cx2, cy2, cx, cy);
        drawcutoutmarkertext(index, sideindex, 3, mtx1, mty1, mtext1);
        drawcutoutmarkersizetext(index, sideindex, 4, cx, cy, mtext);
        drawcutoutcenterline(index, sideindex);
    }
}

function drawcutoutcenterline(index, sideindex) {
    let source = 'drawcutoutcenterline';
    let side = shape.sides[sideindex];  
    let x1 = side.x1, y1 = side.y1, x2 = side.x2, y2 = side.y2;
    let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, w1 = applymminchfact(side.w1, 1, 2, source), h = applymminchfact1(side.h, 1, 2,source);
    let x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, w2 = applymminchfact(side.w2, 1, 2, source);
    let cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, cx3 = 0, cy3 = 0, npt1 = {};
    if (w1 >= w2) {
        cx1 = x21, cy1 = y21, cx2 = (x21 + x22) / 2; cy2 = (y21 + y22) / 2;
        npt1 = calcverticalvectorpoint(x11, y11, x12, y12, cx2, cy2);
    } else {
        cx1 = x11, cy1 = y11, cx2 = (x11 + x12) / 2; cy2 = (y11 + y12) / 2;
        npt1 = calcverticalvectorpoint(x21, y21, x22, y22, cx2, cy2);
    }    
    cx3 = npt1.dx, cy3 = npt1.dy;  
    drawcutoutmarkerline(index, sideindex, 5, cx2, cy2, cx3, cy3);
}
function drawcutoutmarkerline(index, sideindex, lncode, x1, y1, x2, y2) {
    let sidegindex = shape.mode + "sideg" + shape.index + sideindex;
    let sideg = sidesg.select("#" + sidegindex);
    if (!sideg.empty()) {
        let cmindex = shape.index + "" + sideindex + "" + index;
        let cmarkerg = sideg.select("#" + shape.mode + "cmarkerg" + cmindex);
        if (cmarkerg.empty()) { cmarkerg = sideg.append("g").attr("id", shape.mode + "cmarkerg" + cmindex); }
        let cmlindex = cmindex + "" + lncode;
        let markerline = cmarkerg.select("#mcline" + cmlindex);
        if (markerline.empty()) { markerline = cmarkerg.append("line").attr("id", "mcline" + cmlindex); }
        let arrowstart = shape.mode == 'print' ? "url(#printtriangle-start)" : "url(#triangle-start)";
        let arrowend = shape.mode == 'print' ? "url(#printtriangle-end)" : "url(#triangle-end)";
        markerline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", "cutoutarrow").attr("marker-start", arrowstart).attr("marker-end", arrowend);
    }
}
function drawcutoutmarkertext(index, sideindex, lncode, x, y, mtext) {
    let sidegindex = shape.mode + "sideg" + shape.index + sideindex;
    let sideg = sidesg.select("#" + sidegindex);    
    if (!sideg.empty()) {
        var cmindex = shape.index + "" + sideindex + "" + index;
        var cmarkerg = sideg.select("#" + shape.mode + "cmarkerg" + cmindex);
        if (cmarkerg.empty()) { cmarkerg = sideg.append("g").attr("id", shape.mode + "cmarkerg" + cmindex); }
        var cmtindex = cmindex + "" + lncode;
        var cdmarkertext = cmarkerg.select("#cdmtext" + cmtindex);
        if (cdmarkertext.empty()) { cdmarkertext = cmarkerg.append("text").attr("id", "cdmtext" + cmtindex); }
        cdmarkertext.attr("x", x).attr("y", y).text(mtext);
    }
}
function drawcutoutmarkersizetext(index, sideindex, lncode, x, y, mtext) {
    let cmindex = shape.index + "" + sideindex + "" + index;
    let cutoutg = cutoutsg.select("#" + shape.mode + "cutoutg" + cmindex);
    if (!cutoutg.empty()) {
        let cindex = sideindex + "" + index + "" + lncode;
        let cdmarkertext = cutoutg.select("#cdmtext" + cindex);
        if (cdmarkertext.empty()) { cdmarkertext = cutoutg.append("text").attr("id", "cdmtext" + cindex); }
        cdmarkertext.attr("x", x).attr("y", y).text(mtext);
    }
}
function showcutoutmarkers() {
    let mode = this.getAttribute("smode");
    let cindex = parseInt(this.getAttribute("cindex")); 
    cutoutg = cutoutsg.select("#cutoutg" + cindex);
    let csizemarkerg = cutoutg.select("#csizemarkerg" + cindex);
    csizemarkerg.style("opacity", 1);
}
function hidecutoutmarkers() {
    let cindex = parseInt(this.getAttribute("cindex"));
    let sindex = parseInt(this.getAttribute("sindex"));
    cutoutg = cutoutsg.select("#cutoutg" + cindex);
    let csizemarkerg = cutoutg.select("#csizemarkerg" + cindex);
    csizemarkerg.style("opacity", 0);
}
function cutoutdragstarted() {
    let mode = this.getAttribute("smode");
    let index = parseInt(this.getAttribute("index"));
    let sideindex = parseInt(this.getAttribute("sideindex"));
    let sindex = parseInt(this.getAttribute("sindex"));
    let spindex = parseInt(this.getAttribute("spindex"));
    let partsrno = parseInt(this.getAttribute("partsrno"));
    let areaid = parseInt(this.getAttribute("areaid"));    
    if (shape.index != sindex) { setdrawshape31(sindex, partsrno, areaid, mode, 'cutoutdragstarted'); }
    if (mode == 'shape') {      
        let side = shape.sides[sideindex];
       // console.log(mode, index, sideindex, sindex, spindex, partsrno, areaid, side.cutouts.length);
        let cutout = side.cutouts[index];        
        dragdx = d3.event.x - cutout.x; dragdy = d3.event.y - cutout.y;        
        removeshapetools();
        bdrag = true;
        drawlogservice.beforeupdate(shape, 'cutoutdragstarted', 6);
    }
}
function cutoutdragged() {
    let mode = this.getAttribute("smode");
    if (bdrag && mode=='shape') {
        let index = parseInt(this.getAttribute("index"));
        let sideindex = parseInt(this.getAttribute("sideindex"));
        let sindex = parseInt(this.getAttribute("sindex"));              
        let side = shape.sides[sideindex];
        let cutout = side.cutouts[index];
        let cx = d3.event.x - dragdx, cy = d3.event.y - dragdy;
        cutout.x = cx; cutout.y = cy;
        onsetshapesidecutout1(cx, cy, index, sideindex, sindex);
    }  
}
function cutoutdragended() {    
    if (bdrag) {
        bdrag = false;
        resetdragvars('cutoutdragended');
        ActionUpdateShape('cutoutdragended');
        drawlogservice.update(shape, 'cutoutdragstarted', 6);        
    }
}

