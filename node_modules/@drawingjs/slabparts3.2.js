function initslabpart31(spindex) {
    let pslabpart = { index: spindex, x: 0, y: 0, tx: 0, ty: 0, angle: 0, startseamindex: -1, startsideindex: -1, endseamindex: -1, endsideindex: -1, isactive: 1 };
    return pslabpart;
}
function getslabpartindex32(spindex, source) {
    let index = -1;
    for (let i = 0; i < pshapeslabparts.length; i++) {if (pshapeslabparts[i].index == spindex) {index = i; break;}}
    return index;
}
function getslabpartindex33(spindex, startseamindex, startsideindex, pslabparts, source) {
    let index = -1;   
    for (let i = 0; i < pslabparts.length; i++) {if (pslabparts[i].startseamindex == startseamindex && pslabparts[i].startsideindex == startsideindex) { index = i; break; }}
    return index;
}
function getslabpartindex34(spindex, endseamindex, endsideindex, pslabparts, source) {
    let index = -1;    
    for (let i = 0; i < pslabparts.length; i++) {if (pslabparts[i].endseamindex == endseamindex && pslabparts[i].endsideindex == endsideindex) { index = i; break; }}
    return index;
}
function setslabparttransformcoords32(pslabpart, source) {
    //1. define boundaries
    //2. all shapes should be in the boundaries
    //3. new slabpart - tx=0, ty=0 should be palced at 500, 30+ 10*i;
    //4. drag shape should preserve corrds
    //5. rotate shape should rotate around centroid
    //6. seamed shape position should align to seamed partshape.
    //7. angled shape seamed position.
    if (pslabpart.tx == undefined) { pslabpart.tx = 0; } if (pslabpart.ty == undefined) { pslabpart.ty = 0; }
    let ztx = pslabpart.tx, zty = pslabpart.ty, stscale = pslabpart.tscale;
    let minstx1 = 0, minsty1 = 0, maxstw1 = 0, spdxy = 10;
    for (let i = 0; i < shape.sides.length; i++) {
        let side = shape.sides[i];
        let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12, x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22, w1 = side.w1, w2 = side.w2;
        let minsx1 = Math.min(x11, x12, x21, x22), minsy1 = Math.min(y11, y12, y21, y22), maxw1 = Math.min(w1, w2);
        if (i == 0) { minstx1 = minsx1; minsty1 = minsy1; maxstw1 = maxw1; }
        if (minsx1 < minstx1) { minstx1 = minsx1; } if (minsy1 < minsty1) { minsy1 = minsty1; }
        if (maxstw1 < maxw1) { maxstw1 = maxw1; }
        // console.log("sindex:" + shape.index, "minsx1:" + minsx1, "minsxy1:" + minsy1, "minstx1:" + minstx1, "minsty1:" + minsty1);
    }    
    if ((ztx + minstx1) < 0) { ztx = -minstx1; }
    else if ((ztx + minstx1 + maxstw1) > lwidth) {
        ztx -= (ztx + minstx1 + maxstw1 - lwidth);
        //console.log("sindex:" + shape.index, "ztx:" + ztx, "zty:" + zty, "stx:" + shape.tx, "sty:" + shape.ty, "minstx1:" + minstx1, "minsty1:" + minsty1, "maxstw1:" + maxstw1);
        //ztx = slabpartx, zty = slabparty;
        //slabpartx += spdxy, slabparty += spdxy;
    } else {
        ztx = slabpartx, zty = slabparty;
        slabpartx += spdxy, slabparty += spdxy;
       // console.log("sindex:" + shape.index, "ztx:" + ztx, "zty:" + zty, "stx:" + shape.tx, "sty:" + shape.ty, "minstx1:" + minstx1, "minsty1:" + minsty1, "maxstw1:" + maxstw1);
    }
    if ((zty + minsty1) < 0) { zty = -minsty1; }
    pslabpart.tx = ztx, pslabpart.ty = zty;
    // console.log("sindex:" + shape.index, "ztx:" + ztx, "zty:" + zty, "stx:" + pslabpart.tx, "sty:" + pslabpart.ty, "pslabpartangle:" + pslabpart.angle, "shapeangle:" + shape.angle, "minstx1:" + minstx1, "minsty1:" + minsty1, "maxstw1:" + maxstw1, "ztx + minstx1 + maxstw1:" + (ztx + minstx1 + maxstw1), "lwidth:" + lwidth);
}
function setslabpart31(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, tmpshapeslabparts, source) {
    let index1 = getslabpartindex33(spindex, startseamindex, startsideindex, tmpshapeslabparts, source);
    let pslabpart = {};
    if (index1 == -1) { pslabpart = initslabpart31(pshapeslabparts.length); pslabpart.color = shape.color; }
    else { pslabpart = JSON.parse(JSON.stringify(tmpshapeslabparts[index1])); }
    if (index1 == -1) {    
       // console.log("index1:" + index1, "spindex:" + spindex, "pslabpart:" + JSON.stringify(pslabpart), pshapeslabparts.length);
        if (spindex == 0) { setslabparttransformcoords32(pslabpart, source); }
        if (spindex > 0) {
            let index2 = getslabpartindex34(spindex, startseamindex, startsideindex, tmpshapeslabparts, source); //prev slabpart endseamindex and endsideindex = curr startendindex and startseamindex
            let index3 = getslabpartindex32(spindex - 1, source);     //to be safe side not to error out       
            if (index2 == -1) { index2 = index3;}//to be safe side not to error out
            //console.log("sindex:" + shape.index, "spindex:" + spindex, "index1:" + index1, "index2:" + index2, "index3:" + index3, "startseamindex:" + startseamindex, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex,
            //    "endsideindex:" + endsideindex, "tmpshapeslabparts:" + JSON.stringify(tmpshapeslabparts), "pshapeslabparts:" + JSON.stringify(pshapeslabparts), "source:" + source);
            if (tmpshapeslabparts[index2] != undefined) {
                pslabpart.tx = tmpshapeslabparts[index2].tx;
                pslabpart.ty = tmpshapeslabparts[index2].ty;
                pslabpart.angle = tmpshapeslabparts[index2].angle;
                pslabpart.slabindex = tmpshapeslabparts[index2].slabindex;
                pslabpart.slabsrno = tmpshapeslabparts[index2].slabsrno;
                pslabpart.slabid = tmpshapeslabparts[index2].slabid;
                pslabpart.slabx = tmpshapeslabparts[index2].slabx;
                pslabpart.slaby = tmpshapeslabparts[index2].slaby;
                pslabpart.clipx = tmpshapeslabparts[index2].clipx;
                pslabpart.clipy = tmpshapeslabparts[index2].clipy;
                pslabpart.rtx = tmpshapeslabparts[index2].rtx;
                pslabpart.rty = tmpshapeslabparts[index2].rty;
            }
        }
    }   
    pslabpart.index = spindex;
    pslabpart.startseamindex = startseamindex;
    pslabpart.startsideindex = startsideindex;
    pslabpart.startseamtype = startseamtype;
    pslabpart.endseamindex = endseamindex;
    pslabpart.endsideindex = endsideindex;
    pslabpart.endseamtype = endseamtype;
    if (pslabpart.color == undefined) { pslabpart.color = shape.color; }
    if (pslabpart.shapeindex == undefined) { pslabpart.shapeindex = shape.index; }
    if (pslabpart.slabsrno == undefined) { pslabpart.slabsrno = 0; }
   // console.log("index1:" + index1, "spindex:" + spindex, "startseamindex:" + startseamindex, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "slabparttx:" + pslabpart.tx, "slabpartty:" + pslabpart.ty, "source:" + source);
    pshapeslabparts.push(pslabpart);
   // console.log(JSON.stringify(pshapeslabparts));
    return pslabpart;
}
function setslabpart32(spindex, source) {
    source += ":" + "setslabpart32";
    let index1 = getslabpartindex32(spindex, source);
    let pslabpart = pshapeslabparts[index1];
    if (pslabpart != undefined) {
        pslabpart.tx = shape.tx;
        pslabpart.ty = shape.ty;
        pslabpart.angle = shape.angle;
        pslabpart.slabindex = shape.slabindex;
        pslabpart.slabsrno = shape.slabsrno;
        pslabpart.slabid = shape.slabid;
        pslabpart.slabx = shape.slabx;
        pslabpart.slaby = shape.slaby;
        pslabpart.clipx = shape.clipx;
        pslabpart.clipy = shape.clipy;
        pslabpart.color = shape.color;
        pslabpart.rtx = shape.rtx;
        pslabpart.rty = shape.rty;
    }
    let npslabpartshapes = JSON.parse(JSON.stringify(pshapeslabparts));
    ActionUpdateSlabPart32(shape.partsrno, shape.areaid, npslabpartshapes, source);
    //console.log("index1:" + index1, "spindex:" + spindex, "pslabpart:" + JSON.stringify(pslabpart));
    //console.log("index1:" + index1, "spindex:" + spindex, "startseamindex:" + startseamindex, "startsideindex:" + startsideindex, "slabparttx:" + pslabpart.tx, "slabpartty:" + pslabpart.ty, "source:" + source);
    return pslabpart;
}
function setshapeslabpartinfo31(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, partshape, mode, source) {
    source += ":" + "setshapeslabpartinfo31";
    shape = JSON.parse(JSON.stringify(partshape));
    shape.spindex = spindex;
    shape.startseamindex = startseamindex;
    shape.startsideindex = startsideindex;
    shape.startseamtype = startseamtype;
    shape.endseamindex = endseamindex;
    shape.endsideindex = endsideindex;
    shape.endseamtype = endseamtype;
    shape.index = partshape.partsrno + "" + spindex;    
    shape.mode = mode;  
    let tmpshapeslabparts = JSON.parse(JSON.stringify(partshape.slabparts));
    let pslabpart = setslabpart31(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, tmpshapeslabparts, source);
    if (pslabpart != undefined) {
        shape.tx = pslabpart.tx;
        shape.ty = pslabpart.ty;
        shape.angle = pslabpart.angle;
        shape.slabx = pslabpart.slabx;
        shape.slaby = pslabpart.slaby;
        shape.clipx = pslabpart.clipx;
        shape.clipy = pslabpart.clipy;        
        shape.slabid = pslabpart.slabid;
        if (pslabpart.slabsrno == undefined) { pslabpart.slabsrno = 0;}
        shape.slabsrno = pslabpart.slabsrno;
        shape.slabindex = pslabpart.slabindex;
        shape.color = pslabpart.color;
        shape.rtx = pslabpart.rtx;
        shape.rty = pslabpart.rty;
    }
   // console.log(JSON.stringify(pshapeslabparts));
   // console.log("sindex:" + shape.index, "stx:" + pslabpart.tx, "sty:" + pslabpart.ty, "pslabpartangle:" + pslabpart.angle, "shapeangle:" + shape.angle);
}
function setshapeslabpartinfo32(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, partshape, mode, source) {
    source += ":" + "setshapeslabpartinfo32";
    shape = JSON.parse(JSON.stringify(partshape));
    shape.spindex = spindex;
    shape.startseamindex = startseamindex;
    shape.startsideindex = startsideindex;
    shape.startseamtype = startseamtype;
    shape.endseamindex = endseamindex;
    shape.endsideindex = endsideindex;
    shape.endseamtype = endseamtype;
    shape.index = partshape.partsrno + "" + spindex;
    shape.mode = mode;
    let index1 = getslabpartindex32(spindex, source);
    let index2 = getslabpartindex33(spindex, startseamindex, startsideindex, pshapeslabparts, source);
    let pslabpart = pshapeslabparts[index1];   
    if (pslabpart != undefined) {
        pslabpart.index = spindex;
        pslabpart.startseamindex = startseamindex;
        pslabpart.startsideindex = startsideindex;
        pslabpart.startseamtype = startseamtype;
        pslabpart.endseamindex = endseamindex;
        pslabpart.endsideindex = endsideindex;
        pslabpart.endseamtype = endseamtype;
        shape.tx = pslabpart.tx;
        shape.ty = pslabpart.ty;
        shape.angle = pslabpart.angle;
        shape.slabx = pslabpart.slabx;
        shape.slaby = pslabpart.slaby;
        shape.clipx = pslabpart.clipx;
        shape.clipy = pslabpart.clipy;
        shape.slabid = pslabpart.slabid;
        shape.slabsrno = pslabpart.slabsrno;
        shape.slabindex = pslabpart.slabindex;
        shape.color = pslabpart.color;
        shape.rtx = pslabpart.rtx;
        shape.rty = pslabpart.rty;
    }
   // console.log(JSON.stringify(pshapeslabparts));
   // console.log("index1:" + index1, "index2:" + index2, "spindex:" + spindex, "startseamindex:" + startseamindex, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "slabparttx:" + pslabpart.tx, "slabpartty:" + pslabpart.ty, "source:" + source);
   // console.log("index1:" + index1, "index2:" + index2, "spindex:" + spindex, "startseamindex:" + startseamindex, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex,  "source:" + source);
    
}
function setpartshapeslabparts31(partshape, mode, source) {
    source += ':setpartshapeslabparts31';
    //1.sceanrios 1. no slabaprt. 2. non seamed slabaprt 3. seamed slabpart     
    //partshape = parsepartshape(partshape);
    if (partshape.slabparts == undefined || partshape.slabparts == null) { partshape.slabparts = []; }
    let partsrno = partshape.partsrno, areaid = partshape.areaid, spindex = 0, startseamindex = -1, startsideindex = 0, startseamtype = -1, endseamtype = -1, endseamindex = -1; endsideindex = -1;
    // reordershapesideseams32(partshape, source);
    //pshapeslabparts = JSON.parse(JSON.stringify(partshape.slabparts));
    //console.log(JSON.stringify(partshape.slabparts));
    pshapeslabparts = [];
    for (let i = 0; i < partshape.sides.length; i++) {
        //console.log(i, partshape.sides[i].corners[0].type, partshape.sides[i].corners[1].type, partshape.sides[i].corners[2].type, partshape.sides[i].corners[3].type);        
        for (let j = 0; j < partshape.sides[i].seams.length; j++) {
            //console.log(JSON.stringify(partshape.sides[i].seams));
            if (partshape.sides[i].seams[j].isactive == 1 && partshape.sides[i].seams[j].split == 1) {
                endseamtype = partshape.sides[i].seams[j].type, endseamindex = j; endsideindex = i;
                setshapeslabpartinfo31(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, partshape, mode, source + ":" + j);
                //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
                setseamedslabpartshape30(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, mode, source);
                drawslabpart31(shape.index, mode, source);
                startseamindex = j, startsideindex = i, startseamtype = endseamtype;
                spindex++;
            }
        }
    }
    endseamtype = -1, endseamindex = -1; endsideindex = partshape.sides.length - 1;
    setshapeslabpartinfo31(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, partshape, mode, source);
    //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    setseamedslabpartshape30(spindex, startseamindex, startseamtype, startsideindex, -1, partshape.sides.length - 1, -1, partshape, mode, source);
    pshapeslabparts = pshapeslabparts.sort((a, b) => (a.index > b.index) ? 1 : -1);
   // console.log(shape.index, JSON.stringify(pshapeslabparts));
    drawslabpart31(shape.index, mode, source);   
    let npslabpartshapes = JSON.parse(JSON.stringify(pshapeslabparts));
    //console.log(JSON.stringify(npslabpartshapes));
    updatepartshapeslabparts32(partsrno, areaid, npslabpartshapes, source);
}
function setpartshapeslabpart32(index, spindex, startseamindex, startsideindex, endseamindex, endsideindex, partsrno, areaid, mode, source) {
    source += ":" + "setpartshapeslabpart32";
    let startseamtype = -1, endseamtype = -1;
    let partshape = getpartshapecopybyareaidpartsrno(partsrno, areaid);
   // console.log(JSON.stringify(partshape.slabparts));
    pshapeslabparts = [];
    if (partshape.slabparts == undefined || partshape.slabparts == null) { return;}
    pshapeslabparts = JSON.parse(JSON.stringify(partshape.slabparts));
    pshapeslabparts = pshapeslabparts.sort((a, b) => (a.index > b.index) ? 1 : -1);  
    if (startseamindex != -1) { startseamtype = partshape.sides[startsideindex].seams[startseamindex].type; }
    if (endseamindex != -1) { endseamtype = partshape.sides[endsideindex].seams[endseamindex].type; }   
    setshapeslabpartinfo32(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, partshape, mode, source);
    setseamedslabpartshape30(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, mode, source);
    //console.log("sindex:" + shape.index, "sidelen:" + shape.sides.length, "partsrno:" + partsrno, "index:" + index, "spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
}
function setpartshapeslabparts33(partshape, mode, source) { //called when seam added.
    source += ':setpartshapeslabparts33';
    //1.sceanrios 1. no slabaprt. 2. non seamed slabaprt 3. seamed slabpart     
    //partshape = parsepartshape(partshape);
    if (partshape.slabparts == undefined || partshape.slabparts == null) { partshape.slabparts = []; }
    pshapeslabparts = [];
    let partsrno = partshape.partsrno, spindex = 0, startseamindex = -1, startsideindex = 0, startseamtype = -1, endseamtype = -1, endseamindex = -1; endsideindex = -1;
    // reordershapesideseams32(partshape, source);
    pshapeslabparts = JSON.parse(JSON.stringify(partshape.slabparts));
    pshapeslabparts = pshapeslabparts.sort((a, b) => (a.index > b.index) ? 1 : -1);
    for (let i = 0; i < partshape.sides.length; i++) {
        //console.log(i, partshape.sides[i].corners[0].type, partshape.sides[i].corners[1].type, partshape.sides[i].corners[2].type, partshape.sides[i].corners[3].type);        
        for (let j = 0; j < partshape.sides[i].seams.length; j++) {
            //console.log(JSON.stringify(partshape.sides[i].seams));
            if (partshape.sides[i].seams[j].isactive == 1 && partshape.sides[i].seams[j].split == 1) {
                endseamtype = partshape.sides[i].seams[j].type, endseamindex = j; endsideindex = i;
                setshapeslabpartinfo32(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, partshape, mode, source + ":" + j);
                //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
                setseamedslabpartshape30(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, mode, source);
                drawslabpart31(shape.index, mode, source);
                startseamindex = j, startsideindex = i, startseamtype = endseamtype;
                spindex++;
            }
        }
    }
    endseamtype = -1, endseamindex = -1; endsideindex = partshape.sides.length - 1;
    setshapeslabpartinfo32(spindex, startseamindex, startsideindex, startseamtype, endseamindex, endsideindex, endseamtype, partshape, mode, source);
    //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    setseamedslabpartshape30(spindex, startseamindex, startseamtype, startsideindex, -1, partshape.sides.length - 1, -1, partshape, mode, source);
    pshapeslabparts = pshapeslabparts.sort((a, b) => (a.index > b.index) ? 1 : -1);
    //console.log(JSON.stringify(pshapeslabparts));
    drawslabpart31(shape.index, mode, source);    
}
function setseamedslabpartshape30(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, mode, source) {
  //  console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    //smtype:1-vertical, 2- angled,3-horizontal   
    let seamtype = -1; if (endseamtype == -1) { seamtype = startseamtype; } else { seamtype = endseamtype; }
    if (startseamtype == 3 || endseamtype == 3) { //1. horizontal seam       
        setseamedslabpartshape33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    } else {
        setseamedslabpartshape32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    }
}
function setseamedslabpartshape32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //1.set shape sides    
    setseamshapesides32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, source);
    resetsidesindex32();
    //2.trim seamed sides 
    trimstartseamside32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    trimendseamside32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    //3.set seamed corners 
    setstartseamsidecorners32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    setendseamsidecorners32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    //4. set seamed side sideshapes   
    setseamsideshapes32(spindex, 0, startseamindex, startsideindex, startseamtype, 1, source + ":startseamindex");
    setseamsideshapes32(spindex, shape.sides.length - 1, endseamindex, endsideindex, endseamtype, 2, source + ":endseamindex");
    //5. set seamed side seams
    setseamedsideseams32(0);
    if (shape.sides.length > 1) { setseamedsideseams32(shape.sides.length - 1); }
    //6. set seamed side cutouts
    setseamedsidecutouts32(0);
    if (shape.sides.length > 1) { setseamedsidecutouts32(shape.sides.length - 1); }
    //7.reset seamed side edges index
    resetseamedsideedgesindex32(0);
    if (shape.sides.length > 1) { resetseamedsideedgesindex32(shape.sides.length - 1); }
    //8.reset seamed side widths
    setseamedsidewidth32(0);
    if (shape.sides.length > 1) { setseamedsidewidth32(shape.sides.length - 1); }
    // console.log(spindex, shape.sides[0].w1);
}
function setseamshapesides32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, source) {
    //console.log("spindex:" + spindex, "seamtype:" + seamtype, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    //1. set seamed shape sides
    let nsides = [];
    let startsideindex1 = startsideindex;
    if (startseamtype == 2) { startsideindex1 += 1; }
    let startseamside = shape.sides[startsideindex1];
    nsides.push(startseamside);
    if ((endsideindex - startsideindex1) > 1) { for (let i = startsideindex + 1; i < endsideindex; i++) { nsides.push(shape.sides[i]); } }
    if (startsideindex1 != endsideindex) { let endseamside = shape.sides[endsideindex]; nsides.push(endseamside); }
    shape.sides = nsides;
}
function trimstartseamside32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    if (startseamindex != -1) {
        let seamside = shape.sides[0];
        let seam = partshape.sides[startsideindex].seams[startseamindex];
        let sx11 = seam.x1, sy11 = seam.y1, sx21 = seam.x2, sy21 = seam.y2, sx1 = (sx11 + sx21) / 2, sy1 = (sy11 + sy21) / 2;
        seamside.x11 = sx11, seamside.y11 = sy11, seamside.x21 = sx21, seamside.y21 = sy21, seamside.x1 = sx1, seamside.y1 = sy1;
    }
}
function trimendseamside32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    if (endseamindex != -1) {
        let seamside = shape.sides[shape.sides.length - 1];
        let seam = partshape.sides[endsideindex].seams[endseamindex];
        let sx12 = seam.x1, sy12 = seam.y1, sx22 = seam.x2, sy22 = seam.y2, sx2 = (sx12 + sx22) / 2, sy2 = (sy12 + sy22) / 2;
        seamside.x12 = sx12, seamside.y12 = sy12, seamside.x22 = sx22, seamside.y22 = sy22, seamside.x2 = sx2, seamside.y2 = sy2;
    }
}
function setstartseamsidecorners32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    // console.log("spindex:" + spindex, "seamtype:" + seamtype, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    if (startseamindex != -1) {
        let seamside = shape.sides[0];
        if (startseamtype == 1) { seamside.corners[0].type = 0, seamside.corners[1].type = 0; }
        else if (startseamtype == 2) {
            let seam = partshape.sides[startsideindex].seams[startseamindex];
            seamside.corners[0].sx1 = seam.sx1;
            seamside.corners[0].sy1 = seam.sy1;
            seamside.corners[0].split = 1;
            seamside.corners[0].seamindex = startseamindex;
            seamside.corners[1].sx1 = seam.sx2;
            seamside.corners[1].sy1 = seam.sy2;
            seamside.corners[1].split = 1;
            seamside.corners[1].seamindex = startseamindex;
            seamside.cmx11 = seam.sx1, seamside.cmy11 = seam.sy1;
            seamside.cmx21 = seam.sx2, seamside.cmy21 = seam.sy2;
        }
    }
}
function setendseamsidecorners32(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //console.log("spindex:" + spindex, "seamtype:" + seamtype, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    if (endseamindex != -1) {
        let seamside = shape.sides[shape.sides.length - 1];
        if (endseamtype == 1) { seamside.corners[2].type = 0, seamside.corners[3].type = 0; }
        else if (endseamtype == 2) {
            let seam = partshape.sides[endsideindex].seams[endseamindex];
            // console.log(seam.sx1, seam.sy1, seam.sx2, seam.sy2);
            seamside.corners[2] = JSON.parse(JSON.stringify(partshape.sides[endsideindex + 1].corners[0]));
            seamside.corners[2].index = 2;
            seamside.corners[2].sx1 = seam.sx1;
            seamside.corners[2].sy1 = seam.sy1;
            seamside.corners[2].split = 1;
            seamside.corners[2].seamindex = endseamindex;
            seamside.corners[3] = JSON.parse(JSON.stringify(partshape.sides[endsideindex + 1].corners[1]));
            seamside.corners[3].index = 3;
            seamside.corners[3].sx1 = seam.sx2;
            seamside.corners[3].sy1 = seam.sy2;
            seamside.corners[3].split = 1;
            seamside.corners[3].seamindex = endseamindex;
            seamside.cmx12 = seam.sx1, seamside.cmy12 = seam.sy1;
            seamside.cmx22 = seam.sx2, seamside.cmy22 = seam.sy2;
        }
    }
}
function setseamsideshapes32(spindex, sideindex, seamindex, seamedsideindex, seamtype, seammode, source) {
    //console.log("spindex:" + spindex, "sideindex:" + sideindex, "seamindex:" + seamindex, "seamedsideindex:" + seamedsideindex, "seammode:" + seammode, "source:" + source)
    let seamedside = shape.sides[sideindex];
    let x11 = seamedside.x11, y11 = seamedside.y11, x12 = seamedside.x12, y12 = seamedside.y12, x21 = seamedside.x21, y21 = seamedside.y21, x22 = seamedside.x22, y22 = seamedside.y22;
    let nsideshapes = [];
    for (let j = 0; j < seamedside.sideshapes.length; j++) {
        if (seamedside.sideshapes[j].isactive == 1) {
            let sideshape = JSON.parse(JSON.stringify(seamedside.sideshapes[j]));
            let sx11 = sideshape.x11, sy11 = sideshape.y11, sx12 = sideshape.x12, sy12 = sideshape.y12, sx21 = sideshape.x21, sy21 = sideshape.y21, sx22 = sideshape.x22, sy22 = sideshape.y22,
                stypeid = sideshape.typeid, sidecode = sideshape.sidecode, sw = sideshape.w, tfact1 = 0, tfact2 = 1;
            let smx11 = 0, smy11 = 0, smx12 = 0, smy12 = 0, smx21 = 0, smy21 = 0, smx22 = 0, smy22 = 0, isshapeinline = false, isseaminline = false, angle = 0, asign = -1, rx = 0, ry = 0;
            if (seamedside.smx11 == undefined || seamedside.smx11 == null) {
                seamedside.smx11 = smx11, seamedside.smy11 = smy11, seamedside.smx21 = smx21, seamedside.smy21 = smy21;
                seamedside.smx12 = smx12, seamedside.smy12 = smy12, seamedside.smx22 = smx22, seamedside.smy22 = smy22;
            }
            if (sideshape.smx11 == undefined || seamedside.smx11 == null) {
                sideshape.smx11 = smx11, sideshape.smy11 = smy11, sideshape.smx21 = smx21, sideshape.smy21 = smy21, sideshape.tfact1 = tfact1, sideshape.startseamindex = -1
                sideshape.smx12 = smx12, sideshape.smy12 = smy12, sideshape.smx22 = smx22, sideshape.smy22 = smy22, sideshape.tfact2 = tfact2, sideshape.endseamindex = -1;
            }
            smx11 = sideshape.smx11, smy11 = sideshape.smy11, smx12 = sideshape.smx12, smy12 = sideshape.smy12, smx21 = sideshape.smx21, smy21 = sideshape.smy21,
                smx22 = sideshape.smx22, smy22 = sideshape.smy22, tfact1 = sideshape.tfact1, tfact2 = sideshape.tfact2;
            //1- Bump in, 2- Bump in Angle, 3- Bump in Arc, 4- Bump Out,5- Bump out Angle, 6- Bump out Arc, 11- Full Arc                     
            if (stypeid == 1 || stypeid == 2 || stypeid == 3) { asign = 1; }
            rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
            if (stypeid == 11) {
                isshapeinline = true;
            } else {
                isshapeinline = ispointinline(x11, y11, x12, y12, sx11, sy11);
                if (!isshapeinline) { isshapeinline = ispointinline(x21, y21, x22, y22, sx12, sy12); }
                if (!isshapeinline) {
                    if (sidecode == 1) {
                        isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x11, y11);
                        if (!isshapeinline) { isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x12, y12); }
                    }
                    else if (sidecode == 2) {
                        isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x21, y21);
                        if (!isshapeinline) { isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x22, y22); }
                    }
                }
            }
            if (isshapeinline) {
                if (seamtype == 1 && seamindex != -1) {
                    let seam = seamedside.seams[seamindex], npt = {};
                    let x1 = seam.x1, y1 = seam.y1, x2 = seam.x2, y2 = seam.y2, sx1 = seam.sx1, sy1 = seam.sy1, sx2 = seam.sx2, sy2 = seam.sy2, smtype = seam.type;
                    if (sidecode == 1) {
                        if (stypeid == 11) { isseaminline = true; } else { isseaminline = ispointinline(sx11, sy11, sx12, sy12, x1, y1); }
                        if (isseaminline) {
                            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                                angle = calclineangle2(x2, y2, x1, y1, source);
                                npt = calccurveintersectpoint32(sx11, sy11, rx, ry, sx12, sy12, x1, y1, angle, asign, sw, source);
                            }
                            if (seammode == 1) {
                                smx11 = x1, smy11 = y1, smx21 = sx1, smy21 = sy1, tfact1 = npt.tfact, sideshape.startseamindex = seamindex;
                                seamedside.smx11 = smx21, seamedside.smy11 = smy21;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx11 = smx21, sideshape.smy11 = smy21, sideshape.smx21 = smx21, sideshape.smy21 = smy21;
                                } else { sideshape.smx11 = smx11, sideshape.smy11 = smy11, sideshape.smx21 = smx21, sideshape.smy21 = smy21; }
                            }
                            else if (seammode == 2) {
                                smx12 = x1, smy12 = y1, smx22 = sx1, smy22 = sy1, tfact2 = npt.tfact, sideshape.endseamindex = seamindex;
                                seamedside.smx12 = smx22, seamedside.smy12 = smy22;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx12 = smx22, sideshape.smy12 = smy22, sideshape.smx22 = smx22, sideshape.smy22 = smy22;
                                } else { sideshape.smx12 = smx12, sideshape.smy12 = smy12, sideshape.smx22 = smx22, sideshape.smy22 = smy22; }
                            }
                        }
                    } else if (sidecode == 2) {
                        if (stypeid == 11) { isseaminline = true; } else { isseaminline = ispointinline(sx11, sy11, sx12, sy12, x2, y2); }
                        if (isseaminline) {
                            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                                angle = calclineangle2(x1, y1, x2, y2, source);
                                npt = calccurveintersectpoint32(sx11, sy11, rx, ry, sx12, sy12, x2, y2, angle, asign, sw, source);
                            }
                            if (seammode == 1) {
                                smx11 = x2, smy11 = y2, smx21 = sx2, smy21 = sy2, tfact1 = npt.tfact, sideshape.startseamindex = seamindex;
                                seamedside.smx21 = smx21, seamedside.smy21 = smy21;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx11 = smx21, sideshape.smy11 = smy21, sideshape.smx21 = smx21, sideshape.smy21 = smy21;
                                } else { sideshape.smx11 = smx11, sideshape.smy11 = smy11, sideshape.smx21 = smx21, sideshape.smy21 = smy21; }
                            }
                            else if (seammode == 2) {
                                smx12 = x2, smy12 = y2, smx22 = sx2, smy22 = sy2, tfact2 = npt.tfact, sideshape.endseamindex = seamindex;
                                seamedside.smx22 = smx22, seamedside.smy22 = smy22;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx12 = smx22, sideshape.smy12 = smy22, sideshape.smx22 = smx22, sideshape.smy22 = smy22;
                                } else { sideshape.smx12 = smx12, sideshape.smy12 = smy12, sideshape.smx22 = smx22, sideshape.smy22 = smy22; }
                            }
                        }
                    }
                    //if (seammode == 1) {sideshape.smx11 = smx11, sideshape.smy11 = smy11, sideshape.smx21 = smx21, sideshape.smy21 = smy21, sideshape.tfact1 = tfact1;}
                    //else if (seammode == 2) {sideshape.smx12 = smx12, sideshape.smy12 = smy12, sideshape.smx22 = smx22, sideshape.smy22 = smy22, sideshape.tfact2 = tfact2; }
                    if (seammode == 1) { sideshape.tfact1 = tfact1; } else if (seammode == 2) { sideshape.tfact2 = tfact2; }
                }
                //sideshape.w = calchyplen(sideshape.x11, sideshape.y11, sideshape.x12, sideshape.y12);
                sideshape.dw = calchyplen(x11, y11, sx11, sy11);
                sideshape.sideindex = seamedsideindex;
                nsideshapes.push(sideshape);
                //console.log("index:" + j, "x11:" + sideshape.x11, "y11:" + sideshape.y11, "x12:" + sideshape.x12, "y12:" + sideshape.y12, "x21:" + sideshape.x21, "x11:" + sideshape.x11);
            }
            //console.log("sindex:" + shape.index, "index:" + j, "smx11:" + smx11, "smy11:" + smy11, "smx21:" + smx21, "smy21:" + smy21, "smx12:" + smx12, "smy12:" + smy12, "smx22:" + smx22, "smy22:" + smy22,
            //"tfact1:" + tfact1, "tfact2:" + tfact2, "seamindex:" + seamindex, "sidecode:" + sidecode, "seamedsideindex:" + seamedsideindex, "isshapeinline:" + isshapeinline, "seammode:" + seammode,
            // "isseaminline:" + isseaminline, "sideshapeslength" + seamedside.sideshapes.length, "seamedside:" + seamedside.x11 + "x" + seamedside.y11, "seamedside:" + seamedside.x12 + "x" + seamedside.y12, "source:" + source);

        }
    }
    // console.log(shape.index, JSON.stringify(nsideshapes));
    seamedside.sideshapes = nsideshapes;
}
function setseamedsideseams32(seamedsideindex) {
    let seamedside = shape.sides[seamedsideindex];
    let x11 = seamedside.x11, y11 = seamedside.y11, x12 = seamedside.x12, y12 = seamedside.y12;
    let nseams = [], index = 0;
    for (let j = 0; j < seamedside.seams.length; j++) {
        let sideseam = JSON.parse(JSON.stringify(seamedside.seams[j]));
        //if(sideseam.split==0){
        let sx1 = sideseam.x1, sy1 = sideseam.y1, sx2 = sideseam.x2, sy2 = sideseam.y2;
        let isinline = ispointinline(x11, y11, x12, y12, sx1, sy1);
        if (isinline) {
            sideseam.index = index;
            sideseam.sideindex = seamedsideindex;
            // console.log(seamedsideindex, JSON.stringify(sideseam));
            nseams.push(sideseam);
            index++;
        }
        //}
    }
    seamedside.seams = nseams;

}
function setseamedsidecutouts32(seamedsideindex) {
    let seamedside = shape.sides[seamedsideindex];
    let x11 = seamedside.x11, y11 = seamedside.y11, x12 = seamedside.x12, y12 = seamedside.y12;
    let ncutouts = [];
    //work on logic later
    //for (let j = 0; j < seamedside.cutouts.length; j++) {
    //    let cutout = JSON.parse(JSON.stringify(seamedside.cutouts[j]));
    //    let sx1 = cutout.x, sy1 = cutout.y, w = cutout.w, h = cutout.h;
    //    let isinline = ispointinline(x11, y11, x12, y12, sx1, sy1);
    //    if (isinline) { ncutouts.push(cutout); }
    //}
    seamedside.cutouts = ncutouts;
}
function resetsidesindex32() {
    for (let j = 0; j < shape.sides.length; j++) {
        shape.sides[j].index = j;
    }
}
function resetseamedsideedgesindex32(seamedsideindex) {
    let seamedside = shape.sides[seamedsideindex];
    for (let j = 0; j < seamedside.edges.length; j++) {
        seamedside.edges[j].sideindex = seamedside.index;
    }
}
function setseamedsidewidth32(seamsideindex) {
    let seamside = shape.sides[seamsideindex];
    seamside.w = applymminchfact(calchyplen(seamside.x1, seamside.y1, seamside.x2, seamside.y2), 2, 2);
    seamside.w1 = applymminchfact(calchyplen(seamside.x11, seamside.y11, seamside.x12, seamside.y12), 2, 2);
    seamside.w2 = applymminchfact(calchyplen(seamside.x21, seamside.y21, seamside.x22, seamside.y22), 2, 2);
}
function setseamedslabpartshape33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    //1.set shape sides    -- rectangle shape 1 side only   
    //2.trim seamed sides 
    trimstartseamside33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    trimendseamside33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    //3.set seamed corners 
    setstartseamsidecorners33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    setendseamsidecorners33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source);
    //4. set seamed side sideshapes
    if (startseamindex != -1) { setseamsideshapes33(spindex, 0, startseamindex, startsideindex, startseamtype, 1, source + ":startseamindex"); }
    if (endseamindex != -1) { setseamsideshapes33(spindex, 0, endseamindex, endsideindex, endseamtype, 2, source + ":endseamindex"); }
    ////5. set seamed side seams
    setseamedsideseams33(0);
    //6. set seamed side cutouts
    setseamedsidecutouts32(0);
    //7.reset seamed side edges index
    resetseamedsideedgesindex32(0);
    //8.reset seamed side heights
    setseamedsideheight33(0);
}
function trimstartseamside33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    if (startseamindex != -1) {
        let seamside = shape.sides[0];
        let seam = partshape.sides[startsideindex].seams[startseamindex];
        let sx1 = seam.x1, sy1 = seam.y1, sx2 = seam.x2, sy2 = seam.y2;
        seamside.x11 = sx1, seamside.y11 = sy1, seamside.x12 = sx2, seamside.y12 = sy2;
    }
}
function trimendseamside33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //console.log("spindex:" + spindex, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    if (endseamindex != -1) {
        let seamside = shape.sides[0];
        let seam = partshape.sides[startsideindex].seams[endseamindex];
        let sx1 = seam.x1, sy1 = seam.y1, sx2 = seam.x2, sy2 = seam.y2;
        seamside.x21 = sx1, seamside.y21 = sy1, seamside.x22 = sx2, seamside.y22 = sy2;
    }
}
function setstartseamsidecorners33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    // console.log("spindex:" + spindex, "seamtype:" + seamtype, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    let seamside = shape.sides[0];
    if (startseamindex != -1) { seamside.corners[0].type = 0, seamside.corners[2].type = 0; } else { seamside.corners[1].type = 0, seamside.corners[3].type = 0; }
}
function setendseamsidecorners33(spindex, startseamindex, startseamtype, startsideindex, endseamindex, endsideindex, endseamtype, partshape, source) {
    //console.log("spindex:" + spindex, "seamtype:" + seamtype, "startseamindex:" + startseamindex, "startseamtype:" + startseamtype, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "endseamtype:" + endseamtype, "source:" + source);
    let seamside = shape.sides[0];
    if (endseamindex != -1) { seamside.corners[1].type = 0, seamside.corners[3].type = 0; } else { seamside.corners[0].type = 0, seamside.corners[2].type = 0; }
}
function setseamsideshapes33(spindex, sideindex, seamindex, seamedsideindex, seamtype, seammode, source) {
    //console.log("spindex:" + spindex, "sideindex:" + sideindex, "seamindex:" + seamindex, "seamedsideindex:" + seamedsideindex, "seammode:" + seammode, "source:" + source)
    let seamedside = shape.sides[0];
    let x11 = seamedside.x11, y11 = seamedside.y11, x12 = seamedside.x12, y12 = seamedside.y12, x21 = seamedside.x21, y21 = seamedside.y21, x22 = seamedside.x22, y22 = seamedside.y22;
    let nsideshapes = [];
    for (let j = 0; j < seamedside.sideshapes.length; j++) {
        if (seamedside.sideshapes[j].isactive == 1) {
            let sideshape = JSON.parse(JSON.stringify(seamedside.sideshapes[j]));
            let sx11 = sideshape.x11, sy11 = sideshape.y11, sx12 = sideshape.x12, sy12 = sideshape.y12, sx21 = sideshape.x21, sy21 = sideshape.y21, sx22 = sideshape.x22, sy22 = sideshape.y22,
                stypeid = sideshape.typeid, sidecode = sideshape.sidecode, sw = sideshape.w, tfact1 = 0, tfact2 = 1;
            let smx11 = 0, smy11 = 0, smx12 = 0, smy12 = 0, smx21 = 0, smy21 = 0, smx22 = 0, smy22 = 0, isshapeinline = false, isseaminline = false, angle = 0, asign = -1, rx = 0, ry = 0;
            if (sideshape.smx11 == undefined) {
                sideshape.smx11 = smx11, sideshape.smy11 = smy11, sideshape.smx21 = smx21, sideshape.smy21 = smy21, sideshape.tfact1 = tfact1;
                sideshape.smx12 = smx12, sideshape.smy12 = smy12, sideshape.smx22 = smx22, sideshape.smy22 = smy22, sideshape.tfact2 = tfact2;
            }
            smx11 = sideshape.smx11, smy11 = sideshape.smy11, smx12 = sideshape.smx12, smy12 = sideshape.smy12, smx21 = sideshape.smx21, smy21 = sideshape.smy21,
                smx22 = sideshape.smx22, smy22 = sideshape.smy22, tfact1 = sideshape.tfact1, tfact2 = sideshape.tfact2;
            //1- Bump in, 2- Bump in Angle, 3- Bump in Arc, 4- Bump Out,5- Bump out Angle, 6- Bump out Arc, 11- Full Arc    
            if (stypeid == 1 || stypeid == 2 || stypeid == 3) { asign = 1; }
            rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
            if (stypeid == 11) {
                isshapeinline = true;
            } else {
                isshapeinline = ispointinline(x11, y11, x21, y21, sx11, sy11);
                if (!isshapeinline) { isshapeinline = ispointinline(x12, y12, x22, y22, sx12, sy12); }
                if (!isshapeinline) {
                    if (sidecode == 0) {
                        isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x11, y11);
                        if (!isshapeinline) { isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x12, y12); }
                    }
                    else if (sidecode == 3) {
                        isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x21, y21);
                        if (!isshapeinline) { isshapeinline = ispointinline(sx11, sy11, sx12, sy12, x22, y22); }
                    }
                }
            }
            if (isshapeinline) {
                if (seamtype == 3 && seamindex != -1) {
                    let seam = seamedside.seams[seamindex], npt = {};
                    let x1 = seam.x1, y1 = seam.y1, x2 = seam.x2, y2 = seam.y2, sx1 = seam.sx1, sy1 = seam.sy1, sx2 = seam.sx2, sy2 = seam.sy2, smtype = seam.type;
                    if (sidecode == 0) {
                        if (stypeid == 11) { isseaminline = true; } else { isseaminline = ispointinline(sx11, sy11, sx12, sy12, x1, y1); }
                        if (isseaminline) {
                            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                                angle = calclineangle2(x2, y2, x1, y1, source);
                                npt = calccurveintersectpoint32(sx11, sy11, rx, ry, sx12, sy12, x1, y1, angle, asign, sw, source);
                            }
                            if (seammode == 1) {
                                smx11 = x1, smy11 = y1, smx21 = sx1, smy21 = sy1, tfact1 = npt.tfact, sideshape.startseamindex = seamindex;
                                seamedside.smx11 = smx21, seamedside.smy11 = smy21;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx11 = smx21, sideshape.smy11 = smy21, sideshape.smx21 = smx21, sideshape.smy21 = smy21;
                                } else { sideshape.smx11 = smx11, sideshape.smy11 = smy11, sideshape.smx21 = smx21, sideshape.smy21 = smy21; }
                            }
                            else if (seammode == 2) {
                                smx12 = x1, smy12 = y1, smx22 = sx1, smy22 = sy1, tfact2 = npt.tfact, sideshape.endseamindex = seamindex;
                                seamedside.smx21 = smx22, seamedside.smy21 = smy22;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx12 = smx22, sideshape.smy12 = smy22, sideshape.smx22 = smx22, sideshape.smy22 = smy22;
                                } else { sideshape.smx12 = smx12, sideshape.smy12 = smy12, sideshape.smx22 = smx22, sideshape.smy22 = smy22; }
                            }
                        }
                    } else if (sidecode == 3) {
                        if (stypeid == 11) { isseaminline = true; } else { isseaminline = ispointinline(sx11, sy11, sx12, sy12, x2, y2); }
                        if (isseaminline) {
                            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                                angle = calclineangle2(x1, y1, x2, y2, source);
                                npt = calccurveintersectpoint32(sx11, sy11, rx, ry, sx12, sy12, x2, y2, angle, asign, sw, source);
                            }
                            if (seammode == 1) {
                                smx11 = x2, smy11 = y2, smx21 = sx2, smy21 = sy2, tfact1 = npt.tfact;
                                seamedside.smx12 = smx21, seamedside.smy12 = smy21;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx11 = smx21, sideshape.smy11 = smy21, sideshape.smx21 = smx21, sideshape.smy21 = smy21;
                                } else { sideshape.smx11 = smx11, sideshape.smy11 = smy11, sideshape.smx21 = smx21, sideshape.smy21 = smy21; }
                            } else if (seammode == 2) {
                                smx12 = x2, smy12 = y2, smx22 = sx2, smy22 = sy2, tfact2 = npt.tfact;
                                seamedside.smx22 = smx22, seamedside.smy22 = smy22;
                                if (stypeid == 1 || stypeid == 2 || stypeid == 3) {
                                    sideshape.smx12 = smx22, sideshape.smy12 = smy22, sideshape.smx22 = smx22, sideshape.smy22 = smy22;
                                } else { sideshape.smx12 = smx12, sideshape.smy12 = smy12, sideshape.smx22 = smx22, sideshape.smy22 = smy22; }
                            }
                        }
                    }
                    if (seammode == 1) { sideshape.tfact1 = tfact1, sideshape.startseamindex = seamindex; } else if (seammode == 2) { sideshape.tfact2 = tfact2, sideshape.endseamindex = seamindex; }
                }
                sideshape.dw = calchyplen(x11, y11, sx11, sy11);
                sideshape.sideindex = seamedsideindex;
                nsideshapes.push(sideshape);
            }
            //console.log("sindex:" + shape.index, "index:" + j, "smx11:" + smx11, "smy11:" + smy11, "smx21:" + smx21, "smy21:" + smy21, "smx12:" + smx12, "smy12:" + smy12, "smx22:" + smx22, "smy22:" + smy22,
            //"tfact1:" + tfact1, "tfact2:" + tfact2, "seamindex:" + seamindex, "sidecode:" + sidecode, "seamedsideindex:" + seamedsideindex, "isshapeinline:" + isshapeinline,
            // "isseaminline:" + isseaminline, "sideshapeslength" + seamedside.sideshapes.length, "source:" + source);
        }
    }
    seamedside.sideshapes = nsideshapes;
}
function setseamedsideseams33(seamedsideindex) {
    let seamedside = shape.sides[seamedsideindex];
    let x11 = seamedside.x11, y11 = seamedside.y11, x21 = seamedside.x21, y21 = seamedside.y21;
    let nseams = [];
    for (let j = 0; j < seamedside.seams.length; j++) {
        let sideseam = JSON.parse(JSON.stringify(seamedside.seams[j]));
        //if(sideseam.split==0){
        let sx1 = sideseam.x1, sy1 = sideseam.y1, sx2 = sideseam.x2, sy2 = sideseam.y2;
        let isinline = ispointinline(x11, y11, x21, y21, sx1, sy1); // inline test doesn't work for parallel lines with sides. So used vertical sides to test
        let isinline1 = ispointinline(x11, y11, x21, y21, sx2, sy2);
        if (isinline) { nseams.push(sideseam); }
        //}
    }
    seamedside.seams = nseams;
}
function setseamedsideheight33(seamedsideindex) {
    let seamside = shape.sides[seamedsideindex];
    let x11 = seamside.x11, y11 = seamside.y11, x12 = seamside.x12, y12 = seamside.y12, x21 = seamside.x21, y21 = seamside.y21, x22 = seamside.x22, y22 = seamside.y22;
    let x1 = (x11 + x21) / 2, y1 = (y11 + y21) / 2, x2 = (x12 + x22) / 2, y2 = (y12 + y22) / 2;
    seamside.x1 = x1, seamside.y1 = y1, seamside.x2 = x2, seamside.y2 = y2;
    seamside.h = applymminchfact(calchyplen(x11, y11, x21, y21), 2, 2);
}
function onsetslabpartshape31(index, spindex, startseamindex, startsideindex, endseamindex, endsideindex, partsrno, areaid, mode, source) {
    //console.log("index:" + index, "spindex:" + spindex, "startseamindex:" + startseamindex, "startsideindex:" + startsideindex, "endseamindex:" + endseamindex, "endsideindex:" + endsideindex, "partsrno:" + partsrno, "areaid:" + areaid, "mode:" + mode, "source:" + source);
    setpartshapeslabpart32(index, spindex, startseamindex, startsideindex, endseamindex, endsideindex, partsrno, areaid, mode, source);
    setshapegroups31(index, mode, source);
}
function ondragendslabpart32(source) {   
    //1. slabpart slab - check boundaries  
    oncheckslabpartslabbounds34(source);
    //if (layoutmode == 2) { }
    onsetslabpartclipimage32();
    setslabpart32(shape.spindex, source);
    //2. dig slabpart layout 
}
function ondragslabpartshape32(ndx, ndy, stx, sty, source) {
    //shapeouterg.attr("pointer-events", "none");
    let sgscale = getslabpartshapesgscale();
    shape.tx = Math.round(ndx), shape.ty = Math.round(ndy), shape.tscale = zscale;
    transformslabpartshape32();
    if (!isslabpartinbounds32(sgscale, source)) {
        shape.tx = stx, shape.ty = sty;
        transformslabpartshape32();
    }   
}
function onaddslabpartseam32(index, sideindex, source) {
    let partshape = getpartshapecopybyareaidpartsrno(shape.partsrno, shape.areaid);
    //console.log(JSON.stringify(partshape.slabparts))
    setpartshapeslabparts33(partshape, shape.mode, source);
}
function onrotateslabpart32(type, index, angle, source) {
    if (shape.angle == undefined) { return; }
    if (!shapeg.empty()) {
        if (type == 0) { shape.angle = angle; }
        else if (type == 1) { shape.angle += angle; }
        else if (type == -1) { shape.angle -= angle; }
        setshapecentercords32(source);
        rotateslabpart33(index, source);       
        onsetslabpartclipimage32();
        setslabpart32(shape.spindex, source);
    }
}
function ondeleteslabpartseam32(index, sideindex, startseamindex, startsideindex, sindex, type, source) {
    removeshapecontrols();
    let partshape = getpartshapecopybyareaidpartsrno(shape.partsrno, shape.areaid);
    setpartshapeslabparts31(partshape, shape.mode, source);
}
function ondragslabpartseam32(index, sideindex, source) {
    let partshape = getpartshapecopybyareaidpartsrno(shape.partsrno, shape.areaid);
    setpartshapeslabparts31(partshape, shape.mode, source);
}
function onseamslabpart32(index, sideindex, startseamindex, startsideindex, seamtype, source) {
    removeshapecontrols();
   // console.log(index, sideindex, seamtype, shape.mode, shape.index, shape.spindex, shape.partsrno, shape.areaid);
    let partshape = getpartshapecopybyareaidpartsrno(shape.partsrno, shape.areaid);
    partshape.sides[startsideindex].seams[startseamindex].split = 1;
    setpartshapeslabparts31(partshape, shape.mode, source);
}
function ondeleteslabpart32(index, sideindex, spindex, startseamindex, startsideindex, source) {
    removeshapecontrols();
    //$("#slabpartouter" + shape.index).remove();
    removeslabpartshapes32();
    removedgshapeslabparts32(shape.partsrno, shape.spindex, shape.areaid, source);
    //1.get part and set partshape
    let partshape = getpartshapecopybyareaidpartsrno(shape.partsrno, shape.areaid);
    //4. set part slabparts  
    setpartshapeslabparts31(partshape, shape.mode, source);
}
function drawslabpart31(index, mode, source) {
    source + ':drawslabpart31'
    let areashapeindex = shape.areaid + "" + index;
    let tmpshapeouterg = mslabpartsg.select("#slabpartouter" + areashapeindex);
    if (!tmpshapeouterg.empty()) { tmpshapeouterg.selectAll('*').remove(); }
    //console.log(index, shape.sides.length);
    if (shape.layout == 1) {
        setshapegroups31(index, mode, source);
        drawslabpartsides32(source);
        transformshape();
        if (shape.angle != 0) {
            rotateslabpart33(index, source);
            setslabpart32(shape.spindex, source);
        }
    }    
}
function rotateslabpart33(index, source) {
    if (shape.angle == undefined) { return; }
    let npt = {};
    let areashapeindex = shape.areaid + "" + index;
    if (!shapeg.empty()) {
        if (shape.rtx == undefined) { setshapecentercords32(source); }
        let npt = [shape.rtx, shape.rty];
        shapeg.attr("transform", "rotate(" + shape.angle + "," + npt + ")");
        $('#shapectlinputangle' + areashapeindex).val(shape.angle);
    }
}
function setslabpartcoords() {
    let shapeoutergcoords = bboxcoords(shapeouterg);
    let slabgcoords = bboxcoords(mslabsg);
    let partshapey = 0;
    partshapey = -shape.y + shapeoutergcoords.h + slabparty;
    if (shape.sides.length > 1) { partshapey += shape.h / 2; }
    let partshapex = -shape.x + slabgcoords.w;
    shape.tx = partshapex;
    shape.ty = partshapey;
    slabparty += 20;
}
function removeslabpartshapes32() {
    for (let i = 0; i < shape.slabparts.length; i++) {
        let spindex = shape.areaid + "" + shape.partsrno + "" + i;
        $("#slabpartouter" + spindex).remove();
    }
}
function deleteslabpartshapes1(partshape) {
    if (partshape.slabparts != null && partshape.slabparts != 'null') {
        for (let i = 0; i < partshape.slabparts.length; i++) {
            let spindex = partshape.areaid + "" + partshape.partsrno + "" + i;
            $("#slabpartouter" + spindex).remove();
        }
    }
}
function onsetslabpartslabinfo32(source) {
    let mslablist = getmatslablistbymaterialid(shape.materialid);
    let onshapeslabmode = -1;
    for (let i = 0; i < shape.sides.length; i++) {
        let sidepathindex = shape.areaid + "" + shape.index + "" + i;
        let slabpartsidepathEle = document.querySelector("#" + "slabpartsidepath" + sidepathindex);
        let onsideslabmode = setslabpartslabinfo32(shape.materialid, slabpartsidepathEle, mslablist);
        if (onsideslabmode == 3) {
            if (onshapeslabmode == -1) { onshapeslabmode = onsideslabmode; }
        } else { onshapeslabmode = onsideslabmode; }
        //console.log(onsideslabmode, onshapeslabmode, shape.color);
        //break;
    }
    shape.color = slabpartsplashfillcolor(onshapeslabmode);
    // console.log(onshapeslabmode, shape.color);
    for (let i = 0; i < shape.sides.length; i++) {
        let sidepathindex = shape.areaid + "" + shape.index + "" + i;
        let slabpartsidepathg = d3.select("#" + "slabpartsidepath" + sidepathindex);
        slabpartsidepathg.attr("style", "fill:" + shape.color).style("fill-opacity", "0.2");
    }
}
function onsetslabsplashslabinfo32(source) {
    let mslablist = getmatslablistbymaterialid(shape.materialid);
    for (let i = 0; i < shape.sides.length; i++) {
        let sidepathindex = shape.areaid + "" + shape.index + "" + i;
        let slabpartsidepathEle = document.querySelector("#" + "slabpartsidepath" + sidepathindex);
        let onslabmode = setslabsplashslabinfo32(shape.materialid, slabpartsidepathEle, mslablist);
        //console.log(onslabmode, shape.color);
        let slabpartsidepathg = d3.select("#" + "slabpartsidepath" + sidepathindex);
        slabpartsidepathg.attr("style", "fill:" + shape.color).style("fill-opacity", "0.2");
        break;
    }
}
function drawslabpartsides32(source) {
    if (shape.sides != null) {
        let shapesidesegs = getshapesidesegs32(source);
        drawslabpartsidelines32(shapesidesegs, source);
        drawslabpartshapepath32(shapesidesegs, source);            
        for (let j = 0; j < shape.sides.length; j++) {
            drawsideseams(j);
        }
        drawshapeangles();
    }
}
function getshapesidesegs32(source) {
    let shapesidesegs = [];
    if (shape.startseamtype == 3 || shape.endseamtype == 3) {
        setslabpartsidesegs33(shapesidesegs, source);
    } else { setslabpartsidesegs32(shapesidesegs, source); }
    return shapesidesegs;
}
function getslabpartdgshapesidepath33(source) {
    let shapesidesegs = getshapesidesegs32(source);
    let spath = setslabpartshapepath32(shapesidesegs, source);
    return spath;
}

function getslabpartdgshapesidepath33(source) {
    let shapesidesegs = [];
    if (shape.startseamtype == 3 || shape.endseamtype == 3) {
        setslabpartsidesegs33(shapesidesegs, source);
    } else { setslabpartsidesegs32(shapesidesegs, source); }
    let spath = setslabpartshapepath32(shapesidesegs, source);
    return spath;
}
function setslabpartsidesegs32(shapesidesegs, source) {
    for (let i = 0; i < shape.sides.length; i++) {setsidecodesegs321(i, 1, shapesidesegs, source);}
    setsidecodesegs323(shape.sides.length - 1, 3, shapesidesegs, source);//sidecode =3
    for (let i = shape.sides.length - 1; i >= 0; i--) { setsidecodesegs322(i, 2, shapesidesegs, source); }//sidecode =2 -reverse
    setsidecodesegs320(0, 0, shapesidesegs, source);//sidecode =0  - reverse 
}
function setslabpartsidesegs33(shapesidesegs, source) {
    setsidecodesegs321(0, 1, shapesidesegs, source);//sidecode =1
    setsidecodesegs323(0, 3, shapesidesegs, source);//sidecode =3
    setsidecodesegs322(0, 2, shapesidesegs, source);//sidecode =2 -reverse
    setsidecodesegs320(0, 0, shapesidesegs, source);//sidecode =0 -reverse 
}
function setsidecodesegs321(sideindex, sidecode, shapesidesegs, source) {
    let segx1 = 0, segy1 = 0, segx2 = 0, segy2 = 0;
    let npt1 = setstartsidecodesegpos321(sideindex, sidecode, shapesidesegs, source);
    segx1 = npt1.segx1, segy1 = npt1.segy1;
    let npt = setsideshapesegs31(sideindex, sidecode, segx1, segy1, shapesidesegs, source);
    segx1 = npt.segx1, segy1 = npt.segy1;
    let npt2 = setendsidecodesegpos321(sideindex, sidecode, shapesidesegs, source);
    segx2 = npt2.segx2, segy2 = npt2.segy2;
    shapesidesegs.push({ x1: segx1, y1: segy1, x2: segx2, y2: segy2, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    setendsidecornersegs321(sideindex, sidecode, segx2, segy2, shapesidesegs, source);
}
function setsidecodesegs323(sideindex, sidecode, shapesidesegs, source) {
    let segx1 = 0, segy1 = 0, segx2 = 0, segy2 = 0;
    let npt1 = setstartsidecodesegpos323(sideindex, sidecode, source);
    segx1 = npt1.segx1, segy1 = npt1.segy1;
    let npt = setsideshapesegs31(sideindex, sidecode, segx1, segy1, shapesidesegs, source);
    segx1 = npt.segx1, segy1 = npt.segy1;
    let npt2 = setendsidecodesegpos323(sideindex, sidecode, shapesidesegs, source);
    segx2 = npt2.segx2, segy2 = npt2.segy2;
    shapesidesegs.push({ x1: segx1, y1: segy1, x2: segx2, y2: segy2, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    setendsidecornersegs323(sideindex, sidecode, shapesidesegs, source);
}
function setsidecodesegs322(sideindex, sidecode, shapesidesegs, source) {
    let segx1 = 0, segy1 = 0, segx2 = 0, segy2 = 0;
    //reverse side first end and then start
    let npt2 = setendsidecodesegpos322(sideindex, sidecode, shapesidesegs, source);
    segx2 = npt2.segx2, segy2 = npt2.segy2;
    let npt = setsideshapesegs32(sideindex, sidecode, segx2, segy2, shapesidesegs, source);
    segx2 = npt.segx1, segy2 = npt.segy1;
    let npt1 = setstartsidecodesegpos322(sideindex, sidecode, shapesidesegs, source);
    segx1 = npt1.segx1, segy1 = npt1.segy1;
    shapesidesegs.push({ x1: segx2, y1: segy2, x2: segx1, y2: segy1, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    setendsidecornersegs322(sideindex, sidecode, segx1, segy1, shapesidesegs, source);
}
function setsidecodesegs320(sideindex, sidecode, shapesidesegs, source) {
    let segx1 = 0, segy1 = 0, segx2 = 0, segy2 = 0;
    //reverse side first end and then start
    let npt2 = setendsidecodesegpos320(sideindex, sidecode, source);
    segx2 = npt2.segx2, segy2 = npt2.segy2;
    let npt = setsideshapesegs32(sideindex, sidecode, segx2, segy2, shapesidesegs, source);
    segx2 = npt.segx1, segy2 = npt.segy1;
    let npt1 = setstartsidecodesegpos320(sideindex, sidecode, source);
    segx1 = npt1.segx1, segy1 = npt1.segy1;
    shapesidesegs.push({ x1: segx2, y1: segy2, x2: segx1, y2: segy1, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    setendsidecornersegs320(sideindex, sidecode, shapesidesegs, source);
}
function setstartsidecodesegpos321(sideindex, sidecode, shapesidesegs, source) {
    let cindex = 0;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let segx1 = side.x11, segy1 = side.y11, smx11 = side.smx11, smy11 = side.smy11, cmx11 = side.cmx11, cmy11 = side.cmy11,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        //if (csplit == 1) {
        //    segx1 = cx2, segy1 = cy2;
        //    shapesidesegs.push({ x1: cmx11, y1: cmy11, x2: segx1, y2: segy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, sidecode: sidecode, sideindex: sideindex });
        //} else { segx1 = cx2, segy1 = cy2; }
        segx1 = cx2, segy1 = cy2;
        //console.log("sindex:" + shape.index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segx1:" + segx1, "segy1:" + segy1);
    } else {
        if (smx11 != undefined && smx11 != 0) { segx1 = smx11, segy1 = smy11; }
    }
    return { segx1: segx1, segy1: segy1 };
}
function setendsidecodesegpos321(sideindex, sidecode, shapesidesegs, source) {
    let cindex = 0;
    let side = shape.sides[sideindex], corner = {};
    if (sideindex < shape.sides.length - 1) { corner = shape.sides[sideindex + 1].corners[cindex]; } else { cindex = 2, corner = side.corners[cindex]; }
    let segx2 = side.x12, segy2 = side.y12, smx12 = side.smx12, smy12 = side.smy12, cmx12 = side.cmx12, cmy12 = side.cmy12,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) {segx2 = cx3, segy2 = cy3;}
        else {
            if (sideindex < shape.sides.length - 1) { segx2 = cx3, segy2 = cy3; } else { segx2 = cx2, segy2 = cy2; }
        }
    } else {
        if (smx12 != undefined && smx12 != 0) { segx2 = smx12, segy2 = smy12; }
    }
    //console.log("sindex:" + shape.index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segx2:" + segx2, "segy2:" + segy2);
    return { segx2: segx2, segy2: segy2 };
}
function setstartsidecodesegpos322(sideindex, sidecode, shapesidesegs, source) {
    let cindex = 1;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let segx1 = side.x21, segy1 = side.y21, smx21 = side.smx21, smy21 = side.smy21, cmx21 = side.cmx21, cmy21 = side.cmy21,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        segx1 = cx2, segy1 = cy2;
    } else {
        if (smx21 != undefined && smx21 != 0) { segx1 = smx21, segy1 = smy21; }
    }
    return { segx1: segx1, segy1: segy1 };
}
function setendsidecodesegpos322(sideindex, sidecode, shapesidesegs, source) {
    let cindex = 1;
    let side = shape.sides[sideindex], corner = {};
    if (sideindex < shape.sides.length - 1) { corner = shape.sides[sideindex + 1].corners[cindex]; } else { cindex = 3, corner = side.corners[cindex]; }
    let segx2 = side.x22, segy2 = side.y22, smx22 = side.smx22, smy22 = side.smy22, cmx22 = side.cmx22, cmy22 = side.cmy22,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) {
            segx2 = cx3, segy2 = cy3;
            // shapesidesegs.push({ x1: cmx22, y1: cmy22, x2: segx2, y2: segy2, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, sidecode: sidecode, sideindex: sideindex });
        } else {
            if (sideindex < shape.sides.length - 1) { segx2 = cx3, segy2 = cy3; } else { segx2 = cx2, segy2 = cy2; }
        }
    } else {
        if (smx22 != undefined && smx22 != 0) { segx2 = smx22, segy2 = smy22; }
    }
    return { segx2: segx2, segy2: segy2 };
}
function setstartsidecodesegpos323(sideindex, sidecode, source) {
    let cindex = 2;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let segx1 = side.x12, segy1 = side.y12, smx12 = side.smx12, smy12 = side.smy12, cmx12 = side.cmx12, cmy12 = side.cmy12,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) { segx1 = cmx12, segy1 = side.cmy12; } else { segx1 = cx3, segy1 = cy3; }
    } else {
        if (smx12 != undefined && smx12 != 0) { segx1 = smx12, segy1 = smy12; }
    }
    // console.log("sindex:" + shape.index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segx1:" + segx1, "segy1:" + segy1);
    return { segx1: segx1, segy1: segy1 };
}
function setendsidecodesegpos323(sideindex, sidecode, shapesidesegs, source) {
    let cindex = 3;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let segx2 = side.x22, segy2 = side.y22, smx22 = side.smx22, smy22 = side.smy22, cmx22 = side.cmx22, cmy22 = side.cmy22,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) { segx2 = cmx22, segy2 = cmy22; } else { segx2 = cx3, segy2 = cy3; }
    } else {
        if (smx22 != undefined && smx22 != 0) { segx2 = smx22, segy2 = smy22; }
    }
    // console.log("sindex:" + shape.index, "cindex:" + cindex, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "cmx22:" + cmx22, "cmy22:" + cmy22, "segx2:" + segx2, "segy2:" + segy2);
    return { segx2: segx2, segy2: segy2 };
}
function setstartsidecodesegpos320(sideindex, sidecode, source) {
    let cindex = 0;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let segx1 = side.x11, segy1 = side.y11, smx11 = side.smx11, smy11 = side.smy11, cmx11 = side.cmx11, cmy11 = side.cmy11,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) { segx1 = cmx11, segy1 = cmy11; } else { segx1 = cx3, segy1 = cy3; }
    } else {
        if (smx11 != undefined && smx11 != 0) { segx1 = smx11, segy1 = smy11; }
    }
    return { segx1: segx1, segy1: segy1 };
}
function setendsidecodesegpos320(sideindex, sidecode, source) {
    let cindex = 1;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let segx2 = side.x21, segy2 = side.y21, smx21 = side.smx21, smy21 = side.smy21, cmx21 = side.cmx21, cmy21 = side.cmy21
    cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) { segx2 = cmx21, segy2 = cmy21; } else { segx2 = cx3, segy2 = cy3; }
    } else { if (smx21 != undefined && smx21 != 0) { segx2 = smx21, segy2 = smy21; } }
    return { segx2: segx2, segy2: segy2 };
}
function setendsidecornersegs321(sideindex, sidecode, segx2, segy2, shapesidesegs, source) {
    let cindex = 0, segmode = 3;
    let side = shape.sides[sideindex], corner = {};
    if (sideindex < shape.sides.length - 1) { corner = shape.sides[sideindex + 1].corners[cindex]; } else { cindex = 2, corner = side.corners[cindex]; }
    let smx12 = side.smx12, smy12 = side.smy12, cmx12 = side.cmx12, cmy12 = side.cmy12,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) {
            setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, 'setendsidecornersegs321');
            //shapesidesegs.push({ x1: segx2, y1: segy2, x2: cmx12, y2: cmy12, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: cindex, sidecode: sidecode, sideindex: sideindex });
            // segx2 = cmx12, segy2 = cmy12;
        } else {
            if (sideindex < shape.sides.length - 1) { segx2 = cx3, segy2 = cy3; } else { segx2 = cx2, segy2 = cy2; segmode = 2; }
            setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, 'setendsidecornersegs321');
        }
    }
    // console.log("sindex:" + shape.index, "cindex:" + cindex, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "cmx12:" + cmx12, "cmy12:" + cmy12, "segx2:" + segx2, "segy2:" + segy2, "segmode:" + segmode);
}
function setendsidecornersegs323(sideindex, sidecode, shapesidesegs, source) {
    let cindex = 3, segmode = 3;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let segx2 = side.x22, segy2 = side.y22, ctype = corner.type, cx3 = corner.x3, cy3 = corner.y3;
    if (ctype != 0) {
        segx2 = cx3, segy2 = cy3;
        setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, 'setendsidecornersegs323');
    }
}
function setendsidecornersegs322(sideindex, sidecode, segx1, segy1, shapesidesegs, source) {
    let cindex = 1, segmode = 2;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    let smx21 = side.smx21, smy21 = side.smy21, cmx21 = side.cmx21, cmy21 = side.cmy21,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        if (csplit == 1) {
            setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, 'setendsidecornersegs322');
            //shapesidesegs.push({ x1: segx1, y1: segy1, x2: cmx21, y2: cmy21, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: cindex, sidecode: sidecode, sideindex: sideindex });
        } else { setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, 'setendsidecornersegs322'); }
    }
}
function setendsidecornersegs320(sideindex, sidecode, shapesidesegs, source) {
    let cindex = 0, segmode = 3, ctype = 0;
    let side = shape.sides[sideindex], corner = side.corners[cindex];
    ctype = corner.type;
    if (ctype != 0) {
        setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, 'setendsidecornersegs320');
    }
}
function setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, source) {
    let ctype = corner.type;
   // console.log(sideindex, sidecode, segmode, ctype);
    if (ctype == 1) {
        setsidecornersegs321(sideindex, sidecode, segmode, corner, shapesidesegs, source);
    } else if (ctype == 2) {
        setsidecornersegs322(sideindex, sidecode, segmode, corner, shapesidesegs, source)
    } else if (ctype == 3) {
        setsidecornersegs323(sideindex, sidecode, segmode, corner, shapesidesegs, source)
    } else if (ctype == 4) {
        setsidecornersegs324(sideindex, sidecode, segmode, corner, shapesidesegs, source)
    }
}
function setsidecornersegs321(sideindex, sidecode, segmode, corner, shapesidesegs, source) {
    let index = corner.index, cx1 = corner.x1, cy1 = corner.y1, cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, csmx1 = corner.sx1, csmy1 = corner.sy1, cw = corner.w, ch = corner.h, cr = corner.r,
        ctype = corner.type, swflag = -1, csplit = corner.split;
    if (segmode == 3) {
        if (csplit == 1) {
           // console.log("sindex:" + shape.index, "cindex:" + index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segmode:" + segmode, "source:" + source);
            if (index == 0) { shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: cx2, y2: cy2, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex }); }
            else if (index == 2) { shapesidesegs.push({ x1: cx3, y1: cy3, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex }); }
            else if (index == 3) { shapesidesegs.push({ x1: cx3, y1: cy3, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex }); }
        } else {
            shapesidesegs.push({ x1: cx3, y1: cy3, x2: cx2, y2: cy2, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }
    } else if (segmode == 2) {
        // console.log("sindex:" + shape.index, "cindex:" + index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segmode:" + segmode, "source:" + source);
        if (csplit == 1) {
            shapesidesegs.push({ x1: cx2, y1: cy2, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        } else {
            shapesidesegs.push({ x1: cx2, y1: cy2, x2: cx3, y2: cy3, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }

    }
}
function setsidecornersegs322(sideindex, sidecode, segmode, corner, shapesidesegs, source) {
    let index = corner.index, cx1 = corner.x1, cy1 = corner.y1, cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, csmx1 = corner.sx1, csmy1 = corner.sy1, cw = corner.w, ch = corner.h, cr = corner.r,
        ctype = corner.type, swflag = -1, csplit = corner.split;
    if (segmode == 3) {
        if (csplit == 1) {
            if (index == 0) { shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: cx2, y2: cy2, x3: cx1, y3: cy1, swflag: swflag, shapetype: 3, lntype: 3, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex }); }
            else if (index == 2) { shapesidesegs.push({ x1: cx3, y1: cy3, x2: csmx1, y2: csmy1, x3: cx1, y3: cy1, swflag: swflag, shapetype: 3, lntype: 3, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex }); }
            else if (index == 3) { shapesidesegs.push({ x1: cx3, y1: cy3, x2: csmx1, y2: csmy1, x3: cx1, y3: cy1, swflag: swflag, shapetype: 3, lntype: 3, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex }); }
        } else {
            if (shape.sides.length == 1) { swflag = 1; cx1 = cy1 = cw; }
            shapesidesegs.push({ x1: cx3, y1: cy3, x2: cx2, y2: cy2, x3: cx1, y3: cy1, swflag: swflag, shapetype: 3, lntype: 3, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }
    } else if (segmode == 2) {
        if (csplit == 1) {
            shapesidesegs.push({ x1: cx2, y1: cy2, x2: csmx1, y2: csmy1, x3: cx1, y3: cy1, swflag: swflag, shapetype: 3, lntype: 3, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        } else {
            if (shape.sides.length == 1) { swflag = 1; cx1 = cy1 = cw; }
            shapesidesegs.push({ x1: cx2, y1: cy2, x2: cx3, y2: cy3, x3: cx1, y3: cy1, swflag: swflag, shapetype: 3, lntype: 3, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }
    }
}
function setsidecornersegs323(sideindex, sidecode, segmode, corner, shapesidesegs, source) {
    let index = corner.index, cx1 = corner.x1, cy1 = corner.y1, cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, csmx1 = corner.sx1, csmy1 = corner.sy1, cw = corner.w, ch = corner.h, cr = corner.r,
        ctype = corner.type, swflag = -1, csplit = corner.split;
    let cx4 = 0, cy4 = 0, asign = -1;
    let angle = calclineangle2(cx1, cy1, cx2, cy2);
    let npt1 = rotate_point1(cx3, cy3, asign, angle, cw);
    cx4 = npt1.dx, cy4 = npt1.dy;
    if (segmode == 3) {
        if (csplit == 1) {
            //console.log(cx4, cy4, csmx1, csmy1, cw, ch);
            // console.log("sindex:" + shape.index, "cindex:" + index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segmode:" + segmode, "source:" + source);
            if (index == 0) {
                if (cw > ch) {
                    shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: cx4, y2: cy4, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                    shapesidesegs.push({ x1: cx4, y1: cy4, x2: cx2, y2: cy2, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                } else { shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: cx2, y2: cy2, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex }); }
            } else if (index == 2) {
                if (ch > cw) {
                    shapesidesegs.push({ x1: cx3, y1: cy3, x2: cx4, y2: cy4, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                    shapesidesegs.push({ x1: cx4, y1: cy4, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                } else {
                    shapesidesegs.push({ x1: cx3, y1: cy3, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                }
            } else if (index == 3) {
                if (ch > cw) {
                    shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: cx4, y2: cy4, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                    shapesidesegs.push({ x1: cx4, y1: cy4, x2: cx3, y2: cy3, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                } else {
                    shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: cx3, y2: cy3, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                }
            }
        } else {
            shapesidesegs.push({ x1: cx3, y1: cy3, x2: cx4, y2: cy4, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: cx4, y1: cy4, x2: cx2, y2: cy2, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }
    } else if (segmode == 2) {
        if (csplit == 1) {
            //console.log("sindex:" + shape.index, "cindex:" + index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segmode:" + segmode, "source:" + source);
            if (cw > ch) {
                shapesidesegs.push({ x1: cx2, y1: cy2, x2: cx4, y2: cy4, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                shapesidesegs.push({ x1: cx4, y1: cy4, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            } else {
                shapesidesegs.push({ x1: cx2, y1: cy2, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            }

        } else {
            shapesidesegs.push({ x1: cx2, y1: cy2, x2: cx4, y2: cy4, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: cx4, y1: cy4, x2: cx3, y2: cy3, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }
    }
}
function setsidecornersegs324(sideindex, sidecode, segmode, corner, shapesidesegs, source) {
    let index = corner.index, cx1 = corner.x1, cy1 = corner.y1, cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, csmx1 = corner.sx1, csmy1 = corner.sy1, cw = corner.w, ch = corner.h, cr = corner.r,
        ctype = corner.type, swflag = -1, csplit = corner.split;
    let sx11 = cx2, sy11 = cy2, sx12 = cx3, sy12 = cy3, sx21 = 0, sy21 = 0, sx22 = 0, sy22 = 0, asign = -1, dsign = 1;
    let npt1 = calcTranslationExact1(cr, cx2, cy2, cx3, cy3);
    let dx1 = npt1.dx, dy1 = npt1.dy;
    sx21 = cx2 + dx1, sy21 = cy2 + dy1, sx22 = cx3 + dx1, sy22 = cy3 + dy1;
    let x23 = (cx2 + cx3) / 2, y23 = (cy2 + cy3) / 2;
    let ipt = calintersection1(x23, y23, cx1, cy1, sx21, sy21, sx22, sy22);
    let angle1 = Math.floor(calclineangle2(x23, y23, cx1, cy1));
    let angle2 = Math.floor(calclineangle2(x23, y23, ipt.dx, ipt.dy));
    if (Math.abs(angle1 - angle2) > 10) {
        npt1 = calcTranslationExact1(-cr, cx2, cy2, cx3, cy3);
        dx1 = npt1.dx, dy1 = npt1.dy;
        sx21 = cx2 + dx1, sy21 = cy2 + dy1, sx22 = cx3 + dx1, sy22 = cy3 + dy1;
    }
    if (segmode == 3) {
        if (csplit == 1) {
            //console.log("sindex:" + shape.index, "cindex:" + index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segmode:" + segmode, "source:" + source);
            if (index == 0) {
                shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            } else if (index == 2) {
                shapesidesegs.push({ x1: sx12, y1: sy12, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                shapesidesegs.push({ x1: sx22, y1: sy22, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            } else if (index == 1) {
                shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            } else if (index == 3) {
                shapesidesegs.push({ x1: csmx1, y1: csmy1, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
                shapesidesegs.push({ x1: sx22, y1: sy22, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });

            }
        } else {
            shapesidesegs.push({ x1: sx12, y1: sy12, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx22, y1: sy22, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }
    } else if (segmode == 2) {
        if (csplit == 1) {
            //console.log("sindex:" + shape.index, "cindex:" + index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segmode:" + segmode, "source:" + source);
            shapesidesegs.push({ x1: sx11, y1: sy11, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx21, y1: sy21, x2: csmx1, y2: csmy1, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        } else {
            //console.log("sindex:" + shape.index, "cindex:" + index, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "segmode:" + segmode, "source:" + source);
            shapesidesegs.push({ x1: sx11, y1: sy11, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx22, y1: sy22, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 3, lntype: 1, typeid: ctype, index: index, sidecode: sidecode, sideindex: sideindex });
        }
    }
}
function setsidecodesegs331(sideindex, sidecode, shapesidesegs, source) {
    let side = shape.sides[sideindex];
    let x11 = side.x11, y11 = side.y11, x12 = side.x12, y12 = side.y12;
    let spsideindex = side.spsideindex, startsideindex = shape.startsideindex, startseamindex = shape.startseamindex, startseamtype = shape.startseamtype,
        endsideindex = shape.endsideindex, endseamindex = shape.endseamindex, endseamtype = shape.endseamtype;
    let segx1 = x11, segy1 = y11, segx2 = x12, segy2 = y12, segx3 = 0, segy3 = 0, segtype = 1, isstartseg = false, isendseg = false, startsideshapeindex = -1, endsideshapeindex = -1;
    if (side.smx11 != undefined && side.smx11 != 0) { x11 = side.smx11, y11 = side.smy11, segx1 = x11, segy1 = y11; }
    if (side.smx12 != undefined && side.smx12 != 0) { x12 = side.smx12, y12 = side.smy12, segx2 = x12, segy2 = y12; }
    if (side.sideshapes.length > 0) {
        let sidecodesideshapes = sortsidecodesideshapes32(sidecode, sideindex, side.sideshapes);
        if (sidecodesideshapes.length > 0) {
            let npt = setsideshapesegs33(sideindex, sidecode, segx1, segy1, sidecodesideshapes, shapesidesegs, source);
            segx1 = npt.segx1, segy1 = npt.segy1, isendseg = npt.isendseg;
        }
    }
    if (isendseg == false) {
        shapesidesegs.push({ x1: segx1, y1: segy1, x2: segx2, y2: segy2, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    }
    setendsidecornersegs331(sideindex, sidecode, segx2, segy2, shapesidesegs, source)
    // console.log(sideindex, sidecode, shapesidesegs.length, isendseg);
}
function setsidecodesegs333(sideindex, sidecode, shapesidesegs, source) {
    let side = shape.sides[sideindex], sidesegindex = shapesidesegs.length - 1;
    let x12 = side.x12, y12 = side.y12, x22 = side.x22, y22 = side.y22;
    let segx1 = x12, segy1 = y12, segx2 = x22, segy2 = y22, segx3 = 0, segy3 = 0, segtype = 1;
    if (side.smx12 != undefined && side.smx12 != 0) { x12 = side.smx12, y12 = side.smy12, segx1 = x12, segy1 = y12; }
    if (side.smx22 != undefined && side.smx22 != 0) { x22 = side.smx22, y22 = side.smy22, segx2 = x22, segy2 = y22; }
    if (side.sideshapes.length > 0) {
        let sidecodesideshapes = sortsidecodesideshapes32(sidecode, sideindex, side.sideshapes);
        if (sidecodesideshapes.length > 0) {
            let npt = setsideshapesegs33(sideindex, sidecode, segx1, segy1, sidecodesideshapes, shapesidesegs, source);
            segx1 = npt.segx1, segy1 = npt.segy1, isendseg = npt.isendseg;
        }
    }
    shapesidesegs.push({ x1: segx1, y1: segy1, x2: segx2, y2: segy2, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    setendsidecornersegs323(sideindex, sidecode, shapesidesegs, source);
}
function setsidecodesegs332(sideindex, sidecode, shapesidesegs, source) {
    let side = shape.sides[sideindex];
    let x21 = side.x21, y21 = side.y21, x22 = side.x22, y22 = side.y22;
    let spsideindex = side.spsideindex, startsideindex = shape.startsideindex, startseamindex = shape.startseamindex, startseamtype = shape.startseamtype,
        endsideindex = shape.endsideindex, endseamindex = shape.endseamindex, endseamtype = shape.endseamtype;
    let segx1 = x22, segy1 = y22, segx2 = x21, segy2 = y21, segx3 = 0, segy3 = 0, segtype = 1, isstartseg = false, isendseg = false, startsideshapeindex = -1, endsideshapeindex = -1;
    if (side.smx21 != undefined && side.smx21 != 0) { x21 = side.smx21, y21 = side.smy21, segx2 = x21, segy2 = y21; }
    if (side.smx22 != undefined && side.smx22 != 0) { x22 = side.smx22, y22 = side.smy22, segx1 = x22, segy1 = y22; }
    if (side.sideshapes.length > 0) {
        let sidecodesideshapes = sortsidecodesideshapes32(sidecode, sideindex, side.sideshapes);
        if (sidecodesideshapes.length > 0) {
            let npt = setsideshapesegs30(sideindex, sidecode, segx1, segy1, sidecodesideshapes, shapesidesegs, source);
            segx1 = npt.segx1, segy1 = npt.segy1, isendseg = npt.isendseg;
        }
    }
    if (isendseg == false) {
        shapesidesegs.push({ x1: segx1, y1: segy1, x2: segx2, y2: segy2, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    }
    setendsidecornersegs322(sideindex, sidecode, segx1, segy1, shapesidesegs, source);
}
function setsidecodesegs330(sideindex, sidecode, shapesidesegs, source) {
    let side = shape.sides[sideindex], sidesegindex = shapesidesegs.length - 1;
    let x11 = side.x11, y11 = side.y11, x21 = side.x21, y21 = side.y21;
    let segx1 = x21, segy1 = y21, segx2 = x11, segy2 = y11, segx3 = 0, segy3 = 0, segtype = 1;
    if (side.smx11 != undefined && side.smx11 != 0) { x11 = side.smx11, y11 = side.smy11, segx2 = x11, segy2 = y11; }
    if (side.smx21 != undefined && side.smx21 != 0) { x21 = side.smx21, y21 = side.smy21, segx1 = x21, segy1 = y21; }
    //console.log(sideindex, sidecode, side.sideshapes.length);
    if (side.sideshapes.length > 0) {
        let sidecodesideshapes = sortsidecodesideshapes32(sidecode, sideindex, side.sideshapes);
        if (sidecodesideshapes.length > 0) {
            let npt = setsideshapesegs30(sideindex, sidecode, segx1, segy1, sidecodesideshapes, shapesidesegs, source);
            segx1 = npt.segx1, segy1 = npt.segy1, isendseg = npt.isendseg;
        }
    }
    shapesidesegs.push({ x1: segx1, y1: segy1, x2: segx2, y2: segy2, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: 1, sidecode: sidecode, sideindex: sideindex });
    setendsidecornersegs320(sideindex, sidecode, shapesidesegs, source);
}
function setendsidecornersegs331(sideindex, sidecode, segx2, segy2, shapesidesegs, source) {
    let cindex = 0, segmode = 3;
    let side = shape.sides[sideindex], corner = {};
    if (sideindex < shape.sides.length - 1) { corner = shape.sides[sideindex + 1].corners[cindex]; } else { cindex = 2, corner = side.corners[cindex]; }
    let smx12 = side.smx12, smy12 = side.smy12, cmx12 = side.cmx12, cmy12 = side.cmy12,
        cx2 = corner.x2, cy2 = corner.y2, cx3 = corner.x3, cy3 = corner.y3, ctype = corner.type, csplit = corner.split;
    if (ctype != 0) {
        segx2 = cx2, segy2 = cy2; segmode = 2;
        setsidecornersegs32(sideindex, sidecode, segmode, corner, shapesidesegs, 'setendsidecornersegs321');
    }
    // console.log("sindex:" + shape.index, "cindex:" + cindex, "ctype:" + ctype, "csplit:" + csplit, "sideindex:" + sideindex, "cmx12:" + cmx12, "cmy12:" + cmy12, "segx2:" + segx2, "segy2:" + segy2, "segmode:" + segmode);
}
function setsideshapesegs31(sideindex, sidecode, segx1, segy1, shapesidesegs, source) {
    let side = shape.sides[sideindex], spsideindex = side.spsideindex;
    let sidecodesideshapes = sortsidecodesideshapes32(sidecode, spsideindex, side.sideshapes);
    for (let i = 0; i < sidecodesideshapes.length; i++) {
        let sideshape = sidecodesideshapes[i];
        let sx11 = sideshape.x11, sy11 = sideshape.y11, sx12 = sideshape.x12, sy12 = sideshape.y12, sx21 = sideshape.x21, sy21 = sideshape.y21, sx22 = sideshape.x22, sy22 = sideshape.y22,
            ssstartseamindex = sideshape.startseamindex, ssendseamindex = sideshape.endseamindex, sssideindex = sideshape.ssideindex,
            stypeid = sideshape.typeid, tfact1 = sideshape.tfact1, tfact2 = sideshape.tfact2, rx = 0, ry = 0, npt = {};
        let smx11 = sideshape.smx11, smy11 = sideshape.smy11, smx12 = sideshape.smx12, smy12 = sideshape.smy12, smx21 = sideshape.smx21, smy21 = sideshape.smy21, smx22 = sideshape.smx22, smy22 = sideshape.smy22;
        let startseamindex = shape.startseamindex, endseamindex = shape.endseamindex, seamedsideindex = shape.seamedsideindex, segmode = 0;
        if (startseamindex != -1 && ssstartseamindex != -1 && startseamindex == ssstartseamindex) { segmode = 1; }
        else if (endseamindex != -1 && ssendseamindex != -1 && endseamindex == ssendseamindex) { segmode = 2; }
        // console.log("sindex:" + shape.index, "endseamindex:" + shape.endseamindex, "ssendseamindex:" + ssendseamindex, "segmode:" + segmode, "tfact1:" + tfact1, "tfact2:" + tfact2, "smx21:" + smx21, "smx22:" + smx22);
        if ((startseamindex != -1 && ssstartseamindex != -1 && startseamindex == ssstartseamindex) || (endseamindex != -1 && ssendseamindex != -1 && endseamindex == ssendseamindex)) {
            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                if (tfact1 != undefined && tfact2 != undefined) {
                    if (!(tfact1 == 0 && tfact2 == 1)) {
                        rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
                        npt = quadraticcurveseampath32(sx11, sy11, rx, ry, sx12, sy12, tfact1, tfact2, source);
                    }
                }
            }
            if (sideshape.smx11 != 0) { sx11 = sideshape.smx11, sy11 = sideshape.smy11; }
            if (sideshape.smx21 != 0) { sx21 = sideshape.smx21, sy21 = sideshape.smy21; }
            if (sideshape.smx12 != 0) { sx12 = sideshape.smx12, sy12 = sideshape.smy12; }
            if (sideshape.smx22 != 0) { sx22 = sideshape.smx22, sy22 = sideshape.smy22; }
            //console.log("sindex:" + shape.index, "startseamindex:" + startseamindex, "ssstartseamindex:" + ssstartseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
            //console.log("sindex:" + shape.index, "endseamindex:" + shape.endseamindex, "ssendseamindex:" + ssendseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
        }
        if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
            if (segmode != 1) {
                shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx11, y2: sy11, rx: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            }
            rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
            if (tfact1 != undefined && tfact2 != undefined) {
                if (!(tfact1 == 0 && tfact2 == 1)) {
                    sx11 = npt.x1, sy11 = npt.y1, sx12 = npt.x3, sy12 = npt.y3, rx = npt.x2, ry = npt.y2;
                }
            }
            shapesidesegs.push({ x1: sx11, y1: sy11, x2: sx12, y2: sy12, x3: rx, y3: ry, shapetype: 2, lntype: 2, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
        } else {
            if (segmode != 1) {
                shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            }
            shapesidesegs.push({ x1: sx11, y1: sy11, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            if (segmode != 2) {
                shapesidesegs.push({ x1: sx22, y1: sy22, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            }
        }
        segx1 = sx12, segy1 = sy12;
    }
    return { segx1: segx1, segy1: segy1 };
}
function setsideshapesegs32(sideindex, sidecode, segx1, segy1, shapesidesegs, source) {
    let side = shape.sides[sideindex], spsideindex = side.spsideindex;
    let sidecodesideshapes = sortsidecodesideshapes32(sidecode, spsideindex, side.sideshapes);
    for (let i = sidecodesideshapes.length - 1; i >= 0; i--) {
        let sideshape = sidecodesideshapes[i];
        let sx11 = sideshape.x11, sy11 = sideshape.y11, sx12 = sideshape.x12, sy12 = sideshape.y12, sx21 = sideshape.x21, sy21 = sideshape.y21, sx22 = sideshape.x22, sy22 = sideshape.y22,
            ssstartseamindex = sideshape.startseamindex, ssendseamindex = sideshape.endseamindex, sssideindex = sideshape.ssideindex,
            stypeid = sideshape.typeid, tfact1 = sideshape.tfact1, tfact2 = sideshape.tfact2, rx = 0, ry = 0, npt = {};
        let smx11 = sideshape.smx11, smy11 = sideshape.smy11, smx12 = sideshape.smx12, smy12 = sideshape.smy12, smx21 = sideshape.smx21, smy21 = sideshape.smy21, smx22 = sideshape.smx22, smy22 = sideshape.smy22
        let startseamindex = shape.startseamindex, endseamindex = shape.endseamindex, seamedsideindex = shape.seamedsideindex, segmode = 0;
        if (startseamindex != -1 && ssstartseamindex != -1 && startseamindex == ssstartseamindex) { segmode = 1; }
        else if (endseamindex != -1 && ssendseamindex != -1 && endseamindex == ssendseamindex) { segmode = 2; }
        //console.log("sindex:" + shape.index, "endseamindex:" + shape.endseamindex, "ssendseamindex:" + ssendseamindex, "tfact1:" + tfact1, "tfact2:" + tfact2, "smx21:" + smx21, "smx22:" + smx22);
        if ((startseamindex != -1 && ssstartseamindex != -1 && startseamindex == ssstartseamindex) || (endseamindex != -1 && ssendseamindex != -1 && endseamindex == ssendseamindex)) {
            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                if (tfact1 != undefined && tfact2 != undefined) {
                    if (!(tfact1 == 0 && tfact2 == 1)) {
                        rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
                        npt = quadraticcurveseampath32(sx11, sy11, rx, ry, sx12, sy12, tfact1, tfact2, source);
                    }
                }
            }
            if (sideshape.smx11 != 0) { sx11 = sideshape.smx11, sy11 = sideshape.smy11; }
            if (sideshape.smx21 != 0) { sx21 = sideshape.smx21, sy21 = sideshape.smy21; }
            if (sideshape.smx12 != 0) { sx12 = sideshape.smx12, sy12 = sideshape.smy12; }
            if (sideshape.smx22 != 0) { sx22 = sideshape.smx22, sy22 = sideshape.smy22; }
            //console.log("sindex:" + shape.index, "startseamindex:" + startseamindex, "ssstartseamindex:" + ssstartseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
            //console.log("sindex:" + shape.index, "endseamindex:" + shape.endseamindex, "ssendseamindex:" + ssendseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
        }
        if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
            if (segmode != 2) {
                shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            }
            rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
            if (tfact1 != undefined && tfact2 != undefined) {
                if (!(tfact1 == 0 && tfact2 == 1)) {
                    sx11 = npt.x1, sy11 = npt.y1, sx12 = npt.x3, sy12 = npt.y3, rx = npt.x2, ry = npt.y2;
                }
            }
            shapesidesegs.push({ x1: sx12, y1: sy12, x2: sx11, y2: sy11, x3: rx, y3: ry, shapetype: 2, lntype: 2, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
        } else {
            shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx12, y1: sy12, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx22, y1: sy22, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
        }
        segx1 = sx11, segy1 = sy11;
    }
    return { segx1: segx1, segy1: segy1 };
}
function setsideshapesegs33(sideindex, sidecode, segx1, segy1, sidecodesideshapes, shapesidesegs, source) {
    let isendseg = false;
    for (let i = 0; i < sidecodesideshapes.length; i++) {
        let sideshape = sidecodesideshapes[i];
        let sx11 = sideshape.x11, sy11 = sideshape.y11, sx12 = sideshape.x12, sy12 = sideshape.y12, sx21 = sideshape.x21, sy21 = sideshape.y21, sx22 = sideshape.x22, sy22 = sideshape.y22,
            ssstartseamindex = sideshape.startseamindex, ssendseamindex = sideshape.endseamindex, sssideindex = sideshape.ssideindex,
            stypeid = sideshape.typeid, tfact1 = sideshape.tfact1, tfact2 = sideshape.tfact2, rx = 0, ry = 0, npt = {};
        let smx11 = sideshape.smx11, smy11 = sideshape.smy11, smx12 = sideshape.smx12, smy12 = sideshape.smy12, smx21 = sideshape.smx21, smy21 = sideshape.smy21, smx22 = sideshape.smx22, smy22 = sideshape.smy22;
        let startseamindex = shape.startseamindex, endseamindex = shape.endseamindex, seamedsideindex = shape.seamedsideindex;
        //console.log("sindex:" + shape.index, "startseamindex:" + startseamindex, "ssstartseamindex:" + ssstartseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
        if ((startseamindex != -1 && ssstartseamindex != -1 && startseamindex == ssstartseamindex) || (endseamindex != -1 && ssendseamindex != -1 && endseamindex == ssendseamindex)) {
            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                if (!(tfact1 == 0 && tfact2 == 1)) {
                    rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
                    npt = quadraticcurveseampath32(sx11, sy11, rx, ry, sx12, sy12, tfact1, tfact2, source);
                }
            }
            if (sideshape.smx11 != 0) { sx11 = sideshape.smx11, sy11 = sideshape.smy11; }
            if (sideshape.smx21 != 0) { sx21 = sideshape.smx21, sy21 = sideshape.smy21; }
            if (sideshape.smx12 != 0) { sx12 = sideshape.smx12, sy12 = sideshape.smy12; }
            if (sideshape.smx22 != 0) { sx22 = sideshape.smx22, sy22 = sideshape.smy22; }
            //console.log("sindex:" + shape.index, "startseamindex:" + startseamindex, "ssstartseamindex:" + ssstartseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
            //console.log("sindex:" + shape.index, "endseamindex:" + shape.endseamindex, "ssendseamindex:" + ssendseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
        }
        //console.log("sindex:" + shape.index, "endseamindex:" + shape.endseamindex, "ssendseamindex:" + ssendseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
        if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
            shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            if (tfact1 == 0 && tfact2 == 1) {
                rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
            } else { sx11 = npt.x1, sy11 = npt.y1, sx12 = npt.x3, sy12 = npt.y3, rx = npt.x2, ry = npt.y2; }
            shapesidesegs.push({ x1: sx11, y1: sy11, x2: sx12, y2: sy12, x3: rx, y3: ry, shapetype: 2, lntype: 2, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
        } else {
            shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx11, y1: sy11, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx22, y1: sy22, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
        }
        segx1 = sx12, segy1 = sy12;
    }
    return { segx1: segx1, segy1: segy1, isendseg: isendseg };
}
function setsideshapesegs30(sideindex, sidecode, segx1, segy1, sidecodesideshapes, shapesidesegs, source) {
    let isendseg = false;
    for (let i = sidecodesideshapes.length - 1; i >= 0; i--) {
        let sideshape = sidecodesideshapes[i];
        let sx11 = sideshape.x11, sy11 = sideshape.y11, sx12 = sideshape.x12, sy12 = sideshape.y12, sx21 = sideshape.x21, sy21 = sideshape.y21, sx22 = sideshape.x22, sy22 = sideshape.y22,
            ssstartseamindex = sideshape.startseamindex, ssendseamindex = sideshape.endseamindex, sssideindex = sideshape.ssideindex,
            stypeid = sideshape.typeid, tfact1 = sideshape.tfact1, tfact2 = sideshape.tfact2, rx = 0, ry = 0, npt = {};
        let smx11 = sideshape.smx11, smy11 = sideshape.smy11, smx12 = sideshape.smx12, smy12 = sideshape.smy12, smx21 = sideshape.smx21, smy21 = sideshape.smy21, smx22 = sideshape.smx22, smy22 = sideshape.smy22;
        let startseamindex = shape.startseamindex, endseamindex = shape.endseamindex, seamedsideindex = shape.seamedsideindex;
        //console.log("sindex:" + shape.index, "startseamindex:" + startseamindex, "ssstartseamindex:" + ssstartseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
        if ((startseamindex != -1 && ssstartseamindex != -1 && startseamindex == ssstartseamindex) || (endseamindex != -1 && ssendseamindex != -1 && endseamindex == ssendseamindex)) {
            if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
                if (!(tfact1 == 0 && tfact2 == 1)) {
                    rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
                    npt = quadraticcurveseampath32(sx11, sy11, rx, ry, sx12, sy12, tfact1, tfact2, source);
                }
            }
            if (sideshape.smx11 != 0) { sx11 = sideshape.smx11, sy11 = sideshape.smy11; }
            if (sideshape.smx21 != 0) { sx21 = sideshape.smx21, sy21 = sideshape.smy21; }
            if (sideshape.smx12 != 0) { sx12 = sideshape.smx12, sy12 = sideshape.smy12; }
            if (sideshape.smx22 != 0) { sx22 = sideshape.smx22, sy22 = sideshape.smy22; }
            //console.log("sindex:" + shape.index, "startseamindex:" + startseamindex, "ssstartseamindex:" + ssstartseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
            //console.log("sindex:" + shape.index, "endseamindex:" + shape.endseamindex, "ssendseamindex:" + ssendseamindex, "smx11:" + smx11, "smx12:" + smx12, "smx21:" + smx21, "smx22:" + smx22);
        }
        if (stypeid == 3 || stypeid == 6 || stypeid == 11) {
            shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            if (tfact1 == 0 && tfact2 == 1) {
                rx = (sx21 + sx22) / 2, ry = (sy21 + sy22) / 2;
            } else { sx11 = npt.x1, sy11 = npt.y1, sx12 = npt.x3, sy12 = npt.y3, rx = npt.x2, ry = npt.y2; }
            shapesidesegs.push({ x1: sx12, y1: sy12, x2: sx11, y2: sy11, x3: rx, y3: ry, shapetype: 2, lntype: 2, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
        } else {
            shapesidesegs.push({ x1: segx1, y1: segy1, x2: sx12, y2: sy12, x3: 0, y3: 0, shapetype: 1, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx12, y1: sy12, x2: sx22, y2: sy22, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx22, y1: sy22, x2: sx21, y2: sy21, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
            shapesidesegs.push({ x1: sx21, y1: sy21, x2: sx11, y2: sy11, x3: 0, y3: 0, shapetype: 2, lntype: 1, typeid: stypeid, sidecode: sidecode, sideindex: sideindex });
        }
        segx1 = sx11, segy1 = sy11;
    }
    return { segx1: segx1, segy1: segy1, isendseg: isendseg };
}
function setslabpartshapepath32(sidesegs, source) {
    let x1 = sidesegs[0].x1, y1 = sidesegs[0].y1;
    let spath = "M" + x1 + "," + y1, x2 = 0, y2 = 0;
    for (let i = 0; i < sidesegs.length; i++) {
        if (x1 != sidesegs[i].x1 && y1 != sidesegs[i].y1) {
            x2 = sidesegs[i].x1, y2 = sidesegs[i].y1, x3 = sidesegs[i].x3, y3 = sidesegs[i].y3, shapetype = sidesegs[i].shapetype, lntype = sidesegs[i].lntype, typeid = sidesegs[i].typeid, swflag = sidesegs[i].swflag;
            if (lntype == 1) { spath += " l" + (x2 - x1) + "," + (y2 - y1); }
            else if (lntype == 2) { spath += " Q " + x3 + " " + y3 + " " + x2 + " " + y2; }
            else if (lntype == 3) {
                if (swflag == -1) { spath += " Q " + x3 + " " + y3 + " " + x2 + " " + y2; }
                else { spath += " A" + x3 + " " + y3 + "," + 0 + "," + 0 + "," + swflag + ", " + x2 + " " + y2; }
            }
            x1 = x2, y1 = y2;
        }
        x2 = sidesegs[i].x2, y2 = sidesegs[i].y2, x3 = sidesegs[i].x3, y3 = sidesegs[i].y3, shapetype = sidesegs[i].shapetype, lntype = sidesegs[i].lntype, typeid = sidesegs[i].typeid, swflag = sidesegs[i].swflag;
        if (lntype == 1) { spath += " l" + (x2 - x1) + "," + (y2 - y1); }
        else if (lntype == 2) { spath += " Q " + x3 + " " + y3 + " " + x2 + " " + y2; }
        else if (lntype == 3) {
            if (swflag == -1) { spath += " Q " + x3 + " " + y3 + " " + x2 + " " + y2; }
            else { spath += " A" + x3 + " " + y3 + "," + 0 + "," + 0 + "," + swflag + ", " + x2 + " " + y2;}
        }
        x1 = x2, y1 = y2;
    }
    spath += "z";
    return spath;
}
function drawslabpartsidelines32(shapesidesegs, source) {
    sidesg.selectAll('*').remove();
    let sidecodegindex = '', sidecodeg, drawlabel = false;
    for (let i = 0; i < shape.sides.length; i++) {
        if (i == 0) {
            sidecodegindex = shape.mode + "sidecodeg" + shape.index + i + "" + 0;
            sidecodeg = sidesg.append("g").attr("id", sidecodegindex);
        }
        sidecodegindex = shape.mode + "sidecodeg" + shape.index + i + "" + 1;
        sidecodeg = sidesg.append("g").attr("id", sidecodegindex);
        sidecodegindex = shape.mode + "sidecodeg" + shape.index + i + "" + 2;
        sidecodeg = sidesg.append("g").attr("id", sidecodegindex);
        if (i == shape.sides.length - 1) {
            sidecodegindex = shape.mode + "sidecodeg" + shape.index + i + "" + 3;
            sidecodeg = sidesg.append("g").attr("id", sidecodegindex);
        }
    }
    for (let i = 0; i < shapesidesegs.length; i++) {
        let shapesideseg = shapesidesegs[i];       
        let x1 = shapesideseg.x1, y1 = shapesideseg.y1, x2 = shapesideseg.x2, y2 = shapesideseg.y2, x3 = shapesideseg.x3, y3 = shapesideseg.y3, sidecode = shapesideseg.sidecode,
            sideindex = shapesideseg.sideindex, shapetype = shapesideseg.shapetype, lntype = shapesideseg.lntype, typeid = shapesideseg.typeid, edgetype = linetxt, index = shapesideseg.index,
            swflag = shapesideseg.swflag, spath = '';
        //drawpointcircle(i, 1, sideindex, sidecode, x1, y1, 15, 'A');
       // drawpointcircle(i, 2, sideindex, sidecode, x2, y2, 15, 'A');
        edgetype = sideedgetype(sideindex, sidecode);
        //if (lntype == 2) { edgetype = 'A' }
        if (sidecode == 0 || sidecode == 2) {
            if (lntype == 1) {spath = "M" + x2 + "," + y2 + "l" + (x1 - x2) + "," + (y1 - y2);}
            else if (lntype == 2) { spath = "M " + x2 + " " + y2 + " Q " + x3 + " " + y3 + " " + x1 + " " + y1; }
            else if (lntype == 3) {spath = "";
                if (swflag == -1) { spath = "M " + x2 + " " + y2 + " Q " + x3 + " " + y3 + " " + x1 + " " + y1; }
                else {spath = "M" + x1 + " " + y1 + " A" + x3 + " " + y3 + "," + 0 + "," + 0 + "," + swflag + ", " + x2 + " " + y2;}
            }
        }
        else {
            if (lntype == 1) {spath = "M " + x1 + "," + y1 + "l" + (x2 - x1) + "," + (y2 - y1);}
            else if (lntype == 2) { spath = "M " + x1 + " " + y1 + " Q " + x3 + " " + y3 + " " + x2 + " " + y2; }
            else if (lntype == 3) {spath = "";
                if (swflag == -1) { spath = "M " + x1 + " " + y1 + " Q " + x3 + " " + y3 + " " + x2 + " " + y2; }
                else {spath = "M" + x1 + " " + y1 + " A" + x3 + " " + y3 + "," + 0 + "," + 0 + "," + swflag + ", " + x2 + " " + y2;}
            }
        }
        let lw = calchyplen(x1, y1, x2, y2);
        if (lw > 36 && drawlabel == false) { drawlabel = true; drawsideline33(i, sideindex, sidecode, spath, edgetype, drawlabel); }
        else { drawsideline33(i, sideindex, sidecode, spath, edgetype, false); }
    }
}
function drawslabpartshapepath32(shapesidesegs, source) {
    for (let i = 0; i < shape.sides.length; i++) {
        let sidesegs = shapesidesegs.filter(shapesideseg => shapesideseg.sideindex == i);
        //console.log(i, sidesegs.length, shapesidesegs.length, JSON.stringify(sidesegs));
        let spath = setslabpartshapepath32(sidesegs, source);
        drawshapesidepath32(i, spath);
    }
}