/*Drawing methods*/
function drawslabshapes(index, source) {   
    let material = getmaterialbyindex(index);
    let mslablist = getmatslablistbyindex(index);   
    mslaby = 30; 
    for (let i = 0; i < mslablist.length; i++) {
        if (mslablist[i].IsActive == 1) {
            mslablist[i].Color = material.Description;
            drawslabrectshape(i, mslablist[i], source);
            zoomslabshape(i);
        }
    }
}
function zoomslabshapes(index) {   
    let mslablist = getmatslablistbyindex(index);  
    for (let i = 0; i < mslablist.length; i++) {
        if (mslablist[i].IsActive == 1) {
            zoomslabshape(i, mslablist[i].ID);
        }
    }
}
function zoomslabshape(index, mslabid) {
    let mslabg = mslabsg.select("#mslabg" + mslabid);
    mslabg.attr('transform', 'scale(' + lzscale + ')');
}
function drawslabrectshape(index, mslab, source) {   
    let slabid = mslab.ID, mslabw = applymminchfact(mslab.Width, 1, 0), mslabh = applymminchfact(mslab.Length, 1, 0);
    let lnindex = '', x1 = 0, y1 = 0, x2 = 0, y2 = 0, dx = 10, mx = 0, my = 0, mtext = '', mtlen = 0;  
    if (mslabw > 0 && mslabh > 0) {
        lnindex = slabid + "1", x1 = mslabx, y1 = mslaby - dx, x2 = x1 + mslabw, y2 = y1;
        if (mslab.Color!=null && mslab.Color.length > 0) { mtext = mslab.Color + " - "; }
        if (mslab.StockNo!=null && mslab.StockNo.length > 0) { mtext = mslab.StockNo + " - "; }
        if (mslab.BlockNo != null && mslab.BlockNo.length > 0) { mtext = mslab.BlockNo + " - "; }
        let metric = getcompanyunittype();
        let txt = metric == 0 ? '"' : 'MM';
        mtext += applymminchfact(mslabw, 2, 0) + txt;
       // if (slab.extslabno != null && slab.extslabno.length > 0) { mtext = "#" + slab.extslabno + "-" + mtext; }
       // mtlen = markertext.node().getComputedTextLength();
        mx = (x1 + x2) / 2, my = y1;        
        drawslabrect(index, slabid, mslabx, mslabw, mslabh);
        if (layoutmode == 2) { drawslabrectimage(index, slabid, mslabx, mslabw, mslabh, mslab); }
        drawslabrectmarkers(lnindex, index, slabid, x1, y1, x2, y2, mx, my, mtext);
        lnindex = slabid + "2", x1 = mslabx + mslabw + dx, y1 = mslaby - dx, x2 = x1, y2 = y1 + mslabh;
        mx = x1, my = (y1 + y2) / 2;
        mtext = applymminchfact(mslabh, 2, 0) + txt;
        drawslabrectmarkers(lnindex, index, slabid, x1, y1, x2, y2, mx, my, mtext);
    }
    if ((mslabx + mslabw) > slabpartx) { slabpartx = (mslabx + mslabw + 30); }
    mslaby += (mslabh + 30);
}
function drawslabrect(index, mslabid, mslabx, mslabw, mslabh) {
    let mslabg = mslabsg.select("#mslabg" + mslabid); if (mslabg.empty()) { mslabg = mslabsg.append("g").attr("id", "mslabg" + mslabid); } else { mslabg.selectAll('*').remove(); }
    let mslabpathg = mslabg.select("#mslabpathg" + mslabid); if (mslabpathg.empty()) { mslabpathg = mslabg.append("g").attr("id", "mslabpathg" + mslabid).attr("slabindex", mslabid); }
    let slabrect = mslabpathg.select("#slabrect" + mslabid);
    if (slabrect.empty()) { slabrect = mslabpathg.append("rect").attr("id", "slabrect" + mslabid); }
    slabrect.attr("x", mslabx).attr("y", mslaby).attr("width", mslabw).attr("height", mslabh).attr("slabindex", index).attr("class", "slabshape");
    if (layoutmode != 2) { slabrect.style("fill-opacity", "0.7"); }
}
function drawslabrectimage(index, mslabid, mslabx, mslabw, mslabh, mslab) {
    if (mslab.Path != null && mslab.Path.length > 0) {
        let mslabg = mslabsg.select("#mslabg" + mslabid); if (mslabg.empty()) { mslabg = mslabsg.append("g").attr("id", "mslabg" + mslabid); } else { mslabg.selectAll('*').remove(); }
        let mslabpathg = mslabg.select("#mslabpathg" + mslabid); if (mslabpathg.empty()) { mslabpathg = mslabg.append("g").attr("id", "mslabpathg" + mslabid).attr("slabindex", mslabid); }
        let slabptrnimmage = mslabpathg.select("#slabptrnimg" + mslabid);
        let slabimgpath = mslab.Path;
        if (mslab.ValidPath == -2) {//product
            slabimgpath = contentPath + "Product/" + mslab.Path;
        } else if (slabimgpath.indexOf('.jpg') == -1) {//inventory
            slabimgpath = contentPath + "Inventory/" + mslab.Path + '.jpg';
        }
        //if (slabimgpath.indexOf('.jpg') == -1) { slabimgpath = contentPath + "Inventory/" + slab.Path + '.jpg'; }
        if (slabptrnimmage.empty()) {
            slabptrnimmage = mslabpathg.append("image").attr("id", "slabptrnimg" + mslabid).attr("slabindex", mslabid).attr("x", mslabx).attr("y", mslaby).attr("width", mslabw)
            .attr("height", mslabh).attr("preserveAspectRatio", "xMidYMid").attr("href", slabimgpath);
        }
    }
}
function drawslabrectmarkers(lnindex, index, mslabid, x1, y1, x2, y2, mx, my, mtext) {
    let mslabg = mslabsg.select("#mslabg" + mslabid);
    let mslabmarkersg = mslabg.select("#mslabmarkersg" + mslabid);
    if (mslabmarkersg.empty()) { mslabmarkersg = mslabg.append("g").attr("id", "mslabmarkerg" + mslabid); }
    let markerline = mslabmarkersg.select("#mline" + lnindex);
    if (markerline.empty()) { markerline = mslabmarkersg.append("line").attr("id", "mline" + lnindex); }
    markerline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", "arrow").attr("marker-start", "url(#triangle-start)").attr("marker-end", "url(#triangle-end)");
    let markertext = mslabmarkersg.select("#mtext" + lnindex);
    if (markertext.empty()) { markertext = mslabmarkersg.append("text").attr("id", "mtext" + mslabid).text(mtext); }
    markertext.attr("x", mx).attr("y", my);
}