function initslabsplashseam(x, y, splashindex) {
    let slabsplash = slabsplashs[splashindex];
    let splashseam = {}; index = slabsplash.seams.length;
    splashseam.index = index, splashseam.type = 1, splashseam.spseamindex = index;
    splashseam.x = x, splashseam.y = y, splashseam.w = 0, splashseam.h = 0, splashseam.x1 = 0, splashseam.y1 = 0, splashseam.sw = 0
    splashseam.x2 = 0, splashseam.y2 = 0, splashseam.sx = 0, splashseam.sy = 0, splashseam.split = 0, splashseam.isactive = 1;
    slabsplash.seams.push(splashseam);
}
function onsetslabsplashseams(index) {
    let slabsplash = slabsplashs[index];
    if (slabsplash != undefined) {       
        for (let i = 0; i < slabsplash.seams.length; i++) {
            if (slabsplash.seams[i].isactive == 1) { onsetslabsplashseam1(i, index); }
        }
    }
}
function setslabsplashseam(x, y, index, splashindex) { 
    let slabsplash = slabsplashs[splashindex];   
    if (slabsplash != undefined) {
        if (index == -1) { index = slabsplash.seams.length, initslabsplashseam(x, y, splashindex); }
        let slabsplashseam = slabsplash.seams[index];       
        if (slabsplashseam != undefined) {
            if (slabsplashseam.index != index) { slabsplashseam.index = index; } //reindex 
            if (x > 0 && y > 0) { slabsplashseam.x = x, slabsplashseam.y = y; }     
        }
    }
    return index;
}
function onsetslabsplashseam(x, y, index, splashindex, sideindex, sindex) {
    let slabsplash = slabsplashs[splashindex];
    if (slabsplash != undefined) {
        let slabsplashcount = shapeslabsplashcount(slabsplash.shapesplindex, sideindex, sindex);
        if (slabsplashcount <= 1) {
            index = setslabsplashseam(x, y, index, splashindex);
            let sw = drawslabsplashseam(index, splashindex);
            onsetsidesplashseam1(index, slabsplash.shapesplindex, slabsplash.sideindex, slabsplash.spindex, sw);
        }
    }
}
function onsetslabsplashseam1(index, splashindex) {
    let slabsplash = slabsplashs[splashindex];
    let slabsplashseam = slabsplash.seams[index];
    let sw = slabsplashseam.sw * scale;    
    slabsplashseam.x = slabsplash.x + sw;
    slabsplashseam.y = slabsplash.y21;  
    drawslabsplashseam(index, splashindex);
}
function onsetslabsplashseam2(index, splashindex, sideindex, sindex, sw) {
    let slabsplindex = slabsplashindex(splashindex, sideindex, sindex);  
    if (slabsplindex != -1) {
        let slabsplash = slabsplashs[slabsplindex];
        let slabsplashseam = slabsplash.seams[index];       
        if (slabsplashseam == undefined) { index = setslabsplashseam(0, 0, -1, slabsplindex); slabsplashseam = slabsplash.seams[index]; } 
        slabsplashseam.x = slabsplash.x + (sw * scale);
        slabsplashseam.y = slabsplash.y21;
        drawslabsplashseam(index, slabsplindex);
    }
}
function onslabsplashseamcontextmenu() {
    removeshapetools();
    var m = d3.mouse(this);
    d3.event.preventDefault();
    var index = parseInt(this.getAttribute("index"));
    var splashindex = parseInt(this.getAttribute("splashindex"));
    var slabsplash = slabsplashs[splashindex];
    var slabsplashseam = slabsplash.seams[index];
    // console.log(m[0], m[1], slabsplashseam.x, slabsplashseam.y);
    var mx = m[0], my = m[1];
    drawslabsplashseamcontrols(index, splashindex, mx, my);
}
function ondeleteslabsplashseam(index, splashindex) {
    removeshapetools();
    deleteslabsplashseam(index, splashindex);
    let slabsplash = slabsplashs[splashindex];    
    ondeletesplashseam1(index, slabsplash.shapesplindex, slabsplash.sideindex, slabsplash.spindex);
}
function ondeleteslabsplashseam1(index, splashindex, sideindex, sindex) {
    let slabsplindex = slabsplashindex(splashindex, sideindex, sindex);  
    if (slabsplindex != -1) {
        deleteslabsplashseam(index, slabsplindex);
        ActionUpdateSlabParts();
    }
}
function deleteslabsplashseam(index, splashindex) {
    let slabsplash = slabsplashs[splashindex];
    let splashseam = slabsplash.seams[index];
    if (splashseam != undefined) {      
        splashseam.isactive = 0;
        if (seamsg != undefined) {
            var seamindex = splashindex + "" + index;
            var splashg = slabsplashsg.select("#slabsplashg" + splashindex);
            var splashseamg = splashg.select("#splashseamg" + seamindex);
            if (!splashseamg.empty()) { splashseamg.remove(); }
            var seammarkerg = splashseamg.select("#smarkerg" + seamindex);
            if (!seammarkerg.empty()) { seammarkerg.remove(); }
        }
    }
}
function onsseamslabsplashseam(index, splashindex) {
    removeshapetools();
    //1.clone slabsplah
    let slabsplash = JSON.parse(JSON.stringify(slabsplashs[splashindex]));
    let slabsubsplash = JSON.parse(JSON.stringify(slabsplashs[splashindex]));
    //2. set slabsplash
    setseamslabsplash1(index, splashindex, slabsplash);
    //3. set slabsubsplash
    setseamslabsplash2(index, splashindex, slabsubsplash);
}

function setseamslabsplash1(index, splashindex, slabsplash) {
    let slabsplashseam = slabsplash.seams[index];
    slabsplash.width = slabsplashseam.sw;
    slabsplashs[splashindex] = slabsplash;   
    slabsplashshape(splashindex);
    drawslabsplash(splashindex);
    onrotateslabsplash(0, splashindex, slabsplash.angle);
    slabsplashseams(index, slabsplash, slabsplashseam.sw);    
    onsetslabsplashseams(splashindex);
}
function setseamslabsplash2(index, splashindex, slabsubsplash) {    
    let slabsubsplashseam = slabsubsplash.seams[index];
    slabsubsplash.x = slabsubsplashseam.x, slabsubsplashseam.y = slabsubsplashseam.y;
    slabsubsplash.width = slabsubsplash.width - slabsubsplashseam.sw;
    console.log(slabsubsplashseam.spseamindex);
    slabsubsplash.spseamindex = slabsubsplashseam.spseamindex;
    let slabsubslashindex = slabsplashs.length;
    slabsplashs.push(slabsubsplash);
    slabsplashshape(slabsubslashindex);
    drawslabsplash(slabsubslashindex);
    onrotateslabsplash(0, slabsubslashindex, slabsubsplash.angle);
    slabsplashseams(index, slabsubsplash, slabsubsplashseam.sw);
    onsetslabsplashseams(slabsubslashindex);
}
function slabsplashseams(index, slabsplash, seamwidth) {   
    if (slabsplash.seams.length > 0) {
        let x11 = slabsplash.x11, y11 = slabsplash.y11, x12 = slabsplash.x12, y12 = slabsplash.y12;
        let nseams = [];
        for (let j = 0; j < slabsplash.seams.length; j++) {
            if (j != index) {
                let slabsplashseam = JSON.parse(JSON.stringify(slabsplash.seams[j]));
                let sx1 = slabsplashseam.x1, sy1 = slabsplashseam.y1, sx2 = slabsplashseam.x2, sy2 = slabsplashseam.y2;
                let isinline = ispointinline(x11, y11, x12, y12, sx1, sy1);
                if (isinline) { nseams.push(slabsplashseam); }               
            }
        }
        for (let j = 0; j < nseams.length; j++) {            
            if (nseams[j].sw > seamwidth) { nseams[j].sw = nseams[j].sw - seamwidth; }          
        }
        slabsplash.seams = nseams;        
    }   
}

function drawslabsplashseam(index, splashindex) {
    let slabsplash = slabsplashs[splashindex];
    let splashseam = slabsplash.seams[index];
    let sw = 0;
    if (splashseam != undefined) {
        let smtype = splashseam.type, x = splashseam.x, y = splashseam.y, h = splashseam.h, x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        var x11 = slabsplash.x11, y11 = slabsplash.y11, x12 = slabsplash.x12, y12 = slabsplash.y12, x21 = slabsplash.x21, y21 = slabsplash.y21, x22 = slabsplash.x22, y22 = slabsplash.y22;
        let mx1 = 0, my1 = 0, mx2 = 0, my2 = 0, mtx = 0, mty = 0;
        let npt1 = calcverticalvectorpoint(x11, y11, x12, y12, x, y);
        x1 = npt1.dx, y1 = npt1.dy;
        let npt2 = calcverticalvectorpoint(x21, y21, x22, y22, x1, y1);
        x2 = npt2.dx, y2 = npt2.dy;
        splashseam.x1 = x1, splashseam.y1 = y1, splashseam.x2 = x2, splashseam.y2 = y2;
        mx1 = x11, my1 = y11, mx2 = x1; my2 = y1, mtx = (mx1 + mx2) / 2, mty = (my1 + my2) / 2;
        sw = (calchyplen(mx1, my1, mx2, my2) / scale).toFixed();
        splashseam.sw = sw;
        drawslabsplashseamline(index, splashindex, x1, y1, x2, y2);
        drawslabsplashseammarkerline(index, splashindex, mx1, my1, mx2, my2, mtx, mty, sw);
    }
    return sw;  
}
function drawslabsplashseamline(index, splashindex, x1, y1, x2, y2) {
    let slabsplash = slabsplashs[splashindex];
    let eclass = "shapeseam", smode = 'slabsplash';
    let seamindex = splashindex + "" + index;
    let splashg = slabsplashsg.select("#slabsplashg" + splashindex);
    if (splashg.empty()) { splashg = slabsplashsg.append("g").attr("id", "slabsplashg" + splashindex); }
    let splashseamg = splashg.select("#splashseamg" + seamindex);
    if (splashseamg.empty()) { splashseamg = splashg.append("g").attr("id", "splashseamg" + seamindex); }
    let seamline = splashseamg.select("#splashseam" + seamindex);
    if (seamline.empty()) { seamline = splashseamg.append("line").attr("id", "splashseam" + seamindex); }
    seamline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", eclass).attr("smode", smode)
    .attr("index", index).attr("splashindex", splashindex).on('contextmenu', onslabsplashseamcontextmenu).call(slabsplashseamdrag);
    let seambandline = splashseamg.select("#splashseamband" + seamindex);
    if (seambandline.empty()) { seambandline = splashseamg.append("line").attr("id", "splashseamband" + seamindex); }
    seambandline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("index", index).attr("smode", smode).attr("splashindex", splashindex).on('contextmenu', onslabsplashseamcontextmenu).call(slabsplashseamdrag);
    seambandline.attr("style", "stroke:" + slabsplash.color).attr("scolor", slabsplash.color).style("stroke-opacity", "0.1").style("stroke-width", "20").on("mouseover", showshapesideseam).on("mouseout", hideshapesideseam);
}
function drawslabsplashseammarkerline(index, splashindex, x1, y1, x2, y2, mtx, mty, mtext) {
    var seamindex = splashindex + "" + index;
    var splashg = slabsplashsg.select("#slabsplashg" + splashindex);
    if (splashg.empty()) { splashg = slabsplashsg.append("g").attr("id", "slabsplashg" + splashindex); }
    var splashseamg = splashg.select("#splashseamg" + seamindex);
    if (splashseamg.empty()) { splashseamg = splashg.append("g").attr("id", "splashseamg" + seamindex); }
    var splashseammarkerg = splashseamg.select("#smarkerg" + seamindex);
    if (splashseammarkerg.empty()) { splashseammarkerg = splashseamg.append("g").attr("id", "smarkerg" + seamindex); }
    if (!splashseammarkerg.empty()) {
        var markerline = splashseammarkerg.select("#msline" + seamindex);
        if (markerline.empty()) { markerline = splashseammarkerg.append("line").attr("id", "msline" + seamindex); }       
        markerline.attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", "cutoutarrow").attr("marker-start", 'url(#triangle-start)').attr("marker-end", '"url(#triangle-end)');
        var smarkertext = splashseammarkerg.select("#mstext" + seamindex);
        if (smarkertext.empty()) { smarkertext = splashseammarkerg.append("text").attr("id", "mstext" + seamindex); }
        smarkertext.attr("x", mtx).attr("y", mty).text(mtext + '"');
        splashseammarkerg.style("opacity", "1");
    }
}
function slabsplashseamdragstarted() {
    let mode = this.getAttribute("smode");   
    if (mode == 'slabsplash') {
        let index = parseInt(this.getAttribute("index"));
        let splashindex = parseInt(this.getAttribute("splashindex"));
        let slabsplash = slabsplashs[splashindex];
        let splashseam = slabsplash.seams[index];
        dragdx = d3.event.x - splashseam.x; dragdy = d3.event.y - splashseam.y;
        removeshapetools();
        bdrag = true;
    }
}
function slabsplashseamdragged() {
    if (bdrag) {
        let index = parseInt(this.getAttribute("index"));
        let splashindex = parseInt(this.getAttribute("splashindex"));
        let slabsplash = slabsplashs[splashindex];
        let splashseam = slabsplash.seams[index];
        let sx = d3.event.x - dragdx, sy = d3.event.y - dragdy;
        splashseam.x = sx; splashseam.y = sy;
        onsetslabsplashseam(sx, sy, index, splashindex, slabsplash.sideindex, slabsplash.spindex);
    }
}
function slabsplashseamdragended() {
    bdrag = false;
    var index = parseInt(this.getAttribute("index"));
    var splashindex = parseInt(this.getAttribute("splashindex"));
    var seamindex = splashindex + "" + index;
    let seammarkerg = seamsg.select("#smarkerg" + seamindex);
    if (!seammarkerg.empty()) { seammarkerg.style("opacity", "0"); }
    ActionUpdateSlabParts();
}
function showslabsplashseam() {
    //var index = parseInt(this.getAttribute("index"));
    //var sideindex = parseInt(this.getAttribute("sideindex"));
    //var seamindex = sideindex + "" + index;
    //var seammarkerg = seamsg.select("#smarkerg" + seamindex);
    //if (!seammarkerg.empty()) { seammarkerg.style("opacity", "1"); }
    d3.select(this).attr("style", "stroke:" + 'blue').style("stroke-opacity", "1.0").style("stroke-width", "15");
}
function hideslabsplashseam() {
    if (!bdrag) {
        //var index = parseInt(this.getAttribute("index"));
        //var sideindex = parseInt(this.getAttribute("sideindex"));
        //var seamindex = sideindex + "" + index;
        //var seammarkerg = seamsg.select("#smarkerg" + seamindex);
        //if (!seammarkerg.empty()) { seammarkerg.style("opacity", "0"); }
        let scolor = d3.select(this).attr('scolor');
        d3.select(this).attr("style", "stroke:" + scolor).style("stroke-opacity", "0.1").style("stroke-width", "15");
    }
}
